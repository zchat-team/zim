// Code generated by protoc-gen-rpcx. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          v3.19.0
// source: proto/group/group.proto

package group

import (
	context "context"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = server.NewServer
var _ = client.NewClient
var _ = protocol.NewMessage

//================== interface skeleton ===================
type GroupAble interface {
	// GroupAble can be used for interface verification.

	// Create is server rpc method as defined
	Create(ctx context.Context, args *CreateReq, reply *CreateRsp) (err error)

	// GetJoinedGroups is server rpc method as defined
	GetJoinedGroups(ctx context.Context, args *GetJoinedGroupsReq, reply *GetJoinedGroupsRsp) (err error)

	// Sync is server rpc method as defined
	Sync(ctx context.Context, args *SyncReq, reply *SyncRsp) (err error)
}

//================== server skeleton ===================
type GroupImpl struct{}

// ServeForGroup starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForGroup(addr string) error {
	s := server.NewServer()
	s.RegisterName("Group", new(GroupImpl), "")
	return s.Serve("tcp", addr)
}

// Create is server rpc method as defined
func (s *GroupImpl) Create(ctx context.Context, args *CreateReq, reply *CreateRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = CreateRsp{}

	return nil
}

// GetJoinedGroups is server rpc method as defined
func (s *GroupImpl) GetJoinedGroups(ctx context.Context, args *GetJoinedGroupsReq, reply *GetJoinedGroupsRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GetJoinedGroupsRsp{}

	return nil
}

// Sync is server rpc method as defined
func (s *GroupImpl) Sync(ctx context.Context, args *SyncReq, reply *SyncRsp) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = SyncRsp{}

	return nil
}

//================== client stub ===================
// Group is a client wrapped XClient.
type GroupClient struct {
	xclient client.XClient
}

// NewGroupClient wraps a XClient as GroupClient.
// You can pass a shared XClient object created by NewXClientForGroup.
func NewGroupClient(xclient client.XClient) *GroupClient {
	return &GroupClient{xclient: xclient}
}

// NewXClientForGroup creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForGroup(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Group", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// Create is client rpc method as defined
func (c *GroupClient) Create(ctx context.Context, args *CreateReq) (reply *CreateRsp, err error) {
	reply = &CreateRsp{}
	err = c.xclient.Call(ctx, "Create", args, reply)
	return reply, err
}

// GetJoinedGroups is client rpc method as defined
func (c *GroupClient) GetJoinedGroups(ctx context.Context, args *GetJoinedGroupsReq) (reply *GetJoinedGroupsRsp, err error) {
	reply = &GetJoinedGroupsRsp{}
	err = c.xclient.Call(ctx, "GetJoinedGroups", args, reply)
	return reply, err
}

// Sync is client rpc method as defined
func (c *GroupClient) Sync(ctx context.Context, args *SyncReq) (reply *SyncRsp, err error) {
	reply = &SyncRsp{}
	err = c.xclient.Call(ctx, "Sync", args, reply)
	return reply, err
}

//================== oneclient stub ===================
// GroupOneClient is a client wrapped oneClient.
type GroupOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewGroupOneClient wraps a OneClient as GroupOneClient.
// You can pass a shared OneClient object created by NewOneClientForGroup.
func NewGroupOneClient(oneclient *client.OneClient) *GroupOneClient {
	return &GroupOneClient{
		serviceName: "Group",
		oneclient:   oneclient,
	}
}

// ======================================================

// Create is client rpc method as defined
func (c *GroupOneClient) Create(ctx context.Context, args *CreateReq) (reply *CreateRsp, err error) {
	reply = &CreateRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Create", args, reply)
	return reply, err
}

// GetJoinedGroups is client rpc method as defined
func (c *GroupOneClient) GetJoinedGroups(ctx context.Context, args *GetJoinedGroupsReq) (reply *GetJoinedGroupsRsp, err error) {
	reply = &GetJoinedGroupsRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "GetJoinedGroups", args, reply)
	return reply, err
}

// Sync is client rpc method as defined
func (c *GroupOneClient) Sync(ctx context.Context, args *SyncReq) (reply *SyncRsp, err error) {
	reply = &SyncRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Sync", args, reply)
	return reply, err
}
