syntax = "proto3";

option go_package = "github.com/zchat-team/zim/proto/http/demo/swagger";
package github.com.zchat.team.zim.proto.http.demo.swagger;

import "protoc-gen-openapiv2/options/annotations.proto";
//import "protoc-gen-openapiv2/options/openapiv2.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_getters_all) =false;

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

message ResponseBody {
  int32 code = 1;
  string message = 2;
  string detail = 3;
  map<string,string> metadata =4;
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "demo";
    version: "v0.1.0";
  };
  host: "localhost:5188",
  base_path: "/api/v1"
  external_docs: {
    url: "https://github.com/swagger-api/swagger-ui";
    description: "demo";
  }
  schemes: [HTTP, HTTPS];
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security:{
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        name: "Authorization";
        in: IN_HEADER;
      }
    }
  }
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  }
  responses: [
    {
      key: "401";
      value: {
        description: "Returned when the user does not login.";
        schema: {
          json_schema: {
            ref: ".swagger.ResponseBody";
          }
        }
      }
    },
    {
      key: "403";
      value: {
        description: "Returned when the user does not have permission to access the resource.";
        schema: {
          json_schema: {
            ref: ".swagger.ResponseBody";
          }
        }
      }
    },
    {
      key: "404";
      value: {
        description: "Returned when the resource does not exist.";
        schema: {
          json_schema: {
            ref: ".swagger.ResponseBody";
          }
        }
      }
    },
    {
      key: "599";
      value: {
        description: "Returned when the business error happen.";
        schema: {
          json_schema: {
            ref: ".swagger.ResponseBody";
          }
        }
      }
    }
  ]
};

