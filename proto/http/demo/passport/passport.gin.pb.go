// Code generated by protoc-gen-zmicro-gin. DO NOT EDIT.
// versions:
// - protoc-gen-zmicro-gin v0.1.0
// - protoc                v3.19.0
// source: proto/http/demo/passport/passport.proto

package passport

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = errors.New
var _ = context.TODO
var _ = gin.New

type PassportHTTPServer interface {
	ChangePwd(context.Context, *ChangePwdReq, *ChangePwdRsp) error
	Login(context.Context, *LoginReq, *LoginRsp) error
	Logout(context.Context, *LogoutReq, *LogoutRsp) error
	RefreshToken(context.Context, *RefreshTokenReq, *RefreshTokenRsp) error
	SetPwd(context.Context, *SetPwdReq, *SetPwdRsp) error
	Sms(context.Context, *SmsReq, *SmsRsp) error
	SmsLogin(context.Context, *SmsLoginReq, *SmsLoginRsp) error
	Validate(context.Context, any) error
	ErrorEncoder(c *gin.Context, err error, isBadRequest bool)
}

type UnimplementedPassportHTTPServer struct{}

func (*UnimplementedPassportHTTPServer) ChangePwd(context.Context, *ChangePwdReq, *ChangePwdRsp) error {
	return errors.New("method ChangePwd not implemented")
}
func (*UnimplementedPassportHTTPServer) Login(context.Context, *LoginReq, *LoginRsp) error {
	return errors.New("method Login not implemented")
}
func (*UnimplementedPassportHTTPServer) Logout(context.Context, *LogoutReq, *LogoutRsp) error {
	return errors.New("method Logout not implemented")
}
func (*UnimplementedPassportHTTPServer) RefreshToken(context.Context, *RefreshTokenReq, *RefreshTokenRsp) error {
	return errors.New("method RefreshToken not implemented")
}
func (*UnimplementedPassportHTTPServer) SetPwd(context.Context, *SetPwdReq, *SetPwdRsp) error {
	return errors.New("method SetPwd not implemented")
}
func (*UnimplementedPassportHTTPServer) Sms(context.Context, *SmsReq, *SmsRsp) error {
	return errors.New("method Sms not implemented")
}
func (*UnimplementedPassportHTTPServer) SmsLogin(context.Context, *SmsLoginReq, *SmsLoginRsp) error {
	return errors.New("method SmsLogin not implemented")
}
func (*UnimplementedPassportHTTPServer) Validate(context.Context, any) error { return nil }
func (*UnimplementedPassportHTTPServer) ErrorEncoder(c *gin.Context, err error, isBadRequest bool) {
	var code = 500
	if isBadRequest {
		code = 400
	}
	c.String(code, err.Error())
}

func RegisterPassportHTTPServer(g *gin.RouterGroup, srv PassportHTTPServer) {
	r := g.Group("")
	r.POST("/passport/login", _Passport_Login0_HTTP_Handler(srv))
	r.POST("/passport/smsLogin", _Passport_SmsLogin0_HTTP_Handler(srv))
	r.POST("/passport/logout", _Passport_Logout0_HTTP_Handler(srv))
	r.POST("/passport/sms", _Passport_Sms0_HTTP_Handler(srv))
	r.POST("/passport/setPwd", _Passport_SetPwd0_HTTP_Handler(srv))
	r.POST("/passport/changePwd", _Passport_ChangePwd0_HTTP_Handler(srv))
	r.POST("/passport/refreshToken", _Passport_RefreshToken0_HTTP_Handler(srv))
}

func _Passport_Login0_HTTP_Handler(srv PassportHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req LoginReq
		var rsp LoginRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Login(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Passport_SmsLogin0_HTTP_Handler(srv PassportHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req SmsLoginReq
		var rsp SmsLoginRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.SmsLogin(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Passport_Logout0_HTTP_Handler(srv PassportHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req LogoutReq
		var rsp LogoutRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Logout(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Passport_Sms0_HTTP_Handler(srv PassportHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req SmsReq
		var rsp SmsRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Sms(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Passport_SetPwd0_HTTP_Handler(srv PassportHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req SetPwdReq
		var rsp SetPwdRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.SetPwd(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Passport_ChangePwd0_HTTP_Handler(srv PassportHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req ChangePwdReq
		var rsp ChangePwdRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.ChangePwd(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Passport_RefreshToken0_HTTP_Handler(srv PassportHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req RefreshTokenReq
		var rsp RefreshTokenRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.RefreshToken(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}
