// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/http/demo/passport/passport.proto

package passport

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Token struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty" form:"access_token"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty" form:"refresh_token"`
	Created      int64  `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty" form:"created"`
	Expires      int64  `protobuf:"varint,4,opt,name=expires,proto3" json:"expires,omitempty" form:"expires"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{0}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (*Token) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.Token"
}

type LoginReq struct {
	// 登录类型 1: 手机 2: 萝卜号 3: email
	Type     int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty" form:"type" binding:"required,oneof=1 2 3"`
	Account  string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty" form:"account" binding:"required"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty" form:"password" binding:"required"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{1}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (*LoginReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.LoginReq"
}

type LoginRsp struct {
	Token `protobuf:"bytes,1,opt,name=token,proto3,embedded=token" json:"token"`
	Uid   int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *LoginRsp) Reset()         { *m = LoginRsp{} }
func (m *LoginRsp) String() string { return proto.CompactTextString(m) }
func (*LoginRsp) ProtoMessage()    {}
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{2}
}
func (m *LoginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRsp.Merge(m, src)
}
func (m *LoginRsp) XXX_Size() int {
	return m.Size()
}
func (m *LoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRsp proto.InternalMessageInfo

func (*LoginRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.LoginRsp"
}

type SmsLoginReq struct {
	Mobile string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty" form:"mobile" binding:"required,mobile"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty" form:"code" binding:"required"`
}

func (m *SmsLoginReq) Reset()         { *m = SmsLoginReq{} }
func (m *SmsLoginReq) String() string { return proto.CompactTextString(m) }
func (*SmsLoginReq) ProtoMessage()    {}
func (*SmsLoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{3}
}
func (m *SmsLoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmsLoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmsLoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmsLoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmsLoginReq.Merge(m, src)
}
func (m *SmsLoginReq) XXX_Size() int {
	return m.Size()
}
func (m *SmsLoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SmsLoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_SmsLoginReq proto.InternalMessageInfo

func (*SmsLoginReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.SmsLoginReq"
}

type SmsLoginRsp struct {
	Token    `protobuf:"bytes,1,opt,name=token,proto3,embedded=token" json:"token"`
	Uid      int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	IsSignup bool  `protobuf:"varint,3,opt,name=is_signup,json=isSignup,proto3" json:"is_signup,omitempty"`
}

func (m *SmsLoginRsp) Reset()         { *m = SmsLoginRsp{} }
func (m *SmsLoginRsp) String() string { return proto.CompactTextString(m) }
func (*SmsLoginRsp) ProtoMessage()    {}
func (*SmsLoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{4}
}
func (m *SmsLoginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmsLoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmsLoginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmsLoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmsLoginRsp.Merge(m, src)
}
func (m *SmsLoginRsp) XXX_Size() int {
	return m.Size()
}
func (m *SmsLoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SmsLoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SmsLoginRsp proto.InternalMessageInfo

func (*SmsLoginRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.SmsLoginRsp"
}

type SmsReq struct {
	Mobile string `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty" form:"mobile" binding:"required,mobile"`
}

func (m *SmsReq) Reset()         { *m = SmsReq{} }
func (m *SmsReq) String() string { return proto.CompactTextString(m) }
func (*SmsReq) ProtoMessage()    {}
func (*SmsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{5}
}
func (m *SmsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmsReq.Merge(m, src)
}
func (m *SmsReq) XXX_Size() int {
	return m.Size()
}
func (m *SmsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SmsReq.DiscardUnknown(m)
}

var xxx_messageInfo_SmsReq proto.InternalMessageInfo

func (*SmsReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.SmsReq"
}

type SmsRsp struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *SmsRsp) Reset()         { *m = SmsRsp{} }
func (m *SmsRsp) String() string { return proto.CompactTextString(m) }
func (*SmsRsp) ProtoMessage()    {}
func (*SmsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{6}
}
func (m *SmsRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SmsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SmsRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SmsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmsRsp.Merge(m, src)
}
func (m *SmsRsp) XXX_Size() int {
	return m.Size()
}
func (m *SmsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SmsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SmsRsp proto.InternalMessageInfo

func (*SmsRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.SmsRsp"
}

type SetPwdReq struct {
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty" form:"password" binding:"required"`
}

func (m *SetPwdReq) Reset()         { *m = SetPwdReq{} }
func (m *SetPwdReq) String() string { return proto.CompactTextString(m) }
func (*SetPwdReq) ProtoMessage()    {}
func (*SetPwdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{7}
}
func (m *SetPwdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPwdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPwdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPwdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPwdReq.Merge(m, src)
}
func (m *SetPwdReq) XXX_Size() int {
	return m.Size()
}
func (m *SetPwdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPwdReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetPwdReq proto.InternalMessageInfo

func (*SetPwdReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.SetPwdReq"
}

type SetPwdRsp struct {
	Token `protobuf:"bytes,1,opt,name=token,proto3,embedded=token" json:"token"`
}

func (m *SetPwdRsp) Reset()         { *m = SetPwdRsp{} }
func (m *SetPwdRsp) String() string { return proto.CompactTextString(m) }
func (*SetPwdRsp) ProtoMessage()    {}
func (*SetPwdRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{8}
}
func (m *SetPwdRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPwdRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPwdRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPwdRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPwdRsp.Merge(m, src)
}
func (m *SetPwdRsp) XXX_Size() int {
	return m.Size()
}
func (m *SetPwdRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPwdRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SetPwdRsp proto.InternalMessageInfo

func (*SetPwdRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.SetPwdRsp"
}

type ChangePwdReq struct {
	OldPassword string `protobuf:"bytes,1,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty" form:"old_password" binding:"required"`
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty" form:"new_password" binding:"required"`
}

func (m *ChangePwdReq) Reset()         { *m = ChangePwdReq{} }
func (m *ChangePwdReq) String() string { return proto.CompactTextString(m) }
func (*ChangePwdReq) ProtoMessage()    {}
func (*ChangePwdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{9}
}
func (m *ChangePwdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePwdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangePwdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangePwdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePwdReq.Merge(m, src)
}
func (m *ChangePwdReq) XXX_Size() int {
	return m.Size()
}
func (m *ChangePwdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePwdReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePwdReq proto.InternalMessageInfo

func (*ChangePwdReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.ChangePwdReq"
}

type ChangePwdRsp struct {
	Token `protobuf:"bytes,1,opt,name=token,proto3,embedded=token" json:"token"`
}

func (m *ChangePwdRsp) Reset()         { *m = ChangePwdRsp{} }
func (m *ChangePwdRsp) String() string { return proto.CompactTextString(m) }
func (*ChangePwdRsp) ProtoMessage()    {}
func (*ChangePwdRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{10}
}
func (m *ChangePwdRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangePwdRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangePwdRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangePwdRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangePwdRsp.Merge(m, src)
}
func (m *ChangePwdRsp) XXX_Size() int {
	return m.Size()
}
func (m *ChangePwdRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangePwdRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ChangePwdRsp proto.InternalMessageInfo

func (*ChangePwdRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.ChangePwdRsp"
}

type RefreshTokenReq struct {
	Uid          int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" binding:"required"`
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty" form:"refresh_token" binding:"required"`
}

func (m *RefreshTokenReq) Reset()         { *m = RefreshTokenReq{} }
func (m *RefreshTokenReq) String() string { return proto.CompactTextString(m) }
func (*RefreshTokenReq) ProtoMessage()    {}
func (*RefreshTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{11}
}
func (m *RefreshTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshTokenReq.Merge(m, src)
}
func (m *RefreshTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *RefreshTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshTokenReq proto.InternalMessageInfo

func (*RefreshTokenReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.RefreshTokenReq"
}

type RefreshTokenRsp struct {
	Token `protobuf:"bytes,1,opt,name=token,proto3,embedded=token" json:"token"`
}

func (m *RefreshTokenRsp) Reset()         { *m = RefreshTokenRsp{} }
func (m *RefreshTokenRsp) String() string { return proto.CompactTextString(m) }
func (*RefreshTokenRsp) ProtoMessage()    {}
func (*RefreshTokenRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{12}
}
func (m *RefreshTokenRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshTokenRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshTokenRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefreshTokenRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshTokenRsp.Merge(m, src)
}
func (m *RefreshTokenRsp) XXX_Size() int {
	return m.Size()
}
func (m *RefreshTokenRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshTokenRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshTokenRsp proto.InternalMessageInfo

func (*RefreshTokenRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.RefreshTokenRsp"
}

type LogoutReq struct {
}

func (m *LogoutReq) Reset()         { *m = LogoutReq{} }
func (m *LogoutReq) String() string { return proto.CompactTextString(m) }
func (*LogoutReq) ProtoMessage()    {}
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{13}
}
func (m *LogoutReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutReq.Merge(m, src)
}
func (m *LogoutReq) XXX_Size() int {
	return m.Size()
}
func (m *LogoutReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutReq.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutReq proto.InternalMessageInfo

func (*LogoutReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.LogoutReq"
}

type LogoutRsp struct {
}

func (m *LogoutRsp) Reset()         { *m = LogoutRsp{} }
func (m *LogoutRsp) String() string { return proto.CompactTextString(m) }
func (*LogoutRsp) ProtoMessage()    {}
func (*LogoutRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_459785371f77202d, []int{14}
}
func (m *LogoutRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutRsp.Merge(m, src)
}
func (m *LogoutRsp) XXX_Size() int {
	return m.Size()
}
func (m *LogoutRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutRsp proto.InternalMessageInfo

func (*LogoutRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.demo.passport.LogoutRsp"
}
func init() {
	proto.RegisterType((*Token)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.Token")
	proto.RegisterType((*LoginReq)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.LoginReq")
	proto.RegisterType((*LoginRsp)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.LoginRsp")
	proto.RegisterType((*SmsLoginReq)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.SmsLoginReq")
	proto.RegisterType((*SmsLoginRsp)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.SmsLoginRsp")
	proto.RegisterType((*SmsReq)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.SmsReq")
	proto.RegisterType((*SmsRsp)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.SmsRsp")
	proto.RegisterType((*SetPwdReq)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.SetPwdReq")
	proto.RegisterType((*SetPwdRsp)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.SetPwdRsp")
	proto.RegisterType((*ChangePwdReq)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.ChangePwdReq")
	proto.RegisterType((*ChangePwdRsp)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.ChangePwdRsp")
	proto.RegisterType((*RefreshTokenReq)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.RefreshTokenReq")
	proto.RegisterType((*RefreshTokenRsp)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.RefreshTokenRsp")
	proto.RegisterType((*LogoutReq)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.LogoutReq")
	proto.RegisterType((*LogoutRsp)(nil), "github.com.zchat.team.zim.proto.http.demo.passport.LogoutRsp")
}

func init() {
	proto.RegisterFile("proto/http/demo/passport/passport.proto", fileDescriptor_459785371f77202d)
}

var fileDescriptor_459785371f77202d = []byte{
	// 1136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xe4, 0x87, 0x6b, 0x8f, 0x5d, 0x52, 0x4d, 0x03, 0x8d, 0xdc, 0xb0, 0x0e, 0x23, 0x4a,
	0x43, 0xd4, 0xac, 0xd5, 0x54, 0x42, 0xaa, 0x45, 0xd4, 0xc6, 0x51, 0x2b, 0x0e, 0x3d, 0x44, 0x6b,
	0x2e, 0x20, 0xa4, 0x68, 0xe3, 0x9d, 0xac, 0x57, 0xd8, 0x3b, 0x1b, 0xcf, 0xba, 0x81, 0xdc, 0xc2,
	0x81, 0x1f, 0x52, 0x44, 0xa3, 0x00, 0x2d, 0x1c, 0x80, 0x56, 0xea, 0x01, 0x55, 0x22, 0x41, 0x1c,
	0x08, 0x50, 0x95, 0x20, 0xc4, 0x21, 0xc7, 0x48, 0x20, 0xc4, 0x01, 0x59, 0x21, 0x8e, 0xe3, 0xf4,
	0x9a, 0xbf, 0x00, 0xcd, 0xce, 0xae, 0xbd, 0x4e, 0x37, 0x07, 0x6c, 0xc2, 0x29, 0x3b, 0x79, 0xef,
	0xfb, 0xf6, 0x7d, 0xdf, 0x7b, 0xfb, 0xd6, 0x0b, 0xcf, 0x5b, 0x25, 0x6a, 0xd3, 0x54, 0xde, 0xb6,
	0xad, 0x94, 0x46, 0x8a, 0x34, 0x65, 0xa9, 0x8c, 0x59, 0xb4, 0x64, 0x37, 0x2e, 0x64, 0x27, 0x03,
	0x8d, 0xe9, 0x86, 0x9d, 0x2f, 0xcf, 0xc8, 0x39, 0x5a, 0x94, 0x17, 0x72, 0x79, 0xd5, 0x96, 0x6d,
	0xa2, 0x16, 0xe5, 0x05, 0xa3, 0x28, 0x12, 0x64, 0x4e, 0x21, 0x73, 0x0a, 0xd9, 0x43, 0x26, 0x06,
	0x75, 0x4a, 0xf5, 0x02, 0x49, 0xa9, 0x96, 0x91, 0x52, 0x4d, 0x93, 0xda, 0xaa, 0x6d, 0x50, 0x93,
	0x09, 0x40, 0xa2, 0x5f, 0xa7, 0x3a, 0x15, 0xb7, 0xe7, 0x57, 0xee, 0x7f, 0x93, 0x3e, 0xcc, 0xac,
	0x41, 0x0a, 0xda, 0xf4, 0x0c, 0xc9, 0xab, 0x37, 0x0d, 0x5a, 0x72, 0x13, 0xc4, 0x9f, 0xdc, 0xa8,
	0x4e, 0xcc, 0x51, 0x6a, 0x11, 0x53, 0xb5, 0x8c, 0x9b, 0x63, 0x29, 0x6a, 0x39, 0xd4, 0x4f, 0xde,
	0x06, 0x57, 0x00, 0xec, 0x7d, 0x95, 0xbe, 0x49, 0x4c, 0x94, 0x86, 0x71, 0x35, 0x97, 0x23, 0x8c,
	0x4d, 0xdb, 0xfc, 0x3c, 0x00, 0x86, 0xc0, 0x70, 0x34, 0x73, 0xe6, 0xa0, 0x92, 0x3c, 0x3d, 0x4b,
	0x4b, 0xc5, 0x34, 0xf6, 0x47, 0xb1, 0x12, 0x13, 0x47, 0x81, 0x1d, 0x87, 0x27, 0x4b, 0x64, 0xb6,
	0x44, 0x58, 0xde, 0x05, 0x77, 0x39, 0xe0, 0x81, 0x83, 0x4a, 0xb2, 0x5f, 0x80, 0x5b, 0xc2, 0x58,
	0x89, 0xbb, 0x67, 0x01, 0xbf, 0x00, 0x4f, 0xe4, 0x4a, 0x44, 0xb5, 0x89, 0x36, 0xd0, 0x3d, 0x04,
	0x86, 0xbb, 0x33, 0xe8, 0xa0, 0x92, 0x7c, 0x4a, 0x00, 0xdd, 0x00, 0x56, 0xbc, 0x14, 0x9e, 0x4d,
	0xde, 0xb2, 0x8c, 0x12, 0x61, 0x03, 0x3d, 0x87, 0xb3, 0xdd, 0x00, 0x56, 0xbc, 0x14, 0xfc, 0x17,
	0x80, 0x91, 0x1b, 0x54, 0x37, 0x4c, 0x85, 0xcc, 0xa1, 0x6b, 0xb0, 0xc7, 0x7e, 0xdb, 0x22, 0x8e,
	0xb6, 0xde, 0xcc, 0xc5, 0xed, 0x89, 0xae, 0x83, 0x4a, 0x72, 0x44, 0x40, 0x79, 0x00, 0x0f, 0xcd,
	0x18, 0xa6, 0x66, 0x98, 0x3a, 0x2f, 0x78, 0xae, 0x6c, 0x94, 0x88, 0x76, 0x81, 0x9a, 0x84, 0xce,
	0x8e, 0x5f, 0x1c, 0x1a, 0x1b, 0xba, 0x84, 0x15, 0x07, 0x8e, 0x32, 0xf0, 0x84, 0x9a, 0xcb, 0xd1,
	0xb2, 0x69, 0xbb, 0x42, 0x87, 0x05, 0xd3, 0x73, 0x0d, 0xa3, 0x78, 0x2c, 0x80, 0x0c, 0x2b, 0x1e,
	0x10, 0x5d, 0x83, 0x11, 0x3e, 0x09, 0xf3, 0xb4, 0x24, 0x44, 0x47, 0x33, 0x2f, 0x0a, 0x12, 0x2c,
	0x48, 0xbc, 0x60, 0x20, 0x4b, 0x03, 0x8a, 0xe7, 0x3d, 0x75, 0xcc, 0x42, 0xaf, 0xc1, 0xde, 0x66,
	0xeb, 0x62, 0x63, 0x97, 0xe5, 0x7f, 0x3f, 0x94, 0xb2, 0xd3, 0x90, 0x4c, 0x64, 0xb3, 0x92, 0x0c,
	0x6d, 0x55, 0x92, 0x40, 0x11, 0x8c, 0xe8, 0x14, 0xec, 0x2e, 0x1b, 0x9a, 0xa3, 0xb6, 0x5b, 0xe1,
	0x97, 0x78, 0x19, 0xc0, 0x58, 0xb6, 0xc8, 0x1a, 0xd6, 0x5e, 0x87, 0xe1, 0x22, 0x9d, 0x31, 0x0a,
	0xc4, 0x1d, 0x1c, 0x59, 0xa8, 0x39, 0x2f, 0xd4, 0x88, 0x50, 0x90, 0xbd, 0x6e, 0x44, 0x71, 0xd1,
	0xe8, 0x32, 0xec, 0xc9, 0x51, 0x8d, 0xb8, 0xc6, 0x9e, 0x13, 0x2c, 0x92, 0x3b, 0x0b, 0x54, 0x23,
	0x81, 0x7e, 0x38, 0x10, 0x7c, 0xc7, 0x5f, 0xd2, 0xff, 0xec, 0x07, 0x3a, 0x0b, 0xa3, 0x06, 0x9b,
	0x66, 0x86, 0x6e, 0x96, 0x2d, 0xa7, 0xa1, 0x11, 0x25, 0x62, 0xb0, 0xac, 0x73, 0xc6, 0x53, 0x30,
	0x9c, 0x2d, 0xb2, 0xff, 0xd0, 0x26, 0x3c, 0x28, 0x18, 0x99, 0x85, 0x90, 0x6b, 0x98, 0xc3, 0xe7,
	0x3a, 0xa1, 0xc0, 0x68, 0x96, 0xd8, 0x53, 0xf3, 0x9a, 0x18, 0xfa, 0xe6, 0xa4, 0x81, 0xf6, 0x27,
	0x6d, 0xb6, 0xc1, 0x79, 0xac, 0xd6, 0xe2, 0x6f, 0x01, 0x8c, 0x4f, 0xe6, 0x55, 0x53, 0x27, 0x6e,
	0xfd, 0x53, 0x30, 0x4e, 0x0b, 0xda, 0xf4, 0x21, 0x0d, 0xa3, 0x42, 0xc3, 0x0b, 0x42, 0x83, 0x3f,
	0x21, 0x50, 0x47, 0x8c, 0x16, 0xb4, 0x29, 0x37, 0x81, 0x33, 0x9a, 0x64, 0xbe, 0xc9, 0xd8, 0x15,
	0xc0, 0xe8, 0x4f, 0x08, 0x66, 0x34, 0xc9, 0xbc, 0xc7, 0x88, 0x0d, 0x7f, 0xcd, 0xc7, 0xeb, 0xcf,
	0x17, 0x00, 0xf6, 0x29, 0xbe, 0xed, 0xc9, 0x2d, 0x7a, 0x49, 0x8c, 0x23, 0x70, 0xd6, 0xe1, 0xf3,
	0x42, 0xc7, 0xb3, 0x42, 0x07, 0x7f, 0x56, 0x83, 0xca, 0x77, 0x86, 0x36, 0x1b, 0xbc, 0xb7, 0x5b,
	0x87, 0xb2, 0x75, 0x75, 0x07, 0x71, 0xb5, 0x6c, 0x73, 0x5c, 0x38, 0x54, 0xdf, 0xf1, 0xda, 0x11,
	0x83, 0xd1, 0x1b, 0x54, 0xa7, 0x65, 0x5b, 0x21, 0x73, 0xbe, 0x03, 0xb3, 0xc6, 0xbe, 0x8b, 0xc1,
	0xc8, 0x94, 0x8b, 0x46, 0xbf, 0x02, 0xd8, 0xeb, 0x2c, 0x06, 0xf4, 0x72, 0x3b, 0x37, 0xf7, 0xd6,
	0x5c, 0xa2, 0x03, 0x34, 0xb3, 0xf0, 0x95, 0x95, 0x09, 0x0c, 0x51, 0xed, 0xfb, 0xe5, 0xda, 0xad,
	0xf5, 0xfd, 0xd5, 0xfb, 0xfb, 0x6b, 0x8b, 0x7b, 0x5f, 0xdd, 0xab, 0x7d, 0x7e, 0x07, 0xc5, 0x6b,
	0x6b, 0xef, 0xd6, 0xef, 0x2e, 0xd6, 0x3f, 0x7b, 0x58, 0x7b, 0xf4, 0xc9, 0x3b, 0xbf, 0xed, 0x7e,
	0xd4, 0xd5, 0x8f, 0xfb, 0x9a, 0xbf, 0x36, 0x0a, 0x9c, 0x20, 0x0d, 0x46, 0xd0, 0x1f, 0x00, 0x46,
	0xbc, 0x15, 0x87, 0xae, 0xb4, 0x53, 0x8b, 0x6f, 0x67, 0x27, 0x3a, 0x23, 0x60, 0x16, 0x7e, 0x65,
	0x65, 0x62, 0x38, 0x50, 0x0f, 0xaa, 0x7f, 0xf9, 0xf5, 0xee, 0xc6, 0xbd, 0xc7, 0x0f, 0x96, 0x5a,
	0x55, 0x9d, 0xc1, 0xa8, 0xa9, 0x8a, 0xb9, 0x4c, 0x5c, 0xd8, 0x2f, 0x00, 0x86, 0x45, 0xeb, 0xd0,
	0x78, 0x9b, 0x16, 0x8b, 0x19, 0x48, 0x74, 0x02, 0x67, 0x16, 0x4e, 0xaf, 0x4c, 0x0c, 0x06, 0x4a,
	0x0a, 0x73, 0x19, 0xef, 0xfd, 0xe8, 0xc8, 0x78, 0x1a, 0x9f, 0x6a, 0x69, 0x0e, 0x2d, 0xdb, 0x5c,
	0xc4, 0x06, 0x80, 0xdd, 0xd9, 0x22, 0x43, 0xe9, 0x36, 0x7d, 0xe5, 0xe5, 0xb7, 0x8d, 0x65, 0x16,
	0xbe, 0xba, 0x32, 0x71, 0x2e, 0xb0, 0xf6, 0xbe, 0xfd, 0x0f, 0xd7, 0x6b, 0xb7, 0x6e, 0x3f, 0x7e,
	0xb0, 0xb4, 0xbf, 0xb6, 0x58, 0xbf, 0xbb, 0xe8, 0x88, 0x40, 0xf8, 0x64, 0x4b, 0x2f, 0xb8, 0x82,
	0x4d, 0x00, 0xc3, 0x62, 0xcb, 0xb7, 0xd7, 0x86, 0xc6, 0x5b, 0x27, 0xd1, 0x09, 0x5c, 0x48, 0x39,
	0xe2, 0x49, 0xd9, 0x5f, 0xfd, 0xa9, 0xfe, 0x68, 0x55, 0x3c, 0x2f, 0x4f, 0x36, 0x83, 0x39, 0x0c,
	0x5c, 0xca, 0xef, 0x00, 0x46, 0x1b, 0x3b, 0x19, 0x5d, 0x6d, 0xa7, 0x1c, 0xff, 0x6b, 0x28, 0xd1,
	0x21, 0x03, 0xb3, 0xf0, 0xe4, 0x91, 0x9a, 0x76, 0x37, 0x56, 0xf7, 0x3e, 0xfe, 0xc1, 0xa7, 0x69,
	0x00, 0x9f, 0x6e, 0x6a, 0xca, 0x79, 0x24, 0x5c, 0xd6, 0x36, 0x80, 0x71, 0xff, 0x7a, 0x45, 0x93,
	0xed, 0xd4, 0x75, 0xe8, 0x05, 0x92, 0xe8, 0x9c, 0x84, 0x59, 0xf8, 0xfa, 0xd1, 0xdb, 0xed, 0xfd,
	0xf5, 0xbd, 0xdb, 0xdf, 0xec, 0x3e, 0xbc, 0x5f, 0xff, 0x60, 0xc9, 0xd1, 0x77, 0x16, 0x3f, 0xd3,
	0xd4, 0xe7, 0x7f, 0x7b, 0xa4, 0xc1, 0x48, 0xe6, 0x8d, 0xcd, 0xbf, 0xa5, 0xd0, 0xe6, 0x8e, 0x04,
	0xb6, 0x76, 0x24, 0xb0, 0xbd, 0x23, 0x81, 0xe5, 0xaa, 0x14, 0xfa, 0xb4, 0x2a, 0x85, 0x7e, 0xae,
	0x4a, 0x60, 0xb3, 0x2a, 0x81, 0xad, 0xaa, 0x14, 0xfa, 0xb3, 0x2a, 0x85, 0x5e, 0xf7, 0x7d, 0x76,
	0xa5, 0x9c, 0xaa, 0x47, 0x79, 0xd5, 0xa9, 0x05, 0xa3, 0x98, 0x3a, 0xea, 0xcb, 0x6d, 0x26, 0xec,
	0x44, 0x2e, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x98, 0x5d, 0xe9, 0x82, 0xdc, 0x0d, 0x00, 0x00,
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expires != 0 {
		i = encodeVarintPassport(dAtA, i, uint64(m.Expires))
		i--
		dAtA[i] = 0x20
	}
	if m.Created != 0 {
		i = encodeVarintPassport(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintPassport(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		i = encodeVarintPassport(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPassport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SmsLoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmsLoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsLoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmsLoginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmsLoginRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsLoginRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSignup {
		i--
		if m.IsSignup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Uid != 0 {
		i = encodeVarintPassport(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPassport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SmsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SmsRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SmsRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SmsRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetPwdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPwdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPwdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetPwdRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPwdRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPwdRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPassport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChangePwdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePwdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangePwdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewPassword) > 0 {
		i -= len(m.NewPassword)
		copy(dAtA[i:], m.NewPassword)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.NewPassword)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldPassword) > 0 {
		i -= len(m.OldPassword)
		copy(dAtA[i:], m.OldPassword)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.OldPassword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangePwdRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePwdRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangePwdRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPassport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RefreshTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintPassport(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefreshTokenRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshTokenRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefreshTokenRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPassport(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LogoutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LogoutRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPassport(dAtA []byte, offset int, v uint64) int {
	offset -= sovPassport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovPassport(uint64(m.Created))
	}
	if m.Expires != 0 {
		n += 1 + sovPassport(uint64(m.Expires))
	}
	return n
}

func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPassport(uint64(m.Type))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *LoginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Token.Size()
	n += 1 + l + sovPassport(uint64(l))
	if m.Uid != 0 {
		n += 1 + sovPassport(uint64(m.Uid))
	}
	return n
}

func (m *SmsLoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *SmsLoginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Token.Size()
	n += 1 + l + sovPassport(uint64(l))
	if m.Uid != 0 {
		n += 1 + sovPassport(uint64(m.Uid))
	}
	if m.IsSignup {
		n += 2
	}
	return n
}

func (m *SmsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *SmsRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *SetPwdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *SetPwdRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Token.Size()
	n += 1 + l + sovPassport(uint64(l))
	return n
}

func (m *ChangePwdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldPassword)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.NewPassword)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *ChangePwdRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Token.Size()
	n += 1 + l + sovPassport(uint64(l))
	return n
}

func (m *RefreshTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPassport(uint64(m.Uid))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func (m *RefreshTokenRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Token.Size()
	n += 1 + l + sovPassport(uint64(l))
	return n
}

func (m *LogoutReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LogoutRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPassport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPassport(x uint64) (n int) {
	return sovPassport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmsLoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmsLoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmsLoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmsLoginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmsLoginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmsLoginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSignup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSignup = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SmsRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SmsRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SmsRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPwdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPwdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPwdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPwdRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPwdRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPwdRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePwdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePwdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePwdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePwdRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePwdRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePwdRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshTokenRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshTokenRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshTokenRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPassport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPassport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPassport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPassport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPassport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPassport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPassport = fmt.Errorf("proto: unexpected end of group")
)
