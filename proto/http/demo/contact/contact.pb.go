// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/http/demo/contact/contact.proto

package contact

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddReq struct {
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *AddReq) Reset()         { *m = AddReq{} }
func (m *AddReq) String() string { return proto.CompactTextString(m) }
func (*AddReq) ProtoMessage()    {}
func (*AddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{0}
}
func (m *AddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReq.Merge(m, src)
}
func (m *AddReq) XXX_Size() int {
	return m.Size()
}
func (m *AddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddReq proto.InternalMessageInfo

func (*AddReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.AddReq"
}

type AddRsp struct {
}

func (m *AddRsp) Reset()         { *m = AddRsp{} }
func (m *AddRsp) String() string { return proto.CompactTextString(m) }
func (*AddRsp) ProtoMessage()    {}
func (*AddRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{1}
}
func (m *AddRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRsp.Merge(m, src)
}
func (m *AddRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddRsp proto.InternalMessageInfo

func (*AddRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.AddRsp"
}

type SetApplicationReadReq struct {
}

func (m *SetApplicationReadReq) Reset()         { *m = SetApplicationReadReq{} }
func (m *SetApplicationReadReq) String() string { return proto.CompactTextString(m) }
func (*SetApplicationReadReq) ProtoMessage()    {}
func (*SetApplicationReadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{2}
}
func (m *SetApplicationReadReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetApplicationReadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetApplicationReadReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetApplicationReadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationReadReq.Merge(m, src)
}
func (m *SetApplicationReadReq) XXX_Size() int {
	return m.Size()
}
func (m *SetApplicationReadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationReadReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationReadReq proto.InternalMessageInfo

func (*SetApplicationReadReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.SetApplicationReadReq"
}

type SetApplicationReadRsp struct {
}

func (m *SetApplicationReadRsp) Reset()         { *m = SetApplicationReadRsp{} }
func (m *SetApplicationReadRsp) String() string { return proto.CompactTextString(m) }
func (*SetApplicationReadRsp) ProtoMessage()    {}
func (*SetApplicationReadRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{3}
}
func (m *SetApplicationReadRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetApplicationReadRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetApplicationReadRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetApplicationReadRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetApplicationReadRsp.Merge(m, src)
}
func (m *SetApplicationReadRsp) XXX_Size() int {
	return m.Size()
}
func (m *SetApplicationReadRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetApplicationReadRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SetApplicationReadRsp proto.InternalMessageInfo

func (*SetApplicationReadRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.SetApplicationReadRsp"
}

type GetApplicationListReq struct {
}

func (m *GetApplicationListReq) Reset()         { *m = GetApplicationListReq{} }
func (m *GetApplicationListReq) String() string { return proto.CompactTextString(m) }
func (*GetApplicationListReq) ProtoMessage()    {}
func (*GetApplicationListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{4}
}
func (m *GetApplicationListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApplicationListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApplicationListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApplicationListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplicationListReq.Merge(m, src)
}
func (m *GetApplicationListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetApplicationListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplicationListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplicationListReq proto.InternalMessageInfo

func (*GetApplicationListReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.GetApplicationListReq"
}

type Application struct {
	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid      int64  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// 状态[1:审核中 2:通过 3:拒绝]
	Status    int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt int64 `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ExpiresAt int64 `protobuf:"varint,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (m *Application) Reset()         { *m = Application{} }
func (m *Application) String() string { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()    {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{5}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Application.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(m, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (*Application) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.Application"
}

type GetApplicationListRsp struct {
	List []*Application `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *GetApplicationListRsp) Reset()         { *m = GetApplicationListRsp{} }
func (m *GetApplicationListRsp) String() string { return proto.CompactTextString(m) }
func (*GetApplicationListRsp) ProtoMessage()    {}
func (*GetApplicationListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{6}
}
func (m *GetApplicationListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApplicationListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApplicationListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApplicationListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApplicationListRsp.Merge(m, src)
}
func (m *GetApplicationListRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetApplicationListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApplicationListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetApplicationListRsp proto.InternalMessageInfo

func (*GetApplicationListRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.GetApplicationListRsp"
}

type ListReq struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *ListReq) Reset()         { *m = ListReq{} }
func (m *ListReq) String() string { return proto.CompactTextString(m) }
func (*ListReq) ProtoMessage()    {}
func (*ListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{7}
}
func (m *ListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReq.Merge(m, src)
}
func (m *ListReq) XXX_Size() int {
	return m.Size()
}
func (m *ListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListReq proto.InternalMessageInfo

func (*ListReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.ListReq"
}

type Friend struct {
	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FriendUid string `protobuf:"bytes,2,opt,name=friend_uid,json=friendUid,proto3" json:"friend_uid,omitempty"`
	CreatedAt int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Nickname  string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar    string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Alias     string `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (m *Friend) Reset()         { *m = Friend{} }
func (m *Friend) String() string { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()    {}
func (*Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{8}
}
func (m *Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend.Merge(m, src)
}
func (m *Friend) XXX_Size() int {
	return m.Size()
}
func (m *Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_Friend proto.InternalMessageInfo

func (*Friend) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.Friend"
}

type ListRsp struct {
	List []*Friend `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *ListRsp) Reset()         { *m = ListRsp{} }
func (m *ListRsp) String() string { return proto.CompactTextString(m) }
func (*ListRsp) ProtoMessage()    {}
func (*ListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{9}
}
func (m *ListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRsp.Merge(m, src)
}
func (m *ListRsp) XXX_Size() int {
	return m.Size()
}
func (m *ListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ListRsp proto.InternalMessageInfo

func (*ListRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.ListRsp"
}

type AcceptReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AcceptReq) Reset()         { *m = AcceptReq{} }
func (m *AcceptReq) String() string { return proto.CompactTextString(m) }
func (*AcceptReq) ProtoMessage()    {}
func (*AcceptReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{10}
}
func (m *AcceptReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptReq.Merge(m, src)
}
func (m *AcceptReq) XXX_Size() int {
	return m.Size()
}
func (m *AcceptReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptReq.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptReq proto.InternalMessageInfo

func (*AcceptReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.AcceptReq"
}

type AcceptRsp struct {
}

func (m *AcceptRsp) Reset()         { *m = AcceptRsp{} }
func (m *AcceptRsp) String() string { return proto.CompactTextString(m) }
func (*AcceptRsp) ProtoMessage()    {}
func (*AcceptRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{11}
}
func (m *AcceptRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptRsp.Merge(m, src)
}
func (m *AcceptRsp) XXX_Size() int {
	return m.Size()
}
func (m *AcceptRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptRsp proto.InternalMessageInfo

func (*AcceptRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.AcceptRsp"
}

type RefuseReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RefuseReq) Reset()         { *m = RefuseReq{} }
func (m *RefuseReq) String() string { return proto.CompactTextString(m) }
func (*RefuseReq) ProtoMessage()    {}
func (*RefuseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{12}
}
func (m *RefuseReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefuseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefuseReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefuseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefuseReq.Merge(m, src)
}
func (m *RefuseReq) XXX_Size() int {
	return m.Size()
}
func (m *RefuseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RefuseReq.DiscardUnknown(m)
}

var xxx_messageInfo_RefuseReq proto.InternalMessageInfo

func (*RefuseReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.RefuseReq"
}

type RefuseRsp struct {
}

func (m *RefuseRsp) Reset()         { *m = RefuseRsp{} }
func (m *RefuseRsp) String() string { return proto.CompactTextString(m) }
func (*RefuseRsp) ProtoMessage()    {}
func (*RefuseRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a9f6f72e9e053a, []int{13}
}
func (m *RefuseRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefuseRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefuseRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RefuseRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefuseRsp.Merge(m, src)
}
func (m *RefuseRsp) XXX_Size() int {
	return m.Size()
}
func (m *RefuseRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RefuseRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RefuseRsp proto.InternalMessageInfo

func (*RefuseRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.contact.RefuseRsp"
}
func init() {
	proto.RegisterType((*AddReq)(nil), "github.com.zchat.team.zchat.server.api.contact.AddReq")
	proto.RegisterType((*AddRsp)(nil), "github.com.zchat.team.zchat.server.api.contact.AddRsp")
	proto.RegisterType((*SetApplicationReadReq)(nil), "github.com.zchat.team.zchat.server.api.contact.SetApplicationReadReq")
	proto.RegisterType((*SetApplicationReadRsp)(nil), "github.com.zchat.team.zchat.server.api.contact.SetApplicationReadRsp")
	proto.RegisterType((*GetApplicationListReq)(nil), "github.com.zchat.team.zchat.server.api.contact.GetApplicationListReq")
	proto.RegisterType((*Application)(nil), "github.com.zchat.team.zchat.server.api.contact.Application")
	proto.RegisterType((*GetApplicationListRsp)(nil), "github.com.zchat.team.zchat.server.api.contact.GetApplicationListRsp")
	proto.RegisterType((*ListReq)(nil), "github.com.zchat.team.zchat.server.api.contact.ListReq")
	proto.RegisterType((*Friend)(nil), "github.com.zchat.team.zchat.server.api.contact.Friend")
	proto.RegisterType((*ListRsp)(nil), "github.com.zchat.team.zchat.server.api.contact.ListRsp")
	proto.RegisterType((*AcceptReq)(nil), "github.com.zchat.team.zchat.server.api.contact.AcceptReq")
	proto.RegisterType((*AcceptRsp)(nil), "github.com.zchat.team.zchat.server.api.contact.AcceptRsp")
	proto.RegisterType((*RefuseReq)(nil), "github.com.zchat.team.zchat.server.api.contact.RefuseReq")
	proto.RegisterType((*RefuseRsp)(nil), "github.com.zchat.team.zchat.server.api.contact.RefuseRsp")
}

func init() {
	proto.RegisterFile("proto/http/demo/contact/contact.proto", fileDescriptor_b7a9f6f72e9e053a)
}

var fileDescriptor_b7a9f6f72e9e053a = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4f, 0x88, 0x1c, 0x45,
	0x14, 0xc6, 0xa7, 0x76, 0x76, 0x66, 0xb7, 0x6b, 0xa3, 0x68, 0xb1, 0xea, 0xa4, 0x93, 0xb4, 0x63,
	0x41, 0x60, 0x89, 0x6c, 0x37, 0x6c, 0xc0, 0xe0, 0x7a, 0xea, 0x88, 0x0a, 0x12, 0x10, 0x5a, 0x16,
	0xc4, 0x4b, 0xa8, 0x74, 0xd7, 0xce, 0x16, 0xce, 0x76, 0x97, 0x5d, 0x35, 0x8b, 0x78, 0x33, 0x2a,
	0x88, 0x11, 0x37, 0x8c, 0xa2, 0x5e, 0x84, 0x78, 0x10, 0x16, 0x0f, 0x09, 0xfe, 0x81, 0x81, 0x0c,
	0x11, 0xf1, 0xb4, 0xc7, 0x80, 0x97, 0x1c, 0x75, 0x27, 0x33, 0x3b, 0xde, 0xbc, 0x7a, 0x93, 0xae,
	0xea, 0x9e, 0xf4, 0xec, 0xcc, 0x82, 0x3d, 0xec, 0xa9, 0xab, 0xea, 0xeb, 0xf7, 0xea, 0xfd, 0xbe,
	0xea, 0x57, 0x34, 0x3c, 0xcf, 0xe3, 0x48, 0x46, 0xce, 0x96, 0x94, 0xdc, 0x09, 0xe8, 0x76, 0xe4,
	0xf8, 0x51, 0x28, 0x89, 0x2f, 0xb3, 0xa7, 0xad, 0x74, 0x64, 0x37, 0x98, 0xdc, 0x6a, 0x5d, 0xb3,
	0xfd, 0x68, 0xdb, 0x7e, 0xdf, 0xdf, 0x22, 0xd2, 0x96, 0x94, 0x64, 0x43, 0x41, 0xe3, 0x1d, 0x1a,
	0xdb, 0x84, 0x33, 0x3b, 0x8d, 0x32, 0xcf, 0x36, 0xa2, 0xa8, 0xd1, 0xa4, 0x0e, 0xe1, 0xcc, 0x21,
	0x61, 0x18, 0x49, 0x22, 0x59, 0x14, 0x0a, 0x9d, 0xcd, 0x5c, 0x6e, 0x44, 0x8d, 0x48, 0x6f, 0x9c,
	0x8c, 0xd2, 0x55, 0xfd, 0xf0, 0x57, 0x1b, 0x34, 0x5c, 0x8d, 0x38, 0x0d, 0x09, 0x67, 0x3b, 0x6b,
	0x4e, 0xc4, 0x55, 0xe4, 0x64, 0x16, 0x6c, 0xc2, 0xaa, 0x1b, 0x04, 0x1e, 0x7d, 0x17, 0x3d, 0x01,
	0xcb, 0x2d, 0x16, 0xd4, 0x40, 0x1d, 0xac, 0x94, 0xbd, 0x64, 0x88, 0x17, 0xb5, 0x26, 0x38, 0x7e,
	0x06, 0x3e, 0xf5, 0x26, 0x95, 0x2e, 0xe7, 0x4d, 0xe6, 0xab, 0x70, 0x8f, 0x92, 0x24, 0xe8, 0x18,
	0x41, 0x47, 0xbc, 0x36, 0x26, 0x5c, 0x61, 0x42, 0x26, 0x11, 0x0f, 0x00, 0x5c, 0xca, 0x2d, 0xa3,
	0xc7, 0xe1, 0xdc, 0x68, 0xd7, 0x39, 0x16, 0x64, 0x65, 0xcc, 0x8d, 0xca, 0x40, 0x26, 0x5c, 0x0c,
	0x99, 0xff, 0x4e, 0x48, 0xb6, 0x69, 0xad, 0x5c, 0x07, 0x2b, 0x86, 0x37, 0x9a, 0xa3, 0xa7, 0x61,
	0x95, 0xec, 0x10, 0x49, 0xe2, 0xda, 0xbc, 0x52, 0xd2, 0x59, 0xb2, 0x2e, 0x24, 0x91, 0x2d, 0x51,
	0xab, 0xd4, 0xc1, 0x4a, 0xc5, 0x4b, 0x67, 0xe8, 0x1c, 0x84, 0x7e, 0x4c, 0x89, 0xa4, 0xc1, 0x55,
	0x22, 0x6b, 0x55, 0xb5, 0x89, 0x91, 0xae, 0xb8, 0x32, 0x91, 0x5b, 0x3c, 0xc8, 0xe4, 0x05, 0x2d,
	0xa7, 0x2b, 0x5a, 0xa6, 0xef, 0x71, 0x16, 0x53, 0x91, 0xc8, 0x8b, 0x5a, 0x4e, 0x57, 0x5c, 0x89,
	0xb7, 0xa6, 0x32, 0x0b, 0x8e, 0xde, 0x80, 0xf3, 0x4d, 0x26, 0x64, 0x0d, 0xd4, 0xcb, 0x2b, 0x4b,
	0x6b, 0x2f, 0x15, 0xfc, 0x0e, 0xec, 0xbc, 0xbd, 0x2a, 0x11, 0xbe, 0x04, 0x17, 0x52, 0x3f, 0x13,
	0xd2, 0x68, 0x73, 0x53, 0x50, 0x99, 0x7a, 0x98, 0xce, 0xd0, 0x32, 0xac, 0x34, 0xd9, 0x36, 0x93,
	0xca, 0xc9, 0x8a, 0xa7, 0x27, 0xf8, 0x16, 0x80, 0xd5, 0x57, 0x63, 0x46, 0xc3, 0x60, 0xc2, 0xf8,
	0x73, 0x10, 0x6e, 0x2a, 0xe5, 0x6a, 0xe6, 0xbf, 0xe1, 0x19, 0x7a, 0x65, 0x43, 0xcb, 0x39, 0xe7,
	0xca, 0x47, 0x9d, 0xcb, 0x1f, 0xd2, 0xfc, 0xb1, 0x87, 0x54, 0x19, 0x3b, 0xa4, 0x65, 0x58, 0x21,
	0x4d, 0x46, 0x84, 0x3a, 0x07, 0xc3, 0xd3, 0x13, 0xbc, 0x91, 0xb2, 0x09, 0x8e, 0x5e, 0x1f, 0xf3,
	0xed, 0x85, 0xa2, 0xbe, 0x69, 0xd0, 0xd4, 0xb2, 0x33, 0xd0, 0x70, 0x7d, 0x9f, 0x72, 0x65, 0xda,
	0x11, 0x76, 0xbc, 0x34, 0x12, 0x05, 0x4f, 0xde, 0xf4, 0xe8, 0x66, 0x4b, 0xd0, 0x63, 0xde, 0x4c,
	0x45, 0xc1, 0xd7, 0x06, 0x06, 0x5c, 0x78, 0x59, 0x6f, 0x86, 0x7e, 0x00, 0xb0, 0xec, 0x06, 0x01,
	0x2a, 0x5c, 0xa5, 0x6e, 0x3f, 0x73, 0xa6, 0x38, 0xc1, 0xf1, 0xc5, 0xb6, 0x7b, 0x1a, 0x1a, 0xc3,
	0x0f, 0xbe, 0x3c, 0xfc, 0xb9, 0xfb, 0xf0, 0xee, 0x5d, 0x74, 0x6a, 0xd0, 0xe9, 0xf6, 0x3f, 0xbd,
	0xd5, 0xff, 0xfe, 0x5e, 0x7f, 0xf7, 0xc6, 0xf5, 0x3f, 0x1e, 0x7e, 0x31, 0xf7, 0x24, 0x3e, 0x35,
	0xba, 0x90, 0x48, 0x10, 0xac, 0x83, 0x0b, 0xe8, 0x5f, 0x00, 0xd1, 0x64, 0xdf, 0xa2, 0x57, 0x8a,
	0xd6, 0x30, 0xf5, 0x52, 0x30, 0x4f, 0x22, 0x8d, 0xe0, 0x78, 0xa3, 0xed, 0x3e, 0x9f, 0x27, 0xb3,
	0x86, 0xb7, 0x7f, 0x3d, 0xbc, 0x77, 0x5b, 0x93, 0x0d, 0xef, 0x74, 0x06, 0x3f, 0x5e, 0xef, 0x7f,
	0xbc, 0xf7, 0xf7, 0x87, 0x7b, 0xfd, 0xce, 0x4f, 0xc3, 0x3b, 0x5d, 0xc5, 0xfa, 0x1c, 0x3e, 0xfb,
	0x88, 0xf5, 0x51, 0x4a, 0x47, 0x50, 0x99, 0xa4, 0x4d, 0xd8, 0xff, 0x01, 0x10, 0x4d, 0xb6, 0x69,
	0x71, 0xf6, 0xa9, 0xd7, 0x9b, 0x79, 0x12, 0x69, 0x04, 0xc7, 0x57, 0xda, 0xee, 0xf9, 0x3c, 0x7b,
	0x6d, 0xf8, 0x79, 0xa7, 0xbf, 0xfb, 0xd5, 0x18, 0xfb, 0x27, 0x5f, 0x0f, 0xbf, 0xdb, 0x53, 0xd4,
	0x16, 0x3e, 0x3d, 0x95, 0x3a, 0xf9, 0xf0, 0x13, 0xe4, 0x5f, 0x00, 0x9c, 0x57, 0x90, 0x97, 0x8a,
	0x56, 0x97, 0x61, 0xcd, 0x16, 0x28, 0x38, 0x5e, 0x6f, 0xbb, 0xcf, 0xe6, 0x41, 0x50, 0x1e, 0x24,
	0x87, 0x80, 0xf0, 0x63, 0x23, 0x84, 0xac, 0xec, 0xdf, 0x01, 0xac, 0xea, 0xb6, 0x44, 0x2f, 0x16,
	0xee, 0x8e, 0xac, 0xd7, 0xcd, 0x59, 0x43, 0x05, 0xc7, 0x97, 0x8f, 0xf6, 0x56, 0xff, 0xe6, 0x67,
	0x83, 0x8f, 0x76, 0xb5, 0xff, 0xaa, 0xec, 0x3a, 0x3e, 0x33, 0xd5, 0x79, 0xa2, 0x72, 0x64, 0x10,
	0xfa, 0xc6, 0x28, 0x0e, 0x31, 0xba, 0x86, 0xcc, 0x59, 0x43, 0xa7, 0x41, 0x0c, 0x6e, 0xb4, 0x0f,
	0xbb, 0xdf, 0xfe, 0x0f, 0x88, 0x58, 0xe5, 0x58, 0x07, 0x17, 0x2e, 0xbf, 0xb5, 0xff, 0x97, 0x55,
	0xda, 0x3f, 0xb0, 0xc0, 0xfd, 0x03, 0x0b, 0xfc, 0x79, 0x60, 0x81, 0x9b, 0x3d, 0xab, 0xf4, 0x4d,
	0xcf, 0x2a, 0xfd, 0xd6, 0xb3, 0xc0, 0x7e, 0xcf, 0x02, 0xf7, 0x7b, 0x56, 0xe9, 0x41, 0xcf, 0x2a,
	0xbd, 0x9d, 0xab, 0xd3, 0x51, 0xc5, 0xad, 0x26, 0x75, 0xa6, 0x43, 0x5d, 0xa7, 0xfa, 0x9f, 0x49,
	0xf7, 0xbb, 0x56, 0x55, 0xbf, 0x21, 0x17, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xae, 0xcc, 0xd3,
	0xba, 0x43, 0x09, 0x00, 0x00,
}

func (m *AddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetApplicationReadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetApplicationReadReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetApplicationReadReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetApplicationReadRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetApplicationReadRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetApplicationReadRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetApplicationListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApplicationListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetApplicationListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Application) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x40
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintContact(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintContact(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uid != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetApplicationListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApplicationListRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetApplicationListRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContact(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintContact(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintContact(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintContact(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FriendUid) > 0 {
		i -= len(m.FriendUid)
		copy(dAtA[i:], m.FriendUid)
		i = encodeVarintContact(dAtA, i, uint64(len(m.FriendUid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContact(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AcceptReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AcceptRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RefuseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefuseReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefuseReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintContact(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RefuseRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefuseRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RefuseRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintContact(dAtA []byte, offset int, v uint64) int {
	offset -= sovContact(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovContact(uint64(m.Uid))
	}
	return n
}

func (m *AddRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetApplicationReadReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetApplicationReadRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetApplicationListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Application) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovContact(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovContact(uint64(m.Uid))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovContact(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovContact(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovContact(uint64(m.UpdatedAt))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovContact(uint64(m.ExpiresAt))
	}
	return n
}

func (m *GetApplicationListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovContact(uint64(l))
		}
	}
	return n
}

func (m *ListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovContact(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovContact(uint64(m.Limit))
	}
	return n
}

func (m *Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovContact(uint64(m.Id))
	}
	l = len(m.FriendUid)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovContact(uint64(m.CreatedAt))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	return n
}

func (m *ListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovContact(uint64(l))
		}
	}
	return n
}

func (m *AcceptReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovContact(uint64(m.Id))
	}
	return n
}

func (m *AcceptRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RefuseReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovContact(uint64(m.Id))
	}
	return n
}

func (m *RefuseRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovContact(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContact(x uint64) (n int) {
	return sovContact(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetApplicationReadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetApplicationReadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetApplicationReadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetApplicationReadRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetApplicationReadRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetApplicationReadRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApplicationListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApplicationListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApplicationListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApplicationListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApplicationListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApplicationListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Application{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Friend{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefuseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefuseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefuseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefuseRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefuseRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefuseRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContact(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContact
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContact
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContact
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContact
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContact        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContact          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContact = fmt.Errorf("proto: unexpected end of group")
)
