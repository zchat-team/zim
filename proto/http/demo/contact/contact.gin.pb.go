// Code generated by protoc-gen-zmicro-gin. DO NOT EDIT.
// versions:
// - protoc-gen-zmicro-gin v0.1.0
// - protoc                v3.19.0
// source: proto/http/demo/contact/contact.proto

package contact

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = errors.New
var _ = context.TODO
var _ = gin.New

type ContactHTTPServer interface {
	Accept(context.Context, *AcceptReq, *AcceptRsp) error
	Add(context.Context, *AddReq, *AddRsp) error
	GetApplicationList(context.Context, *GetApplicationListReq, *GetApplicationListRsp) error
	List(context.Context, *ListReq, *ListRsp) error
	Refuse(context.Context, *RefuseReq, *RefuseRsp) error
	SetApplicationRead(context.Context, *SetApplicationReadReq, *SetApplicationReadRsp) error
	Validate(context.Context, any) error
	ErrorEncoder(c *gin.Context, err error, isBadRequest bool)
}

type UnimplementedContactHTTPServer struct{}

func (*UnimplementedContactHTTPServer) Accept(context.Context, *AcceptReq, *AcceptRsp) error {
	return errors.New("method Accept not implemented")
}
func (*UnimplementedContactHTTPServer) Add(context.Context, *AddReq, *AddRsp) error {
	return errors.New("method Add not implemented")
}
func (*UnimplementedContactHTTPServer) GetApplicationList(context.Context, *GetApplicationListReq, *GetApplicationListRsp) error {
	return errors.New("method GetApplicationList not implemented")
}
func (*UnimplementedContactHTTPServer) List(context.Context, *ListReq, *ListRsp) error {
	return errors.New("method List not implemented")
}
func (*UnimplementedContactHTTPServer) Refuse(context.Context, *RefuseReq, *RefuseRsp) error {
	return errors.New("method Refuse not implemented")
}
func (*UnimplementedContactHTTPServer) SetApplicationRead(context.Context, *SetApplicationReadReq, *SetApplicationReadRsp) error {
	return errors.New("method SetApplicationRead not implemented")
}
func (*UnimplementedContactHTTPServer) Validate(context.Context, any) error { return nil }
func (*UnimplementedContactHTTPServer) ErrorEncoder(c *gin.Context, err error, isBadRequest bool) {
	var code = 500
	if isBadRequest {
		code = 400
	}
	c.String(code, err.Error())
}

func RegisterContactHTTPServer(g *gin.RouterGroup, srv ContactHTTPServer) {
	r := g.Group("")
	r.POST("/contact/add", _Contact_Add0_HTTP_Handler(srv))
	r.POST("/contact/application/setRead", _Contact_SetApplicationRead0_HTTP_Handler(srv))
	r.POST("/contact/application/list", _Contact_GetApplicationList0_HTTP_Handler(srv))
	r.POST("/contact/list", _Contact_List0_HTTP_Handler(srv))
	r.POST("/contact/application/accept", _Contact_Accept0_HTTP_Handler(srv))
	r.POST("/contact/application/refuse", _Contact_Refuse0_HTTP_Handler(srv))
}

func _Contact_Add0_HTTP_Handler(srv ContactHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req AddReq
		var rsp AddRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Add(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Contact_SetApplicationRead0_HTTP_Handler(srv ContactHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req SetApplicationReadReq
		var rsp SetApplicationReadRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.SetApplicationRead(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Contact_GetApplicationList0_HTTP_Handler(srv ContactHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req GetApplicationListReq
		var rsp GetApplicationListRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.GetApplicationList(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Contact_List0_HTTP_Handler(srv ContactHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req ListReq
		var rsp ListRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.List(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Contact_Accept0_HTTP_Handler(srv ContactHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req AcceptReq
		var rsp AcceptRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Accept(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Contact_Refuse0_HTTP_Handler(srv ContactHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req RefuseReq
		var rsp RefuseRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Refuse(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}
