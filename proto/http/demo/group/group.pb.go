// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/http/demo/group/group.proto

package group

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateReq struct {
	Name    string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Members []int64 `protobuf:"varint,2,rep,packed,name=members,proto3" json:"members,omitempty"`
	Avatar  string  `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Notice  string  `protobuf:"bytes,4,opt,name=notice,proto3" json:"notice,omitempty"`
	Intro   string  `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
}

func (m *CreateReq) Reset()         { *m = CreateReq{} }
func (m *CreateReq) String() string { return proto.CompactTextString(m) }
func (*CreateReq) ProtoMessage()    {}
func (*CreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{0}
}
func (m *CreateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReq.Merge(m, src)
}
func (m *CreateReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReq proto.InternalMessageInfo

func (*CreateReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.CreateReq"
}

type CreateRsp struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *CreateRsp) Reset()         { *m = CreateRsp{} }
func (m *CreateRsp) String() string { return proto.CompactTextString(m) }
func (*CreateRsp) ProtoMessage()    {}
func (*CreateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{1}
}
func (m *CreateRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRsp.Merge(m, src)
}
func (m *CreateRsp) XXX_Size() int {
	return m.Size()
}
func (m *CreateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRsp proto.InternalMessageInfo

func (*CreateRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.CreateRsp"
}

type AddReq struct {
	GroupId int64   `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Members []int64 `protobuf:"varint,2,rep,packed,name=members,proto3" json:"members,omitempty"`
}

func (m *AddReq) Reset()         { *m = AddReq{} }
func (m *AddReq) String() string { return proto.CompactTextString(m) }
func (*AddReq) ProtoMessage()    {}
func (*AddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{2}
}
func (m *AddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReq.Merge(m, src)
}
func (m *AddReq) XXX_Size() int {
	return m.Size()
}
func (m *AddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddReq proto.InternalMessageInfo

func (*AddReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.AddReq"
}

type AddRsp struct {
}

func (m *AddRsp) Reset()         { *m = AddRsp{} }
func (m *AddRsp) String() string { return proto.CompactTextString(m) }
func (*AddRsp) ProtoMessage()    {}
func (*AddRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{3}
}
func (m *AddRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRsp.Merge(m, src)
}
func (m *AddRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddRsp proto.InternalMessageInfo

func (*AddRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.AddRsp"
}

type JoinReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *JoinReq) Reset()         { *m = JoinReq{} }
func (m *JoinReq) String() string { return proto.CompactTextString(m) }
func (*JoinReq) ProtoMessage()    {}
func (*JoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{4}
}
func (m *JoinReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinReq.Merge(m, src)
}
func (m *JoinReq) XXX_Size() int {
	return m.Size()
}
func (m *JoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_JoinReq proto.InternalMessageInfo

func (*JoinReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.JoinReq"
}

type JoinRsp struct {
}

func (m *JoinRsp) Reset()         { *m = JoinRsp{} }
func (m *JoinRsp) String() string { return proto.CompactTextString(m) }
func (*JoinRsp) ProtoMessage()    {}
func (*JoinRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{5}
}
func (m *JoinRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRsp.Merge(m, src)
}
func (m *JoinRsp) XXX_Size() int {
	return m.Size()
}
func (m *JoinRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRsp.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRsp proto.InternalMessageInfo

func (*JoinRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.JoinRsp"
}

type QuitReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *QuitReq) Reset()         { *m = QuitReq{} }
func (m *QuitReq) String() string { return proto.CompactTextString(m) }
func (*QuitReq) ProtoMessage()    {}
func (*QuitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{6}
}
func (m *QuitReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuitReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuitReq.Merge(m, src)
}
func (m *QuitReq) XXX_Size() int {
	return m.Size()
}
func (m *QuitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QuitReq.DiscardUnknown(m)
}

var xxx_messageInfo_QuitReq proto.InternalMessageInfo

func (*QuitReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.QuitReq"
}

type QuitRsp struct {
}

func (m *QuitRsp) Reset()         { *m = QuitRsp{} }
func (m *QuitRsp) String() string { return proto.CompactTextString(m) }
func (*QuitRsp) ProtoMessage()    {}
func (*QuitRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{7}
}
func (m *QuitRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuitRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuitRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuitRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuitRsp.Merge(m, src)
}
func (m *QuitRsp) XXX_Size() int {
	return m.Size()
}
func (m *QuitRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QuitRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QuitRsp proto.InternalMessageInfo

func (*QuitRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.QuitRsp"
}

type KickReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *KickReq) Reset()         { *m = KickReq{} }
func (m *KickReq) String() string { return proto.CompactTextString(m) }
func (*KickReq) ProtoMessage()    {}
func (*KickReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{8}
}
func (m *KickReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickReq.Merge(m, src)
}
func (m *KickReq) XXX_Size() int {
	return m.Size()
}
func (m *KickReq) XXX_DiscardUnknown() {
	xxx_messageInfo_KickReq.DiscardUnknown(m)
}

var xxx_messageInfo_KickReq proto.InternalMessageInfo

func (*KickReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.KickReq"
}

type KickRsp struct {
}

func (m *KickRsp) Reset()         { *m = KickRsp{} }
func (m *KickRsp) String() string { return proto.CompactTextString(m) }
func (*KickRsp) ProtoMessage()    {}
func (*KickRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{9}
}
func (m *KickRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickRsp.Merge(m, src)
}
func (m *KickRsp) XXX_Size() int {
	return m.Size()
}
func (m *KickRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_KickRsp.DiscardUnknown(m)
}

var xxx_messageInfo_KickRsp proto.InternalMessageInfo

func (*KickRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.KickRsp"
}

type DismissReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *DismissReq) Reset()         { *m = DismissReq{} }
func (m *DismissReq) String() string { return proto.CompactTextString(m) }
func (*DismissReq) ProtoMessage()    {}
func (*DismissReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{10}
}
func (m *DismissReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DismissReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DismissReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DismissReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DismissReq.Merge(m, src)
}
func (m *DismissReq) XXX_Size() int {
	return m.Size()
}
func (m *DismissReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DismissReq.DiscardUnknown(m)
}

var xxx_messageInfo_DismissReq proto.InternalMessageInfo

func (*DismissReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.DismissReq"
}

type DismissRsp struct {
}

func (m *DismissRsp) Reset()         { *m = DismissRsp{} }
func (m *DismissRsp) String() string { return proto.CompactTextString(m) }
func (*DismissRsp) ProtoMessage()    {}
func (*DismissRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{11}
}
func (m *DismissRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DismissRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DismissRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DismissRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DismissRsp.Merge(m, src)
}
func (m *DismissRsp) XXX_Size() int {
	return m.Size()
}
func (m *DismissRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DismissRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DismissRsp proto.InternalMessageInfo

func (*DismissRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.DismissRsp"
}

type TransferReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *TransferReq) Reset()         { *m = TransferReq{} }
func (m *TransferReq) String() string { return proto.CompactTextString(m) }
func (*TransferReq) ProtoMessage()    {}
func (*TransferReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{12}
}
func (m *TransferReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferReq.Merge(m, src)
}
func (m *TransferReq) XXX_Size() int {
	return m.Size()
}
func (m *TransferReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferReq.DiscardUnknown(m)
}

var xxx_messageInfo_TransferReq proto.InternalMessageInfo

func (*TransferReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.TransferReq"
}

type TransferRsp struct {
}

func (m *TransferRsp) Reset()         { *m = TransferRsp{} }
func (m *TransferRsp) String() string { return proto.CompactTextString(m) }
func (*TransferRsp) ProtoMessage()    {}
func (*TransferRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{13}
}
func (m *TransferRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRsp.Merge(m, src)
}
func (m *TransferRsp) XXX_Size() int {
	return m.Size()
}
func (m *TransferRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRsp.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRsp proto.InternalMessageInfo

func (*TransferRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.TransferRsp"
}

type AddManagerReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *AddManagerReq) Reset()         { *m = AddManagerReq{} }
func (m *AddManagerReq) String() string { return proto.CompactTextString(m) }
func (*AddManagerReq) ProtoMessage()    {}
func (*AddManagerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{14}
}
func (m *AddManagerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddManagerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddManagerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddManagerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddManagerReq.Merge(m, src)
}
func (m *AddManagerReq) XXX_Size() int {
	return m.Size()
}
func (m *AddManagerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddManagerReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddManagerReq proto.InternalMessageInfo

func (*AddManagerReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.AddManagerReq"
}

type AddManagerRsp struct {
}

func (m *AddManagerRsp) Reset()         { *m = AddManagerRsp{} }
func (m *AddManagerRsp) String() string { return proto.CompactTextString(m) }
func (*AddManagerRsp) ProtoMessage()    {}
func (*AddManagerRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{15}
}
func (m *AddManagerRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddManagerRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddManagerRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddManagerRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddManagerRsp.Merge(m, src)
}
func (m *AddManagerRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddManagerRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddManagerRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddManagerRsp proto.InternalMessageInfo

func (*AddManagerRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.AddManagerRsp"
}

type RemoveManagerReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *RemoveManagerReq) Reset()         { *m = RemoveManagerReq{} }
func (m *RemoveManagerReq) String() string { return proto.CompactTextString(m) }
func (*RemoveManagerReq) ProtoMessage()    {}
func (*RemoveManagerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{16}
}
func (m *RemoveManagerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveManagerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveManagerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveManagerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveManagerReq.Merge(m, src)
}
func (m *RemoveManagerReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveManagerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveManagerReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveManagerReq proto.InternalMessageInfo

func (*RemoveManagerReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.RemoveManagerReq"
}

type RemoveManagerRsp struct {
}

func (m *RemoveManagerRsp) Reset()         { *m = RemoveManagerRsp{} }
func (m *RemoveManagerRsp) String() string { return proto.CompactTextString(m) }
func (*RemoveManagerRsp) ProtoMessage()    {}
func (*RemoveManagerRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{17}
}
func (m *RemoveManagerRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveManagerRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveManagerRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveManagerRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveManagerRsp.Merge(m, src)
}
func (m *RemoveManagerRsp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveManagerRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveManagerRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveManagerRsp proto.InternalMessageInfo

func (*RemoveManagerRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.RemoveManagerRsp"
}

type RenameReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *RenameReq) Reset()         { *m = RenameReq{} }
func (m *RenameReq) String() string { return proto.CompactTextString(m) }
func (*RenameReq) ProtoMessage()    {}
func (*RenameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{18}
}
func (m *RenameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenameReq.Merge(m, src)
}
func (m *RenameReq) XXX_Size() int {
	return m.Size()
}
func (m *RenameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RenameReq.DiscardUnknown(m)
}

var xxx_messageInfo_RenameReq proto.InternalMessageInfo

func (*RenameReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.RenameReq"
}

type RenameRsp struct {
}

func (m *RenameRsp) Reset()         { *m = RenameRsp{} }
func (m *RenameRsp) String() string { return proto.CompactTextString(m) }
func (*RenameRsp) ProtoMessage()    {}
func (*RenameRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{19}
}
func (m *RenameRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenameRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenameRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenameRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenameRsp.Merge(m, src)
}
func (m *RenameRsp) XXX_Size() int {
	return m.Size()
}
func (m *RenameRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RenameRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RenameRsp proto.InternalMessageInfo

func (*RenameRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.RenameRsp"
}

type SetAvatarReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *SetAvatarReq) Reset()         { *m = SetAvatarReq{} }
func (m *SetAvatarReq) String() string { return proto.CompactTextString(m) }
func (*SetAvatarReq) ProtoMessage()    {}
func (*SetAvatarReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{20}
}
func (m *SetAvatarReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetAvatarReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetAvatarReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetAvatarReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetAvatarReq.Merge(m, src)
}
func (m *SetAvatarReq) XXX_Size() int {
	return m.Size()
}
func (m *SetAvatarReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetAvatarReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetAvatarReq proto.InternalMessageInfo

func (*SetAvatarReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.SetAvatarReq"
}

type SetAvatarRsp struct {
}

func (m *SetAvatarRsp) Reset()         { *m = SetAvatarRsp{} }
func (m *SetAvatarRsp) String() string { return proto.CompactTextString(m) }
func (*SetAvatarRsp) ProtoMessage()    {}
func (*SetAvatarRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{21}
}
func (m *SetAvatarRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetAvatarRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetAvatarRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetAvatarRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetAvatarRsp.Merge(m, src)
}
func (m *SetAvatarRsp) XXX_Size() int {
	return m.Size()
}
func (m *SetAvatarRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetAvatarRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SetAvatarRsp proto.InternalMessageInfo

func (*SetAvatarRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.SetAvatarRsp"
}

type SetDisplayNameReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *SetDisplayNameReq) Reset()         { *m = SetDisplayNameReq{} }
func (m *SetDisplayNameReq) String() string { return proto.CompactTextString(m) }
func (*SetDisplayNameReq) ProtoMessage()    {}
func (*SetDisplayNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{22}
}
func (m *SetDisplayNameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDisplayNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDisplayNameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDisplayNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDisplayNameReq.Merge(m, src)
}
func (m *SetDisplayNameReq) XXX_Size() int {
	return m.Size()
}
func (m *SetDisplayNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDisplayNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetDisplayNameReq proto.InternalMessageInfo

func (*SetDisplayNameReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.SetDisplayNameReq"
}

type SetDisplayNameRsp struct {
}

func (m *SetDisplayNameRsp) Reset()         { *m = SetDisplayNameRsp{} }
func (m *SetDisplayNameRsp) String() string { return proto.CompactTextString(m) }
func (*SetDisplayNameRsp) ProtoMessage()    {}
func (*SetDisplayNameRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{23}
}
func (m *SetDisplayNameRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDisplayNameRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDisplayNameRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDisplayNameRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDisplayNameRsp.Merge(m, src)
}
func (m *SetDisplayNameRsp) XXX_Size() int {
	return m.Size()
}
func (m *SetDisplayNameRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDisplayNameRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SetDisplayNameRsp proto.InternalMessageInfo

func (*SetDisplayNameRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.SetDisplayNameRsp"
}

type MemberListReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Offset  int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *MemberListReq) Reset()         { *m = MemberListReq{} }
func (m *MemberListReq) String() string { return proto.CompactTextString(m) }
func (*MemberListReq) ProtoMessage()    {}
func (*MemberListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{24}
}
func (m *MemberListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberListReq.Merge(m, src)
}
func (m *MemberListReq) XXX_Size() int {
	return m.Size()
}
func (m *MemberListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberListReq.DiscardUnknown(m)
}

var xxx_messageInfo_MemberListReq proto.InternalMessageInfo

func (*MemberListReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.MemberListReq"
}

type Member struct {
	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{25}
}
func (m *Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return m.Size()
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (*Member) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.Member"
}

type MemberListRsp struct {
	List []*Member `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *MemberListRsp) Reset()         { *m = MemberListRsp{} }
func (m *MemberListRsp) String() string { return proto.CompactTextString(m) }
func (*MemberListRsp) ProtoMessage()    {}
func (*MemberListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{26}
}
func (m *MemberListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberListRsp.Merge(m, src)
}
func (m *MemberListRsp) XXX_Size() int {
	return m.Size()
}
func (m *MemberListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_MemberListRsp proto.InternalMessageInfo

func (*MemberListRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.MemberListRsp"
}

type InfoReq struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *InfoReq) Reset()         { *m = InfoReq{} }
func (m *InfoReq) String() string { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()    {}
func (*InfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{27}
}
func (m *InfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReq.Merge(m, src)
}
func (m *InfoReq) XXX_Size() int {
	return m.Size()
}
func (m *InfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReq proto.InternalMessageInfo

func (*InfoReq) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.InfoReq"
}

type InfoRsp struct {
	GroupId int64  `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar  string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Notice  string `protobuf:"bytes,4,opt,name=notice,proto3" json:"notice,omitempty"`
	Intro   string `protobuf:"bytes,5,opt,name=intro,proto3" json:"intro,omitempty"`
}

func (m *InfoRsp) Reset()         { *m = InfoRsp{} }
func (m *InfoRsp) String() string { return proto.CompactTextString(m) }
func (*InfoRsp) ProtoMessage()    {}
func (*InfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_02d95666ec812a4d, []int{28}
}
func (m *InfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRsp.Merge(m, src)
}
func (m *InfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *InfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRsp proto.InternalMessageInfo

func (*InfoRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zchat.server.api.group.InfoRsp"
}
func init() {
	proto.RegisterType((*CreateReq)(nil), "github.com.zchat.team.zchat.server.api.group.CreateReq")
	proto.RegisterType((*CreateRsp)(nil), "github.com.zchat.team.zchat.server.api.group.CreateRsp")
	proto.RegisterType((*AddReq)(nil), "github.com.zchat.team.zchat.server.api.group.AddReq")
	proto.RegisterType((*AddRsp)(nil), "github.com.zchat.team.zchat.server.api.group.AddRsp")
	proto.RegisterType((*JoinReq)(nil), "github.com.zchat.team.zchat.server.api.group.JoinReq")
	proto.RegisterType((*JoinRsp)(nil), "github.com.zchat.team.zchat.server.api.group.JoinRsp")
	proto.RegisterType((*QuitReq)(nil), "github.com.zchat.team.zchat.server.api.group.QuitReq")
	proto.RegisterType((*QuitRsp)(nil), "github.com.zchat.team.zchat.server.api.group.QuitRsp")
	proto.RegisterType((*KickReq)(nil), "github.com.zchat.team.zchat.server.api.group.KickReq")
	proto.RegisterType((*KickRsp)(nil), "github.com.zchat.team.zchat.server.api.group.KickRsp")
	proto.RegisterType((*DismissReq)(nil), "github.com.zchat.team.zchat.server.api.group.DismissReq")
	proto.RegisterType((*DismissRsp)(nil), "github.com.zchat.team.zchat.server.api.group.DismissRsp")
	proto.RegisterType((*TransferReq)(nil), "github.com.zchat.team.zchat.server.api.group.TransferReq")
	proto.RegisterType((*TransferRsp)(nil), "github.com.zchat.team.zchat.server.api.group.TransferRsp")
	proto.RegisterType((*AddManagerReq)(nil), "github.com.zchat.team.zchat.server.api.group.AddManagerReq")
	proto.RegisterType((*AddManagerRsp)(nil), "github.com.zchat.team.zchat.server.api.group.AddManagerRsp")
	proto.RegisterType((*RemoveManagerReq)(nil), "github.com.zchat.team.zchat.server.api.group.RemoveManagerReq")
	proto.RegisterType((*RemoveManagerRsp)(nil), "github.com.zchat.team.zchat.server.api.group.RemoveManagerRsp")
	proto.RegisterType((*RenameReq)(nil), "github.com.zchat.team.zchat.server.api.group.RenameReq")
	proto.RegisterType((*RenameRsp)(nil), "github.com.zchat.team.zchat.server.api.group.RenameRsp")
	proto.RegisterType((*SetAvatarReq)(nil), "github.com.zchat.team.zchat.server.api.group.SetAvatarReq")
	proto.RegisterType((*SetAvatarRsp)(nil), "github.com.zchat.team.zchat.server.api.group.SetAvatarRsp")
	proto.RegisterType((*SetDisplayNameReq)(nil), "github.com.zchat.team.zchat.server.api.group.SetDisplayNameReq")
	proto.RegisterType((*SetDisplayNameRsp)(nil), "github.com.zchat.team.zchat.server.api.group.SetDisplayNameRsp")
	proto.RegisterType((*MemberListReq)(nil), "github.com.zchat.team.zchat.server.api.group.MemberListReq")
	proto.RegisterType((*Member)(nil), "github.com.zchat.team.zchat.server.api.group.Member")
	proto.RegisterType((*MemberListRsp)(nil), "github.com.zchat.team.zchat.server.api.group.MemberListRsp")
	proto.RegisterType((*InfoReq)(nil), "github.com.zchat.team.zchat.server.api.group.InfoReq")
	proto.RegisterType((*InfoRsp)(nil), "github.com.zchat.team.zchat.server.api.group.InfoRsp")
}

func init() { proto.RegisterFile("proto/http/demo/group/group.proto", fileDescriptor_02d95666ec812a4d) }

var fileDescriptor_02d95666ec812a4d = []byte{
	// 1205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xef, 0x4f, 0x1c, 0x45,
	0x18, 0xc7, 0x99, 0x3b, 0x38, 0x60, 0x28, 0xd0, 0x4e, 0x81, 0x1c, 0x9b, 0xe6, 0xc4, 0x89, 0x51,
	0x24, 0xe5, 0x2e, 0xd2, 0x1a, 0x2b, 0xd5, 0x9a, 0xd3, 0x26, 0x5a, 0x6d, 0x4d, 0xbc, 0x1a, 0xa3,
	0xbe, 0x31, 0xcb, 0xed, 0x72, 0x8c, 0x70, 0xbb, 0xd3, 0x9d, 0x85, 0x44, 0x5f, 0x68, 0xfd, 0x09,
	0x92, 0xd4, 0x52, 0x8c, 0x5a, 0xe3, 0x1b, 0xb0, 0xd7, 0xa8, 0x89, 0xa2, 0x26, 0x9a, 0x26, 0x25,
	0xd0, 0xbe, 0x32, 0xbc, 0xf0, 0x05, 0x89, 0x6f, 0x7c, 0xa9, 0x5c, 0x97, 0x83, 0xff, 0xc2, 0xcc,
	0xcc, 0xde, 0xde, 0x2e, 0x3f, 0x7a, 0xee, 0xd6, 0x37, 0xb0, 0xcf, 0xde, 0xf3, 0x9d, 0xf9, 0x3c,
	0xbb, 0xf3, 0xfc, 0x58, 0x78, 0x3f, 0xb5, 0x4c, 0xdb, 0xcc, 0x8c, 0xd9, 0x36, 0xcd, 0x68, 0x7a,
	0xd1, 0xcc, 0x14, 0x2c, 0x73, 0x92, 0xca, 0xbf, 0x69, 0xf1, 0x1b, 0x3a, 0x5a, 0x20, 0xf6, 0xd8,
	0xe4, 0x48, 0x3a, 0x6f, 0x16, 0xd3, 0x6f, 0xe7, 0xc7, 0x54, 0x3b, 0x6d, 0xeb, 0x6a, 0xf5, 0x92,
	0xe9, 0xd6, 0x94, 0x6e, 0xa5, 0x55, 0x4a, 0xd2, 0x42, 0xa3, 0x1c, 0x29, 0x98, 0x66, 0x61, 0x42,
	0xcf, 0xa8, 0x94, 0x64, 0x54, 0xc3, 0x30, 0x6d, 0xd5, 0x26, 0xa6, 0xc1, 0xe4, 0x5a, 0x4a, 0x57,
	0xc1, 0x2c, 0x98, 0x72, 0x4b, 0x7e, 0xe5, 0xde, 0x95, 0xff, 0xf2, 0x83, 0x05, 0xdd, 0x18, 0x34,
	0xa9, 0x6e, 0xa8, 0x94, 0x4c, 0x0d, 0x65, 0x4c, 0x2a, 0x94, 0xbb, 0x57, 0xc1, 0xef, 0xc2, 0xd6,
	0x67, 0x2c, 0x5d, 0xb5, 0xf5, 0x9c, 0x7e, 0x01, 0x21, 0xd8, 0x68, 0xa8, 0x45, 0x3d, 0x09, 0xfa,
	0x40, 0x7f, 0x6b, 0x4e, 0x5c, 0xa3, 0x24, 0x6c, 0x2e, 0xea, 0xc5, 0x11, 0xdd, 0x62, 0xc9, 0x58,
	0x5f, 0xbc, 0x3f, 0x9e, 0xab, 0x9a, 0xa8, 0x07, 0x26, 0xd4, 0x29, 0xd5, 0x56, 0xad, 0x64, 0x5c,
	0xf8, 0xbb, 0x16, 0xbf, 0x6f, 0x98, 0x36, 0xc9, 0xeb, 0xc9, 0x46, 0x79, 0x5f, 0x5a, 0xa8, 0x0b,
	0x36, 0x11, 0xc3, 0xb6, 0xcc, 0x64, 0x93, 0xb8, 0x2d, 0x0d, 0xfc, 0xa0, 0x07, 0xc0, 0x28, 0xea,
	0x85, 0x2d, 0x22, 0xf4, 0x37, 0x88, 0x26, 0x20, 0xe2, 0xb9, 0x66, 0x61, 0x9f, 0xd1, 0xf0, 0x93,
	0x30, 0x91, 0xd5, 0x34, 0x4e, 0xb9, 0xbf, 0xd3, 0xfe, 0xb0, 0xb8, 0x45, 0xca, 0x19, 0xc5, 0x0f,
	0xc0, 0xe6, 0xe7, 0x4d, 0x62, 0xdc, 0x7d, 0x25, 0xdc, 0xea, 0x7a, 0x49, 0xc1, 0x4b, 0x93, 0xc4,
	0xae, 0x2f, 0x10, 0x5e, 0x52, 0xf0, 0x02, 0xc9, 0x8f, 0xd7, 0x17, 0x08, 0x2f, 0x46, 0xf1, 0x43,
	0x10, 0x9e, 0x26, 0xac, 0x48, 0x18, 0xab, 0xa3, 0x39, 0x50, 0x73, 0x64, 0x14, 0xf7, 0xc3, 0xb6,
	0x97, 0x2d, 0xd5, 0x60, 0xa3, 0xba, 0x55, 0x47, 0xd7, 0xee, 0xf3, 0x64, 0x14, 0x0f, 0xc0, 0xf6,
	0xac, 0xa6, 0x9d, 0x53, 0x0d, 0xb5, 0x50, 0x57, 0xda, 0x19, 0xf0, 0x65, 0x14, 0x0f, 0xc2, 0x83,
	0x39, 0xbd, 0x68, 0x4e, 0xe9, 0xff, 0x4d, 0x8f, 0x76, 0xba, 0x33, 0xca, 0xdf, 0x79, 0x4e, 0xe7,
	0xa7, 0xab, 0x8e, 0xb6, 0xcd, 0xf3, 0x63, 0x14, 0x3f, 0x0c, 0x0f, 0x9c, 0xd7, 0xed, 0xac, 0x38,
	0x63, 0x75, 0x74, 0x1d, 0x7e, 0x57, 0x46, 0x71, 0x1a, 0x1e, 0x3a, 0xaf, 0xdb, 0xa7, 0x09, 0xa3,
	0x13, 0xea, 0x5b, 0x2f, 0xd6, 0xdf, 0xf7, 0xf0, 0x2e, 0x7f, 0x46, 0xf1, 0xab, 0xb0, 0xfd, 0x9c,
	0x38, 0x4c, 0x67, 0x09, 0xab, 0x73, 0x18, 0x78, 0x0a, 0x98, 0xa3, 0xa3, 0x4c, 0xb7, 0x93, 0x31,
	0xf1, 0x83, 0x6b, 0xf1, 0x14, 0x98, 0x20, 0x45, 0x62, 0x8b, 0x8c, 0x69, 0xca, 0x49, 0x03, 0x9f,
	0x85, 0x09, 0xb9, 0x32, 0xea, 0x80, 0x31, 0x6f, 0xb1, 0x18, 0xd1, 0x90, 0x02, 0x5b, 0x0c, 0x92,
	0x1f, 0x17, 0x49, 0x19, 0x13, 0x59, 0xe3, 0xd9, 0xfb, 0xa5, 0x1f, 0x7e, 0x2d, 0xc0, 0xc9, 0x28,
	0x7a, 0x0e, 0x36, 0x4e, 0x10, 0x66, 0x27, 0x41, 0x5f, 0xbc, 0xbf, 0x6d, 0xe8, 0x78, 0x3a, 0x4c,
	0x0d, 0x4a, 0xcb, 0xa5, 0x72, 0x62, 0x05, 0x7e, 0xb0, 0xcf, 0x18, 0xa3, 0x66, 0x9d, 0xa7, 0xf7,
	0x8e, 0xeb, 0x75, 0xd7, 0x7c, 0xf6, 0x6a, 0x4d, 0xcc, 0x57, 0x6b, 0xfe, 0x97, 0x8a, 0x32, 0x34,
	0xdb, 0x05, 0x9b, 0x9e, 0xe5, 0xbb, 0xa0, 0x1f, 0x01, 0x4c, 0xc8, 0xe2, 0x82, 0x1e, 0x0b, 0x17,
	0xb6, 0x57, 0x13, 0x95, 0x68, 0x42, 0x46, 0xf1, 0x23, 0xf3, 0xd9, 0x1e, 0x98, 0xa8, 0xac, 0x96,
	0x2a, 0xcb, 0x1f, 0xa2, 0x03, 0xce, 0xcc, 0xd7, 0xce, 0xf2, 0x4d, 0x69, 0xbd, 0xff, 0xe7, 0x9d,
	0xcf, 0x62, 0x08, 0xb7, 0xbb, 0x0d, 0x22, 0x2f, 0x24, 0xc3, 0x60, 0x00, 0x95, 0x00, 0x8c, 0x67,
	0x35, 0x0d, 0x85, 0x7c, 0x47, 0xb2, 0x2e, 0x2a, 0x11, 0x54, 0x12, 0xb3, 0xd7, 0xc3, 0xec, 0xdc,
	0xbc, 0xb1, 0xec, 0xcc, 0x2e, 0x54, 0x56, 0x4b, 0x9b, 0x33, 0x73, 0xce, 0x95, 0xab, 0x82, 0xb4,
	0x13, 0x43, 0x97, 0x54, 0xd5, 0x34, 0x8e, 0x79, 0x1d, 0xc0, 0x46, 0x5e, 0x1c, 0xd1, 0xa3, 0xe1,
	0x76, 0x74, 0xcb, 0xae, 0x12, 0x45, 0xc6, 0x28, 0xce, 0x04, 0x1f, 0xe8, 0xec, 0x82, 0xf3, 0xd1,
	0x75, 0xdf, 0x03, 0x3d, 0x88, 0xdb, 0x5c, 0xcc, 0x37, 0x4d, 0x62, 0x54, 0x39, 0x79, 0x4d, 0x0e,
	0xcb, 0xe9, 0x56, 0x7b, 0x25, 0x8a, 0x6c, 0x17, 0xe7, 0xf6, 0xc5, 0x8b, 0xce, 0xf4, 0xcd, 0x3d,
	0x39, 0x2f, 0x4c, 0x12, 0xbb, 0xca, 0xc9, 0x5b, 0x41, 0x58, 0x4e, 0xb7, 0xc9, 0x28, 0x51, 0x64,
	0x61, 0x38, 0xc7, 0x49, 0x7e, 0x9c, 0x73, 0xfe, 0x02, 0x60, 0xb3, 0xdb, 0x7e, 0xd0, 0x89, 0x70,
	0x7b, 0xd6, 0xda, 0x9b, 0x12, 0x51, 0xc9, 0x28, 0x1e, 0x0a, 0x00, 0x6f, 0x7d, 0x7b, 0x6d, 0xf3,
	0xf3, 0x6b, 0x3e, 0xe0, 0xc3, 0xb8, 0xc3, 0x05, 0xd6, 0xa4, 0x86, 0x33, 0xff, 0x06, 0x60, 0x4b,
	0xb5, 0xf5, 0xa1, 0xc7, 0xc3, 0x6d, 0xed, 0x6b, 0xae, 0x4a, 0x54, 0x29, 0xa3, 0xf8, 0x58, 0x10,
	0x7b, 0xe5, 0x87, 0xad, 0xa5, 0xef, 0x7d, 0xd8, 0x5d, 0xb8, 0xd3, 0xc5, 0xb6, 0x5d, 0x11, 0xe7,
	0xbe, 0x0d, 0x20, 0xac, 0xf5, 0x5d, 0x74, 0x32, 0x74, 0x6e, 0xd7, 0xba, 0xb3, 0x12, 0x5d, 0xcc,
	0x28, 0x3e, 0xb1, 0x57, 0x7d, 0x58, 0x5a, 0xac, 0xcc, 0x7d, 0x5c, 0xad, 0x0f, 0x3d, 0xf8, 0x50,
	0xad, 0x3e, 0xb8, 0x4a, 0x1e, 0xc2, 0x1f, 0x00, 0xb6, 0x07, 0x5a, 0x3f, 0x3a, 0x15, 0x0e, 0x64,
	0xe7, 0x98, 0xa1, 0xdc, 0x93, 0x9e, 0x51, 0x7c, 0x32, 0x10, 0x8b, 0x33, 0xb3, 0xb0, 0xfd, 0x55,
	0x29, 0x18, 0x4b, 0x2f, 0xee, 0x72, 0x63, 0xb1, 0xfc, 0x62, 0x1e, 0xce, 0xcf, 0x00, 0x26, 0xe4,
	0x34, 0x12, 0xb6, 0x99, 0x78, 0xb3, 0x8e, 0x12, 0x4d, 0xc8, 0x28, 0x3e, 0x1e, 0x20, 0xdf, 0x9e,
	0xbe, 0xe4, 0x5c, 0x59, 0x71, 0xe6, 0x2e, 0xed, 0xd9, 0x4f, 0x2c, 0xa1, 0xe2, 0xc8, 0xb7, 0x00,
	0x6c, 0xf5, 0x06, 0x21, 0x34, 0x1c, 0x6e, 0x73, 0xff, 0xb0, 0xa5, 0x44, 0xd6, 0x32, 0x8a, 0x87,
	0xe7, 0xb3, 0x47, 0x3c, 0x76, 0xb4, 0xb5, 0xb4, 0x5a, 0x59, 0x59, 0x92, 0x96, 0x53, 0xfa, 0xd5,
	0xf9, 0xe0, 0xb2, 0xc0, 0xef, 0xc6, 0x07, 0x5d, 0x7c, 0x56, 0xd5, 0xf2, 0x08, 0xd6, 0x01, 0xec,
	0x08, 0x8e, 0x62, 0xe8, 0xa9, 0xd0, 0x28, 0xc1, 0xc1, 0x4f, 0xb9, 0xb7, 0x05, 0x18, 0xc5, 0x4f,
	0x04, 0x5e, 0x86, 0x17, 0x10, 0x7f, 0x1f, 0x9f, 0x4c, 0x8b, 0x68, 0x14, 0xdc, 0x5d, 0x8b, 0xc6,
	0xa7, 0xe6, 0x21, 0xfd, 0x0e, 0x20, 0xac, 0x0d, 0x68, 0x61, 0x33, 0x3b, 0x30, 0x82, 0x2a, 0xd1,
	0xc5, 0x8c, 0xe2, 0x53, 0xf3, 0xd9, 0xfb, 0xbc, 0x30, 0xba, 0xb7, 0x3e, 0xbd, 0xe1, 0x5c, 0xfe,
	0xc2, 0xeb, 0xfc, 0xce, 0xcc, 0x97, 0x5b, 0x8b, 0xdf, 0xed, 0xc8, 0xef, 0xa2, 0xa7, 0xe7, 0x81,
	0x7c, 0x03, 0x60, 0x23, 0x1f, 0xf4, 0xc2, 0xb6, 0x2d, 0x77, 0x84, 0x54, 0xa2, 0xc8, 0x18, 0xc5,
	0x47, 0xe7, 0xb3, 0x87, 0x3d, 0xec, 0xd6, 0xca, 0x6a, 0xe9, 0xce, 0xad, 0xc5, 0xcd, 0xf7, 0x7e,
	0xda, 0xd1, 0xb3, 0x88, 0x31, 0x6a, 0x0e, 0x83, 0x81, 0xa7, 0x5f, 0x59, 0xfb, 0x27, 0xd5, 0xb0,
	0xb6, 0x91, 0x02, 0xeb, 0x1b, 0x29, 0xf0, 0xf7, 0x46, 0x0a, 0xcc, 0x95, 0x53, 0x0d, 0x57, 0xcb,
	0xa9, 0x86, 0xdb, 0xe5, 0x14, 0x58, 0x2b, 0xa7, 0xc0, 0x7a, 0x39, 0xd5, 0xf0, 0x57, 0x39, 0xd5,
	0xf0, 0xba, 0xef, 0xdb, 0x3c, 0x23, 0x10, 0x06, 0x39, 0x8d, 0x7b, 0x29, 0x69, 0xc4, 0x97, 0xb8,
	0x58, 0x7f, 0x24, 0x21, 0x3e, 0x9f, 0x8f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x64, 0xaa,
	0xf4, 0xf5, 0x0f, 0x00, 0x00,
}

func (m *CreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Notice) > 0 {
		i -= len(m.Notice)
		copy(dAtA[i:], m.Notice)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Notice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Members) > 0 {
		dAtA2 := make([]byte, len(m.Members)*10)
		var j1 int
		for _, num1 := range m.Members {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGroup(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		dAtA4 := make([]byte, len(m.Members)*10)
		var j3 int
		for _, num1 := range m.Members {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintGroup(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *JoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JoinRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuitReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuitReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuitRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuitRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuitRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *KickReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KickRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DismissReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DismissReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DismissReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DismissRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DismissRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DismissRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TransferReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransferRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddManagerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddManagerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddManagerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddManagerRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddManagerRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddManagerRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveManagerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveManagerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveManagerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveManagerRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveManagerRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveManagerRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RenameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenameReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenameReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RenameRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenameRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenameRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetAvatarReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAvatarReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetAvatarReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetAvatarRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetAvatarRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetAvatarRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SetDisplayNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDisplayNameReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDisplayNameReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetDisplayNameRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDisplayNameRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDisplayNameRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MemberListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemberListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberListRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberListRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Intro) > 0 {
		i -= len(m.Intro)
		copy(dAtA[i:], m.Intro)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Intro)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Notice) > 0 {
		i -= len(m.Notice)
		copy(dAtA[i:], m.Notice)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Notice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if len(m.Members) > 0 {
		l = 0
		for _, e := range m.Members {
			l += sovGroup(uint64(e))
		}
		n += 1 + sovGroup(uint64(l)) + l
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func (m *CreateRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *AddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	if len(m.Members) > 0 {
		l = 0
		for _, e := range m.Members {
			l += sovGroup(uint64(e))
		}
		n += 1 + sovGroup(uint64(l)) + l
	}
	return n
}

func (m *AddRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *JoinReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *JoinRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuitReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *QuitRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *KickReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *KickRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DismissReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *DismissRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TransferReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *TransferRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddManagerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *AddManagerRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveManagerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *RemoveManagerRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RenameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *RenameRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetAvatarReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *SetAvatarRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SetDisplayNameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *SetDisplayNameRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MemberListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	if m.Offset != 0 {
		n += 1 + sovGroup(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovGroup(uint64(m.Limit))
	}
	return n
}

func (m *Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGroup(uint64(m.Id))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func (m *MemberListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *InfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	return n
}

func (m *InfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Members = append(m.Members, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroup
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGroup
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Members) == 0 {
					m.Members = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Members = append(m.Members, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Members = append(m.Members, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroup
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGroup
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Members) == 0 {
					m.Members = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Members = append(m.Members, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuitRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuitRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuitRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DismissReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DismissReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DismissReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DismissRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DismissRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DismissRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddManagerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddManagerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddManagerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddManagerRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddManagerRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddManagerRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveManagerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveManagerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveManagerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveManagerRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveManagerRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveManagerRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAvatarReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAvatarReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAvatarReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetAvatarRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetAvatarRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetAvatarRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDisplayNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDisplayNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDisplayNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDisplayNameRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDisplayNameRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDisplayNameRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Member{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroup = fmt.Errorf("proto: unexpected end of group")
)
