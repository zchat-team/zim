// Code generated by protoc-gen-zmicro-gin. DO NOT EDIT.
// versions:
// - protoc-gen-zmicro-gin v0.1.0
// - protoc                v3.19.0
// source: proto/http/demo/group/group.proto

package group

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = errors.New
var _ = context.TODO
var _ = gin.New

type GroupHTTPServer interface {
	Add(context.Context, *AddReq, *AddRsp) error
	AddManager(context.Context, *AddManagerReq, *AddManagerRsp) error
	Create(context.Context, *CreateReq, *CreateRsp) error
	Dismiss(context.Context, *DismissReq, *DismissRsp) error
	Info(context.Context, *InfoReq, *InfoRsp) error
	Join(context.Context, *JoinReq, *JoinRsp) error
	Kick(context.Context, *KickReq, *KickRsp) error
	MemberList(context.Context, *MemberListReq, *MemberListRsp) error
	Quit(context.Context, *QuitReq, *QuitRsp) error
	RemoveManager(context.Context, *RemoveManagerReq, *RemoveManagerRsp) error
	Rename(context.Context, *RenameReq, *RenameRsp) error
	SetAvatar(context.Context, *SetAvatarReq, *SetAvatarRsp) error
	SetDisplayName(context.Context, *SetDisplayNameReq, *SetDisplayNameRsp) error
	Transfer(context.Context, *TransferReq, *TransferRsp) error
	Validate(context.Context, any) error
	ErrorEncoder(c *gin.Context, err error, isBadRequest bool)
}

type UnimplementedGroupHTTPServer struct{}

func (*UnimplementedGroupHTTPServer) Add(context.Context, *AddReq, *AddRsp) error {
	return errors.New("method Add not implemented")
}
func (*UnimplementedGroupHTTPServer) AddManager(context.Context, *AddManagerReq, *AddManagerRsp) error {
	return errors.New("method AddManager not implemented")
}
func (*UnimplementedGroupHTTPServer) Create(context.Context, *CreateReq, *CreateRsp) error {
	return errors.New("method Create not implemented")
}
func (*UnimplementedGroupHTTPServer) Dismiss(context.Context, *DismissReq, *DismissRsp) error {
	return errors.New("method Dismiss not implemented")
}
func (*UnimplementedGroupHTTPServer) Info(context.Context, *InfoReq, *InfoRsp) error {
	return errors.New("method Info not implemented")
}
func (*UnimplementedGroupHTTPServer) Join(context.Context, *JoinReq, *JoinRsp) error {
	return errors.New("method Join not implemented")
}
func (*UnimplementedGroupHTTPServer) Kick(context.Context, *KickReq, *KickRsp) error {
	return errors.New("method Kick not implemented")
}
func (*UnimplementedGroupHTTPServer) MemberList(context.Context, *MemberListReq, *MemberListRsp) error {
	return errors.New("method MemberList not implemented")
}
func (*UnimplementedGroupHTTPServer) Quit(context.Context, *QuitReq, *QuitRsp) error {
	return errors.New("method Quit not implemented")
}
func (*UnimplementedGroupHTTPServer) RemoveManager(context.Context, *RemoveManagerReq, *RemoveManagerRsp) error {
	return errors.New("method RemoveManager not implemented")
}
func (*UnimplementedGroupHTTPServer) Rename(context.Context, *RenameReq, *RenameRsp) error {
	return errors.New("method Rename not implemented")
}
func (*UnimplementedGroupHTTPServer) SetAvatar(context.Context, *SetAvatarReq, *SetAvatarRsp) error {
	return errors.New("method SetAvatar not implemented")
}
func (*UnimplementedGroupHTTPServer) SetDisplayName(context.Context, *SetDisplayNameReq, *SetDisplayNameRsp) error {
	return errors.New("method SetDisplayName not implemented")
}
func (*UnimplementedGroupHTTPServer) Transfer(context.Context, *TransferReq, *TransferRsp) error {
	return errors.New("method Transfer not implemented")
}
func (*UnimplementedGroupHTTPServer) Validate(context.Context, any) error { return nil }
func (*UnimplementedGroupHTTPServer) ErrorEncoder(c *gin.Context, err error, isBadRequest bool) {
	var code = 500
	if isBadRequest {
		code = 400
	}
	c.String(code, err.Error())
}

func RegisterGroupHTTPServer(g *gin.RouterGroup, srv GroupHTTPServer) {
	r := g.Group("")
	r.POST("/group/create", _Group_Create0_HTTP_Handler(srv))
	r.POST("/group/add", _Group_Add0_HTTP_Handler(srv))
	r.POST("/group/join", _Group_Join0_HTTP_Handler(srv))
	r.POST("/group/quit", _Group_Quit0_HTTP_Handler(srv))
	r.POST("/group/kick", _Group_Kick0_HTTP_Handler(srv))
	r.POST("/group/dismiss", _Group_Dismiss0_HTTP_Handler(srv))
	r.POST("/group/transfer", _Group_Transfer0_HTTP_Handler(srv))
	r.POST("/group/addManager", _Group_AddManager0_HTTP_Handler(srv))
	r.POST("/group/removeManager", _Group_RemoveManager0_HTTP_Handler(srv))
	r.POST("/group/rename", _Group_Rename0_HTTP_Handler(srv))
	r.POST("/group/setAvatar", _Group_SetAvatar0_HTTP_Handler(srv))
	r.POST("/group/setDisplayName", _Group_SetDisplayName0_HTTP_Handler(srv))
	r.POST("/group/memberList", _Group_MemberList0_HTTP_Handler(srv))
	r.POST("/group/info", _Group_Info0_HTTP_Handler(srv))
}

func _Group_Create0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req CreateReq
		var rsp CreateRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Create(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_Add0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req AddReq
		var rsp AddRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Add(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_Join0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req JoinReq
		var rsp JoinRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Join(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_Quit0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req QuitReq
		var rsp QuitRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Quit(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_Kick0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req KickReq
		var rsp KickRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Kick(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_Dismiss0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req DismissReq
		var rsp DismissRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Dismiss(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_Transfer0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req TransferReq
		var rsp TransferRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Transfer(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_AddManager0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req AddManagerReq
		var rsp AddManagerRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.AddManager(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_RemoveManager0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req RemoveManagerReq
		var rsp RemoveManagerRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.RemoveManager(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_Rename0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req RenameReq
		var rsp RenameRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Rename(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_SetAvatar0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req SetAvatarReq
		var rsp SetAvatarRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.SetAvatar(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_SetDisplayName0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req SetDisplayNameReq
		var rsp SetDisplayNameRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.SetDisplayName(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_MemberList0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req MemberListReq
		var rsp MemberListRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.MemberList(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Group_Info0_HTTP_Handler(srv GroupHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req InfoReq
		var rsp InfoRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Info(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}
