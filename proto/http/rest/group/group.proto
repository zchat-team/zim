syntax = "proto3";

option go_package = "github.com/zchat-team/zim/proto/http/rest/group";
package github.com.zchat.team.zim.proto.http.rest.group;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/field_behavior.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_getters_all) = false;

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

service Group {
  rpc Create(CreateReq) returns (CreateRsp) {
    option (google.api.http) = {
      post: "/zim/groups",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "创建群";
      tags: "群组";
    };
  }
  rpc Add(AddReq) returns (AddRsp) {
    option (google.api.http) = {
      post: "/zim/groups/{group_id}/members",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "添加成员";
      tags: "群组";
    };
  }
}

message CreateReq {
  // 群主
  string owner = 1 [ (google.api.field_behavior) = REQUIRED ];
  // 成员
  repeated string members = 2 [ (google.api.field_behavior) = REQUIRED ];
  // 群名称
  string name = 3;
  // 群ID，如果不传，zim会生成一个群ID
  string group_id = 4;
  string notice = 5;
  string intro = 6;
  string avatar = 7;
}

message CreateRsp {
  // 群ID
  string group_id = 1;
  // 其他字段
}

message AddReq {
  string group_id = 1 [ (google.api.field_behavior) = REQUIRED ];
  repeated string members = 2 [ (google.api.field_behavior) = REQUIRED ];
}

message AddRsp {

}