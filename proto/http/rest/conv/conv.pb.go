// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/http/rest/conv/conv.proto

package conv

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateReq struct {
	// 成员
	Members []string `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	// 会话名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 属性
	Attrs map[string]string `protobuf:"bytes,3,rep,name=attrs,proto3" json:"attrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 唯一性标识
	Unique bool `protobuf:"varint,4,opt,name=unique,proto3" json:"unique,omitempty"`
	// 会话类型，私聊，群聊，聊天室，临时会话（如客服），系统会话（智能机器人、公从号、服务号）
	Type int `protobuf:"varint,5,opt,name=type,proto3,casttype=int" json:"type,omitempty" binding:"required"`
}

func (m *CreateReq) Reset()         { *m = CreateReq{} }
func (m *CreateReq) String() string { return proto.CompactTextString(m) }
func (*CreateReq) ProtoMessage()    {}
func (*CreateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{0}
}
func (m *CreateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReq.Merge(m, src)
}
func (m *CreateReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReq proto.InternalMessageInfo

func (*CreateReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.CreateReq"
}

type CreateRsp struct {
	// 会话ID
	ConvId int64 `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
}

func (m *CreateRsp) Reset()         { *m = CreateRsp{} }
func (m *CreateRsp) String() string { return proto.CompactTextString(m) }
func (*CreateRsp) ProtoMessage()    {}
func (*CreateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{1}
}
func (m *CreateRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRsp.Merge(m, src)
}
func (m *CreateRsp) XXX_Size() int {
	return m.Size()
}
func (m *CreateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRsp proto.InternalMessageInfo

func (*CreateRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.CreateRsp"
}

type QueryReq struct {
}

func (m *QueryReq) Reset()         { *m = QueryReq{} }
func (m *QueryReq) String() string { return proto.CompactTextString(m) }
func (*QueryReq) ProtoMessage()    {}
func (*QueryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{2}
}
func (m *QueryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReq.Merge(m, src)
}
func (m *QueryReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReq proto.InternalMessageInfo

func (*QueryReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.QueryReq"
}

type QueryRsp struct {
}

func (m *QueryRsp) Reset()         { *m = QueryRsp{} }
func (m *QueryRsp) String() string { return proto.CompactTextString(m) }
func (*QueryRsp) ProtoMessage()    {}
func (*QueryRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{3}
}
func (m *QueryRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRsp.Merge(m, src)
}
func (m *QueryRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRsp proto.InternalMessageInfo

func (*QueryRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.QueryRsp"
}

type UpdateReq struct {
	// 会话ID
	ConvId int64 `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	// 其他字段
	Other string `protobuf:"bytes,2,opt,name=other,proto3" json:"other,omitempty"`
}

func (m *UpdateReq) Reset()         { *m = UpdateReq{} }
func (m *UpdateReq) String() string { return proto.CompactTextString(m) }
func (*UpdateReq) ProtoMessage()    {}
func (*UpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{4}
}
func (m *UpdateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReq.Merge(m, src)
}
func (m *UpdateReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReq proto.InternalMessageInfo

func (*UpdateReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.UpdateReq"
}

type UpdateRsp struct {
}

func (m *UpdateRsp) Reset()         { *m = UpdateRsp{} }
func (m *UpdateRsp) String() string { return proto.CompactTextString(m) }
func (*UpdateRsp) ProtoMessage()    {}
func (*UpdateRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{5}
}
func (m *UpdateRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRsp.Merge(m, src)
}
func (m *UpdateRsp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRsp proto.InternalMessageInfo

func (*UpdateRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.UpdateRsp"
}

type DeleteReq struct {
	// 会话ID
	ConvId int64 `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
}

func (m *DeleteReq) Reset()         { *m = DeleteReq{} }
func (m *DeleteReq) String() string { return proto.CompactTextString(m) }
func (*DeleteReq) ProtoMessage()    {}
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{6}
}
func (m *DeleteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReq.Merge(m, src)
}
func (m *DeleteReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReq proto.InternalMessageInfo

func (*DeleteReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.DeleteReq"
}

type DeleteRsp struct {
}

func (m *DeleteRsp) Reset()         { *m = DeleteRsp{} }
func (m *DeleteRsp) String() string { return proto.CompactTextString(m) }
func (*DeleteRsp) ProtoMessage()    {}
func (*DeleteRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{7}
}
func (m *DeleteRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRsp.Merge(m, src)
}
func (m *DeleteRsp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRsp proto.InternalMessageInfo

func (*DeleteRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.DeleteRsp"
}

type AddMemberReq struct {
	// 会话ID
	ConvId int64  `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	Other  string `protobuf:"bytes,2,opt,name=other,proto3" json:"other,omitempty"`
}

func (m *AddMemberReq) Reset()         { *m = AddMemberReq{} }
func (m *AddMemberReq) String() string { return proto.CompactTextString(m) }
func (*AddMemberReq) ProtoMessage()    {}
func (*AddMemberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{8}
}
func (m *AddMemberReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMemberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMemberReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMemberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMemberReq.Merge(m, src)
}
func (m *AddMemberReq) XXX_Size() int {
	return m.Size()
}
func (m *AddMemberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMemberReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddMemberReq proto.InternalMessageInfo

func (*AddMemberReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.AddMemberReq"
}

type AddMemberRsp struct {
}

func (m *AddMemberRsp) Reset()         { *m = AddMemberRsp{} }
func (m *AddMemberRsp) String() string { return proto.CompactTextString(m) }
func (*AddMemberRsp) ProtoMessage()    {}
func (*AddMemberRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{9}
}
func (m *AddMemberRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMemberRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMemberRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMemberRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMemberRsp.Merge(m, src)
}
func (m *AddMemberRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddMemberRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMemberRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddMemberRsp proto.InternalMessageInfo

func (*AddMemberRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.AddMemberRsp"
}

type DeleteMemberReq struct {
	// 会话ID
	ConvId    int64    `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	ClientIds []string `protobuf:"bytes,2,rep,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
}

func (m *DeleteMemberReq) Reset()         { *m = DeleteMemberReq{} }
func (m *DeleteMemberReq) String() string { return proto.CompactTextString(m) }
func (*DeleteMemberReq) ProtoMessage()    {}
func (*DeleteMemberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{10}
}
func (m *DeleteMemberReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMemberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMemberReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMemberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMemberReq.Merge(m, src)
}
func (m *DeleteMemberReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMemberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMemberReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMemberReq proto.InternalMessageInfo

func (*DeleteMemberReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMemberReq"
}

type DeleteMemberRsp struct {
}

func (m *DeleteMemberRsp) Reset()         { *m = DeleteMemberRsp{} }
func (m *DeleteMemberRsp) String() string { return proto.CompactTextString(m) }
func (*DeleteMemberRsp) ProtoMessage()    {}
func (*DeleteMemberRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{11}
}
func (m *DeleteMemberRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMemberRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMemberRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMemberRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMemberRsp.Merge(m, src)
}
func (m *DeleteMemberRsp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMemberRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMemberRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMemberRsp proto.InternalMessageInfo

func (*DeleteMemberRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMemberRsp"
}

type QueryMemberReq struct {
	// 会话ID
	ConvId int64 `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
}

func (m *QueryMemberReq) Reset()         { *m = QueryMemberReq{} }
func (m *QueryMemberReq) String() string { return proto.CompactTextString(m) }
func (*QueryMemberReq) ProtoMessage()    {}
func (*QueryMemberReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{12}
}
func (m *QueryMemberReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMemberReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMemberReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMemberReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMemberReq.Merge(m, src)
}
func (m *QueryMemberReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryMemberReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMemberReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMemberReq proto.InternalMessageInfo

func (*QueryMemberReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.QueryMemberReq"
}

type QueryMemberRsp struct {
}

func (m *QueryMemberRsp) Reset()         { *m = QueryMemberRsp{} }
func (m *QueryMemberRsp) String() string { return proto.CompactTextString(m) }
func (*QueryMemberRsp) ProtoMessage()    {}
func (*QueryMemberRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{13}
}
func (m *QueryMemberRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMemberRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMemberRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMemberRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMemberRsp.Merge(m, src)
}
func (m *QueryMemberRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryMemberRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMemberRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMemberRsp proto.InternalMessageInfo

func (*QueryMemberRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.QueryMemberRsp"
}

type AddMuteClientReq struct {
	// 会话ID
	ConvId    int64    `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	ClientIds []string `protobuf:"bytes,2,rep,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
}

func (m *AddMuteClientReq) Reset()         { *m = AddMuteClientReq{} }
func (m *AddMuteClientReq) String() string { return proto.CompactTextString(m) }
func (*AddMuteClientReq) ProtoMessage()    {}
func (*AddMuteClientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{14}
}
func (m *AddMuteClientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMuteClientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMuteClientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMuteClientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMuteClientReq.Merge(m, src)
}
func (m *AddMuteClientReq) XXX_Size() int {
	return m.Size()
}
func (m *AddMuteClientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMuteClientReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddMuteClientReq proto.InternalMessageInfo

func (*AddMuteClientReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.AddMuteClientReq"
}

type AddMuteClientRsp struct {
}

func (m *AddMuteClientRsp) Reset()         { *m = AddMuteClientRsp{} }
func (m *AddMuteClientRsp) String() string { return proto.CompactTextString(m) }
func (*AddMuteClientRsp) ProtoMessage()    {}
func (*AddMuteClientRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{15}
}
func (m *AddMuteClientRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMuteClientRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMuteClientRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMuteClientRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMuteClientRsp.Merge(m, src)
}
func (m *AddMuteClientRsp) XXX_Size() int {
	return m.Size()
}
func (m *AddMuteClientRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMuteClientRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddMuteClientRsp proto.InternalMessageInfo

func (*AddMuteClientRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.AddMuteClientRsp"
}

type DeleteMuteClientReq struct {
	// 会话ID
	ConvId    int64    `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	ClientIds []string `protobuf:"bytes,2,rep,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
}

func (m *DeleteMuteClientReq) Reset()         { *m = DeleteMuteClientReq{} }
func (m *DeleteMuteClientReq) String() string { return proto.CompactTextString(m) }
func (*DeleteMuteClientReq) ProtoMessage()    {}
func (*DeleteMuteClientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{16}
}
func (m *DeleteMuteClientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMuteClientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMuteClientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMuteClientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMuteClientReq.Merge(m, src)
}
func (m *DeleteMuteClientReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMuteClientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMuteClientReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMuteClientReq proto.InternalMessageInfo

func (*DeleteMuteClientReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMuteClientReq"
}

type DeleteMuteClientRsp struct {
}

func (m *DeleteMuteClientRsp) Reset()         { *m = DeleteMuteClientRsp{} }
func (m *DeleteMuteClientRsp) String() string { return proto.CompactTextString(m) }
func (*DeleteMuteClientRsp) ProtoMessage()    {}
func (*DeleteMuteClientRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{17}
}
func (m *DeleteMuteClientRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMuteClientRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMuteClientRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMuteClientRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMuteClientRsp.Merge(m, src)
}
func (m *DeleteMuteClientRsp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMuteClientRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMuteClientRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMuteClientRsp proto.InternalMessageInfo

func (*DeleteMuteClientRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMuteClientRsp"
}

type QueryMuteClientReq struct {
	// 会话ID
	ConvId int64 `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
}

func (m *QueryMuteClientReq) Reset()         { *m = QueryMuteClientReq{} }
func (m *QueryMuteClientReq) String() string { return proto.CompactTextString(m) }
func (*QueryMuteClientReq) ProtoMessage()    {}
func (*QueryMuteClientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{18}
}
func (m *QueryMuteClientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMuteClientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMuteClientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMuteClientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMuteClientReq.Merge(m, src)
}
func (m *QueryMuteClientReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryMuteClientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMuteClientReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMuteClientReq proto.InternalMessageInfo

func (*QueryMuteClientReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.QueryMuteClientReq"
}

type QueryMuteClientRsp struct {
}

func (m *QueryMuteClientRsp) Reset()         { *m = QueryMuteClientRsp{} }
func (m *QueryMuteClientRsp) String() string { return proto.CompactTextString(m) }
func (*QueryMuteClientRsp) ProtoMessage()    {}
func (*QueryMuteClientRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{19}
}
func (m *QueryMuteClientRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMuteClientRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMuteClientRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMuteClientRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMuteClientRsp.Merge(m, src)
}
func (m *QueryMuteClientRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryMuteClientRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMuteClientRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMuteClientRsp proto.InternalMessageInfo

func (*QueryMuteClientRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.QueryMuteClientRsp"
}

type SendReq struct {
	// 会话ID
	ConvId int64  `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	Other  string `protobuf:"bytes,2,opt,name=other,proto3" json:"other,omitempty"`
}

func (m *SendReq) Reset()         { *m = SendReq{} }
func (m *SendReq) String() string { return proto.CompactTextString(m) }
func (*SendReq) ProtoMessage()    {}
func (*SendReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{20}
}
func (m *SendReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendReq.Merge(m, src)
}
func (m *SendReq) XXX_Size() int {
	return m.Size()
}
func (m *SendReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendReq proto.InternalMessageInfo

func (*SendReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.SendReq"
}

type SendRsp struct {
}

func (m *SendRsp) Reset()         { *m = SendRsp{} }
func (m *SendRsp) String() string { return proto.CompactTextString(m) }
func (*SendRsp) ProtoMessage()    {}
func (*SendRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{21}
}
func (m *SendRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRsp.Merge(m, src)
}
func (m *SendRsp) XXX_Size() int {
	return m.Size()
}
func (m *SendRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SendRsp proto.InternalMessageInfo

func (*SendRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.SendRsp"
}

type QueryMsgReq struct {
	// 会话ID
	ConvId int64 `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
}

func (m *QueryMsgReq) Reset()         { *m = QueryMsgReq{} }
func (m *QueryMsgReq) String() string { return proto.CompactTextString(m) }
func (*QueryMsgReq) ProtoMessage()    {}
func (*QueryMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{22}
}
func (m *QueryMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMsgReq.Merge(m, src)
}
func (m *QueryMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMsgReq proto.InternalMessageInfo

func (*QueryMsgReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.QueryMsgReq"
}

type QueryMsgMsgRsp struct {
}

func (m *QueryMsgMsgRsp) Reset()         { *m = QueryMsgMsgRsp{} }
func (m *QueryMsgMsgRsp) String() string { return proto.CompactTextString(m) }
func (*QueryMsgMsgRsp) ProtoMessage()    {}
func (*QueryMsgMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{23}
}
func (m *QueryMsgMsgRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMsgMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMsgMsgRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMsgMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMsgMsgRsp.Merge(m, src)
}
func (m *QueryMsgMsgRsp) XXX_Size() int {
	return m.Size()
}
func (m *QueryMsgMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMsgMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMsgMsgRsp proto.InternalMessageInfo

func (*QueryMsgMsgRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.QueryMsgMsgRsp"
}

type UpdateMsgReq struct {
	// 会话ID
	ConvId int64  `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	MsgId  int64  `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Other  string `protobuf:"bytes,3,opt,name=other,proto3" json:"other,omitempty"`
}

func (m *UpdateMsgReq) Reset()         { *m = UpdateMsgReq{} }
func (m *UpdateMsgReq) String() string { return proto.CompactTextString(m) }
func (*UpdateMsgReq) ProtoMessage()    {}
func (*UpdateMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{24}
}
func (m *UpdateMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMsgReq.Merge(m, src)
}
func (m *UpdateMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMsgReq proto.InternalMessageInfo

func (*UpdateMsgReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.UpdateMsgReq"
}

type UpdateMsgRsp struct {
}

func (m *UpdateMsgRsp) Reset()         { *m = UpdateMsgRsp{} }
func (m *UpdateMsgRsp) String() string { return proto.CompactTextString(m) }
func (*UpdateMsgRsp) ProtoMessage()    {}
func (*UpdateMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{25}
}
func (m *UpdateMsgRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMsgRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMsgRsp.Merge(m, src)
}
func (m *UpdateMsgRsp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMsgRsp proto.InternalMessageInfo

func (*UpdateMsgRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.UpdateMsgRsp"
}

type RecallReq struct {
	// 会话ID
	ConvId int64  `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	MsgId  int64  `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Sender string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *RecallReq) Reset()         { *m = RecallReq{} }
func (m *RecallReq) String() string { return proto.CompactTextString(m) }
func (*RecallReq) ProtoMessage()    {}
func (*RecallReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{26}
}
func (m *RecallReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecallReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallReq.Merge(m, src)
}
func (m *RecallReq) XXX_Size() int {
	return m.Size()
}
func (m *RecallReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecallReq proto.InternalMessageInfo

func (*RecallReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.RecallReq"
}

type RecallRsp struct {
}

func (m *RecallRsp) Reset()         { *m = RecallRsp{} }
func (m *RecallRsp) String() string { return proto.CompactTextString(m) }
func (*RecallRsp) ProtoMessage()    {}
func (*RecallRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{27}
}
func (m *RecallRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecallRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallRsp.Merge(m, src)
}
func (m *RecallRsp) XXX_Size() int {
	return m.Size()
}
func (m *RecallRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RecallRsp proto.InternalMessageInfo

func (*RecallRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.RecallRsp"
}

type DeleteMsgReq struct {
	// 会话ID
	ConvId int64 `protobuf:"varint,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	MsgId  int64 `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (m *DeleteMsgReq) Reset()         { *m = DeleteMsgReq{} }
func (m *DeleteMsgReq) String() string { return proto.CompactTextString(m) }
func (*DeleteMsgReq) ProtoMessage()    {}
func (*DeleteMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{28}
}
func (m *DeleteMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMsgReq.Merge(m, src)
}
func (m *DeleteMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMsgReq proto.InternalMessageInfo

func (*DeleteMsgReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMsgReq"
}

type DeleteMsgRsp struct {
}

func (m *DeleteMsgRsp) Reset()         { *m = DeleteMsgRsp{} }
func (m *DeleteMsgRsp) String() string { return proto.CompactTextString(m) }
func (*DeleteMsgRsp) ProtoMessage()    {}
func (*DeleteMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_129ffc4e00d26881, []int{29}
}
func (m *DeleteMsgRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMsgRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMsgRsp.Merge(m, src)
}
func (m *DeleteMsgRsp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMsgRsp proto.InternalMessageInfo

func (*DeleteMsgRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMsgRsp"
}
func init() {
	proto.RegisterType((*CreateReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.CreateReq")
	proto.RegisterMapType((map[string]string)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.CreateReq.AttrsEntry")
	proto.RegisterType((*CreateRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.CreateRsp")
	proto.RegisterType((*QueryReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.QueryReq")
	proto.RegisterType((*QueryRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.QueryRsp")
	proto.RegisterType((*UpdateReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.UpdateReq")
	proto.RegisterType((*UpdateRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.UpdateRsp")
	proto.RegisterType((*DeleteReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.DeleteReq")
	proto.RegisterType((*DeleteRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.DeleteRsp")
	proto.RegisterType((*AddMemberReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.AddMemberReq")
	proto.RegisterType((*AddMemberRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.AddMemberRsp")
	proto.RegisterType((*DeleteMemberReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMemberReq")
	proto.RegisterType((*DeleteMemberRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMemberRsp")
	proto.RegisterType((*QueryMemberReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.QueryMemberReq")
	proto.RegisterType((*QueryMemberRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.QueryMemberRsp")
	proto.RegisterType((*AddMuteClientReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.AddMuteClientReq")
	proto.RegisterType((*AddMuteClientRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.AddMuteClientRsp")
	proto.RegisterType((*DeleteMuteClientReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMuteClientReq")
	proto.RegisterType((*DeleteMuteClientRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMuteClientRsp")
	proto.RegisterType((*QueryMuteClientReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.QueryMuteClientReq")
	proto.RegisterType((*QueryMuteClientRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.QueryMuteClientRsp")
	proto.RegisterType((*SendReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.SendReq")
	proto.RegisterType((*SendRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.SendRsp")
	proto.RegisterType((*QueryMsgReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.QueryMsgReq")
	proto.RegisterType((*QueryMsgMsgRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.QueryMsgMsgRsp")
	proto.RegisterType((*UpdateMsgReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.UpdateMsgReq")
	proto.RegisterType((*UpdateMsgRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.UpdateMsgRsp")
	proto.RegisterType((*RecallReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.RecallReq")
	proto.RegisterType((*RecallRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.RecallRsp")
	proto.RegisterType((*DeleteMsgReq)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMsgReq")
	proto.RegisterType((*DeleteMsgRsp)(nil), "github.com.zchat.team.zim.proto.http.rest.conv.DeleteMsgRsp")
}

func init() { proto.RegisterFile("proto/http/rest/conv/conv.proto", fileDescriptor_129ffc4e00d26881) }

var fileDescriptor_129ffc4e00d26881 = []byte{
	// 1308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0x6f, 0x6c, 0x14, 0xc5,
	0x1b, 0xc7, 0x3b, 0x77, 0xed, 0xc1, 0x0d, 0xfd, 0x41, 0x7f, 0x63, 0x81, 0xcb, 0x06, 0xae, 0x75,
	0x82, 0x50, 0x9a, 0x74, 0xd7, 0x80, 0x7f, 0x4a, 0x45, 0xe4, 0x5a, 0x48, 0xc4, 0x40, 0x8c, 0x87,
	0x26, 0xca, 0x1b, 0xb2, 0xbd, 0x1d, 0xb7, 0x1b, 0xef, 0x76, 0xa7, 0x3b, 0x7b, 0x4d, 0x0a, 0x31,
	0x11, 0x5f, 0x98, 0x86, 0x17, 0xf2, 0x47, 0xa2, 0x20, 0x41, 0x90, 0x60, 0xc4, 0x37, 0x62, 0xd4,
	0x60, 0x14, 0x8d, 0x24, 0xbe, 0xe1, 0x25, 0x46, 0x8d, 0x18, 0x13, 0x02, 0x5c, 0xef, 0x68, 0xdf,
	0xfa, 0xd2, 0x57, 0x66, 0x66, 0xf6, 0xee, 0xf6, 0xfe, 0xd8, 0xde, 0xed, 0xf9, 0xa6, 0xdd, 0x9d,
	0xce, 0xf7, 0x79, 0x9e, 0xcf, 0x3c, 0xcf, 0xcc, 0x3c, 0x5b, 0x38, 0x40, 0x5d, 0xc7, 0x73, 0xb4,
	0x29, 0xcf, 0xa3, 0x9a, 0x4b, 0x98, 0xa7, 0x65, 0x1c, 0x7b, 0x46, 0xfc, 0x50, 0xc5, 0x5f, 0x90,
	0x6a, 0x5a, 0xde, 0x54, 0x7e, 0x52, 0xcd, 0x38, 0x39, 0xf5, 0x48, 0x66, 0x4a, 0xf7, 0x54, 0x8f,
	0xe8, 0x39, 0xf5, 0x88, 0x95, 0x93, 0x13, 0x54, 0x2e, 0x55, 0xb9, 0x54, 0xe5, 0x2a, 0x65, 0x83,
	0xe9, 0x38, 0x66, 0x96, 0x68, 0x3a, 0xb5, 0x34, 0xdd, 0xb6, 0x1d, 0x4f, 0xf7, 0x2c, 0xc7, 0x66,
	0x72, 0xb2, 0xd2, 0x6f, 0x3a, 0xa6, 0x23, 0x5d, 0xf2, 0x27, 0x7f, 0x54, 0xfe, 0xca, 0x8c, 0x98,
	0xc4, 0x1e, 0x71, 0x28, 0xb1, 0x75, 0x6a, 0xcd, 0x6c, 0xd3, 0x1c, 0x2a, 0x94, 0x4d, 0xac, 0x0c,
	0x04, 0x7c, 0xbc, 0x6e, 0x91, 0xac, 0x71, 0x78, 0x92, 0x4c, 0xe9, 0x33, 0x96, 0xe3, 0xca, 0x09,
	0xf8, 0x72, 0x04, 0xc6, 0x27, 0x5c, 0xa2, 0x7b, 0x24, 0x4d, 0xa6, 0xd1, 0x46, 0xb8, 0x22, 0x47,
	0x72, 0x93, 0xc4, 0x65, 0x09, 0x30, 0x18, 0x1d, 0x8a, 0x8f, 0x47, 0xef, 0xa5, 0x22, 0xe9, 0xf2,
	0x18, 0x42, 0xb0, 0xdb, 0xd6, 0x73, 0x24, 0x11, 0x19, 0x04, 0x43, 0xf1, 0xb4, 0x78, 0x46, 0x87,
	0x60, 0x8f, 0xee, 0x79, 0x2e, 0x4b, 0x44, 0x07, 0xa3, 0x43, 0xab, 0xb6, 0xed, 0x69, 0x73, 0x15,
	0xd4, 0x8a, 0x73, 0x35, 0xc5, 0xcd, 0xec, 0xb5, 0x3d, 0x77, 0x36, 0x2d, 0x4d, 0xa2, 0x75, 0x30,
	0x96, 0xb7, 0xad, 0xe9, 0x3c, 0x49, 0x74, 0x0f, 0x82, 0xa1, 0x95, 0x69, 0xff, 0x0d, 0x3d, 0x01,
	0xbb, 0xbd, 0x59, 0x4a, 0x12, 0x3d, 0x83, 0x60, 0xa8, 0x67, 0x7c, 0xf0, 0x5e, 0x2a, 0xf2, 0xd7,
	0xdd, 0x01, 0x34, 0x69, 0xd9, 0x86, 0x65, 0x9b, 0x63, 0xd8, 0x25, 0xd3, 0x79, 0xcb, 0x25, 0x06,
	0xfe, 0xfb, 0xee, 0x40, 0xd4, 0xb2, 0xbd, 0xb4, 0x98, 0xad, 0x8c, 0x42, 0x58, 0x75, 0x81, 0xfa,
	0x60, 0xf4, 0x0d, 0x32, 0x9b, 0x00, 0x02, 0x85, 0x3f, 0xa2, 0x7e, 0xd8, 0x33, 0xa3, 0x67, 0xf3,
	0x65, 0x3c, 0xf9, 0x32, 0x16, 0x19, 0x05, 0x78, 0x53, 0x65, 0x8d, 0x18, 0x45, 0xeb, 0xe1, 0x0a,
	0x1e, 0xf8, 0x61, 0xcb, 0x10, 0xe2, 0x68, 0x3a, 0xc6, 0x5f, 0xf7, 0x19, 0x18, 0xc2, 0x95, 0x2f,
	0xe5, 0x89, 0x3b, 0x9b, 0x26, 0xd3, 0xd5, 0x67, 0x46, 0xf1, 0x18, 0x8c, 0xbf, 0x42, 0x0d, 0x7f,
	0x85, 0xff, 0x4d, 0xcd, 0xbd, 0x3b, 0xde, 0x14, 0x71, 0xcb, 0xde, 0xc5, 0x0b, 0x5e, 0x55, 0xd1,
	0x32, 0xca, 0xc3, 0xd8, 0x43, 0xb2, 0x64, 0x69, 0x43, 0x5c, 0xe2, 0xcf, 0x62, 0x14, 0x3f, 0x0b,
	0x7b, 0x53, 0x86, 0x71, 0x40, 0xe4, 0x2f, 0x84, 0xfb, 0xd5, 0x41, 0x39, 0xa3, 0x78, 0x1f, 0x5c,
	0x23, 0x6d, 0xb7, 0x60, 0x71, 0x23, 0x84, 0x99, 0xac, 0x45, 0x6c, 0xef, 0xb0, 0x65, 0xb0, 0x44,
	0x84, 0x97, 0x53, 0x3a, 0x2e, 0x47, 0xf6, 0x19, 0x0c, 0xff, 0xbf, 0xce, 0x14, 0xa3, 0x78, 0x2b,
	0x5c, 0x2d, 0x16, 0x6d, 0x79, 0xe3, 0xb8, 0xaf, 0x76, 0x2a, 0xa3, 0xf8, 0x05, 0xd8, 0xc7, 0x43,
	0xcd, 0x7b, 0x64, 0x42, 0xf8, 0xe8, 0x24, 0x36, 0x54, 0x6f, 0x8b, 0x51, 0x7c, 0x00, 0x3e, 0xe2,
	0xc7, 0xfb, 0x9f, 0xb8, 0x58, 0xdb, 0xc4, 0x1c, 0xa3, 0x78, 0x04, 0x22, 0xc9, 0xd5, 0x92, 0x13,
	0xdc, 0xdf, 0x38, 0x9d, 0x51, 0x3c, 0x0a, 0x57, 0x1c, 0x24, 0xb6, 0x11, 0x22, 0xdf, 0x71, 0x5f,
	0xc9, 0x28, 0xde, 0x0c, 0x57, 0x49, 0xd3, 0xcc, 0x6c, 0x2d, 0x13, 0xcc, 0xe4, 0x53, 0x19, 0xc5,
	0x2f, 0xc3, 0x5e, 0x59, 0xb3, 0xcb, 0x48, 0xd1, 0x5a, 0x18, 0xcb, 0x31, 0x93, 0x8f, 0x47, 0xc4,
	0x78, 0x4f, 0x8e, 0x99, 0xc1, 0xd0, 0xa2, 0x75, 0xa5, 0x58, 0xb5, 0xca, 0x28, 0x3e, 0x08, 0xe3,
	0x69, 0x92, 0xd1, 0xb3, 0xd9, 0x30, 0x2e, 0xd6, 0xc1, 0x18, 0x23, 0xb6, 0x51, 0xf1, 0xe1, 0xbf,
	0xf1, 0xbd, 0xe3, 0x1b, 0x65, 0x14, 0xef, 0x82, 0xbd, 0x7e, 0x8a, 0x42, 0x71, 0xf0, 0x88, 0xab,
	0x7a, 0x46, 0xb7, 0x2d, 0x24, 0x60, 0xf7, 0x84, 0x63, 0xcf, 0xa0, 0xeb, 0x00, 0xc6, 0xe4, 0x79,
	0x82, 0x76, 0x84, 0x3e, 0x2e, 0x95, 0xb0, 0x52, 0x46, 0xf1, 0x53, 0xa7, 0x53, 0xeb, 0x60, 0x6c,
	0xe1, 0xd8, 0xf1, 0xe2, 0x95, 0xcf, 0x50, 0x6f, 0x71, 0xee, 0x7c, 0xf1, 0xc6, 0x77, 0xf3, 0xdf,
	0x7f, 0xb8, 0x70, 0xed, 0xc2, 0xdb, 0xbf, 0xcc, 0xbf, 0x17, 0x59, 0x8f, 0x91, 0x76, 0xc4, 0xca,
	0x89, 0xbb, 0x8d, 0xb8, 0x4c, 0x5e, 0x28, 0x63, 0x60, 0x98, 0x07, 0xde, 0x23, 0x92, 0x8d, 0x46,
	0xdb, 0x75, 0x5e, 0x3e, 0x19, 0x95, 0x90, 0x4a, 0x46, 0xf1, 0x8e, 0xd3, 0xa9, 0x0d, 0x95, 0xa8,
	0x51, 0xe9, 0xe2, 0x27, 0x0b, 0xd7, 0x2e, 0xcb, 0xa8, 0x8b, 0x73, 0x1f, 0x2c, 0x7c, 0x7c, 0x55,
	0xc4, 0xde, 0x8f, 0x9a, 0xc4, 0x8e, 0x6e, 0x02, 0x18, 0x93, 0xd5, 0xd3, 0xfe, 0x8a, 0x57, 0xce,
	0x6e, 0x25, 0xac, 0x94, 0x51, 0xbc, 0xbb, 0x66, 0xc5, 0x4b, 0xe7, 0xbf, 0x2e, 0xbd, 0xff, 0x45,
	0x60, 0xc5, 0x1f, 0x55, 0x36, 0x34, 0x46, 0xad, 0x1d, 0xf5, 0xcb, 0xed, 0x4d, 0xbe, 0xf6, 0x3f,
	0x00, 0x18, 0x93, 0xe5, 0xd4, 0x3e, 0x42, 0xe5, 0xd6, 0x50, 0xc2, 0x4a, 0xf9, 0x55, 0x52, 0x57,
	0x34, 0x97, 0x16, 0xcf, 0x5d, 0x09, 0x20, 0x24, 0x87, 0x97, 0x44, 0x40, 0x3f, 0x03, 0x18, 0xaf,
	0xdc, 0x25, 0x68, 0x67, 0xbb, 0x71, 0x04, 0x6f, 0x31, 0xa5, 0x03, 0x35, 0xa3, 0xf8, 0xf9, 0x5a,
	0x90, 0xcb, 0x1f, 0x15, 0x8f, 0x5f, 0x2a, 0xcd, 0x9d, 0x2c, 0x9e, 0x3a, 0x2b, 0x40, 0xb6, 0xe2,
	0x4d, 0x4b, 0x81, 0x68, 0x7e, 0x33, 0xc4, 0x73, 0xf2, 0x3b, 0xa8, 0x6c, 0x71, 0x89, 0xf5, 0x5c,
	0xb8, 0xe5, 0xad, 0x92, 0x75, 0x66, 0x80, 0x51, 0xbc, 0xb7, 0x06, 0xee, 0xe1, 0xa7, 0x37, 0x16,
	0xcf, 0x5d, 0x09, 0xc0, 0x6d, 0x1e, 0x6e, 0x09, 0x0e, 0xfd, 0x0a, 0xca, 0xc7, 0xbf, 0x04, 0xdb,
	0x15, 0x6a, 0xd7, 0x56, 0xb9, 0x3a, 0xd2, 0x37, 0x60, 0xc9, 0xbd, 0x1f, 0xc4, 0x42, 0xad, 0x61,
	0xdd, 0x07, 0xf0, 0x7f, 0x35, 0x37, 0x3b, 0xda, 0x1d, 0xa6, 0x94, 0x82, 0x97, 0xb3, 0xd2, 0xa1,
	0x05, 0x46, 0xf1, 0xfe, 0x9a, 0x83, 0x4d, 0x16, 0xe4, 0xe2, 0x85, 0x73, 0x8b, 0x17, 0xbf, 0x7a,
	0x78, 0xe6, 0x6a, 0x69, 0xee, 0x1b, 0x81, 0xb8, 0x05, 0xe3, 0xa5, 0x11, 0xf3, 0x1e, 0x11, 0x45,
	0xf9, 0x10, 0xc0, 0xbe, 0xfa, 0xd6, 0x02, 0x4d, 0x84, 0xac, 0xab, 0x1a, 0xd2, 0xce, 0x8d, 0xf0,
	0x16, 0xb2, 0x06, 0x56, 0x16, 0x68, 0x03, 0xec, 0xa6, 0xe1, 0x16, 0x60, 0xd1, 0x3c, 0x80, 0x6b,
	0xea, 0xda, 0x1f, 0x34, 0x1e, 0xae, 0xd0, 0x6a, 0x38, 0x3b, 0xb6, 0xd1, 0x80, 0x29, 0x0b, 0xb6,
	0x11, 0x13, 0xb5, 0x82, 0xf9, 0x13, 0x80, 0xdd, 0xbc, 0x2b, 0x43, 0x4f, 0xb7, 0x1b, 0x97, 0xdf,
	0x05, 0x2a, 0xe1, 0x84, 0x92, 0x22, 0x78, 0x54, 0x9e, 0x38, 0xb5, 0xf8, 0xd6, 0xb1, 0xd2, 0xf5,
	0xb9, 0xd2, 0xb1, 0x6b, 0x22, 0xfe, 0x61, 0xfc, 0xd8, 0x32, 0xdb, 0x8e, 0x31, 0xdd, 0x94, 0x65,
	0xf9, 0x1b, 0xf0, 0x3f, 0x89, 0x0e, 0x30, 0x13, 0x3d, 0x13, 0x6e, 0x85, 0x45, 0x1f, 0x16, 0xf6,
	0x2c, 0xa9, 0xf4, 0xa7, 0xfb, 0x9b, 0xa4, 0xa6, 0xf8, 0xee, 0x3b, 0xc5, 0x13, 0x5f, 0x06, 0xd0,
	0xb6, 0xa0, 0xd6, 0xd0, 0xd0, 0x9f, 0xa0, 0xfc, 0x89, 0xc6, 0xc1, 0x76, 0x86, 0x6b, 0x11, 0x7c,
	0xb2, 0x0e, 0xd4, 0x8c, 0xe2, 0x74, 0x4d, 0xb2, 0xe6, 0x7f, 0xfc, 0xbc, 0x74, 0xe6, 0xdb, 0x00,
	0xd1, 0x76, 0x45, 0x6d, 0x89, 0x48, 0x3b, 0x2a, 0x9b, 0x59, 0xd1, 0x75, 0xfc, 0x01, 0x60, 0x4c,
	0x76, 0xc4, 0xed, 0x77, 0x1d, 0x95, 0xf6, 0x5c, 0x09, 0x2b, 0x65, 0x14, 0xbf, 0xb6, 0x34, 0xd4,
	0x98, 0xf2, 0x64, 0x7b, 0x50, 0x9a, 0x2b, 0x4c, 0x73, 0xb6, 0x3b, 0xa0, 0xfc, 0xa5, 0x1c, 0x2a,
	0x73, 0xc1, 0x6f, 0x03, 0xa5, 0x03, 0x35, 0xa3, 0xf8, 0xc5, 0x26, 0xad, 0x55, 0x00, 0xf2, 0xf1,
	0xe1, 0x36, 0x33, 0x37, 0xfe, 0xea, 0xad, 0xfb, 0xc9, 0xae, 0x5b, 0x0f, 0x92, 0xe0, 0xf6, 0x83,
	0x24, 0xb8, 0xf7, 0x20, 0x09, 0x4e, 0x16, 0x92, 0x5d, 0x67, 0x0b, 0xc9, 0xae, 0x9b, 0x85, 0x24,
	0xb8, 0x55, 0x48, 0x82, 0xdb, 0x85, 0x64, 0xd7, 0x9d, 0x42, 0xb2, 0xeb, 0x50, 0x20, 0x6e, 0x4d,
	0xc4, 0x3d, 0xc2, 0xe3, 0x16, 0xee, 0x9a, 0xfd, 0xbf, 0x6b, 0x32, 0x26, 0x46, 0xb7, 0xff, 0x13,
	0x00, 0x00, 0xff, 0xff, 0xbc, 0x69, 0x43, 0x91, 0x0e, 0x13, 0x00, 0x00,
}

func (m *CreateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.Unique {
		i--
		if m.Unique {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Attrs) > 0 {
		for k := range m.Attrs {
			v := m.Attrs[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintConv(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintConv(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintConv(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintConv(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintConv(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Other) > 0 {
		i -= len(m.Other)
		copy(dAtA[i:], m.Other)
		i = encodeVarintConv(dAtA, i, uint64(len(m.Other)))
		i--
		dAtA[i] = 0x12
	}
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMemberReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMemberReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Other) > 0 {
		i -= len(m.Other)
		copy(dAtA[i:], m.Other)
		i = encodeVarintConv(dAtA, i, uint64(len(m.Other)))
		i--
		dAtA[i] = 0x12
	}
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddMemberRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMemberRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMemberRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMemberReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMemberReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientIds) > 0 {
		for iNdEx := len(m.ClientIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientIds[iNdEx])
			copy(dAtA[i:], m.ClientIds[iNdEx])
			i = encodeVarintConv(dAtA, i, uint64(len(m.ClientIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMemberRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMemberRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMemberRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMemberReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMemberReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMemberReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMemberRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMemberRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMemberRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddMuteClientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMuteClientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMuteClientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientIds) > 0 {
		for iNdEx := len(m.ClientIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientIds[iNdEx])
			copy(dAtA[i:], m.ClientIds[iNdEx])
			i = encodeVarintConv(dAtA, i, uint64(len(m.ClientIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddMuteClientRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMuteClientRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMuteClientRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteMuteClientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMuteClientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMuteClientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientIds) > 0 {
		for iNdEx := len(m.ClientIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientIds[iNdEx])
			copy(dAtA[i:], m.ClientIds[iNdEx])
			i = encodeVarintConv(dAtA, i, uint64(len(m.ClientIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMuteClientRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMuteClientRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMuteClientRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMuteClientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMuteClientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMuteClientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMuteClientRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMuteClientRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMuteClientRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Other) > 0 {
		i -= len(m.Other)
		copy(dAtA[i:], m.Other)
		i = encodeVarintConv(dAtA, i, uint64(len(m.Other)))
		i--
		dAtA[i] = 0x12
	}
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMsgMsgRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMsgMsgRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMsgMsgRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Other) > 0 {
		i -= len(m.Other)
		copy(dAtA[i:], m.Other)
		i = encodeVarintConv(dAtA, i, uint64(len(m.Other)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMsgRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMsgRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMsgRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RecallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecallReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintConv(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecallRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecallRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConvId != 0 {
		i = encodeVarintConv(dAtA, i, uint64(m.ConvId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMsgRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMsgRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMsgRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintConv(dAtA []byte, offset int, v uint64) int {
	offset -= sovConv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovConv(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovConv(uint64(l))
	}
	if len(m.Attrs) > 0 {
		for k, v := range m.Attrs {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovConv(uint64(len(k))) + 1 + len(v) + sovConv(uint64(len(v)))
			n += mapEntrySize + 1 + sovConv(uint64(mapEntrySize))
		}
	}
	if m.Unique {
		n += 2
	}
	if m.Type != 0 {
		n += 1 + sovConv(uint64(m.Type))
	}
	return n
}

func (m *CreateRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	return n
}

func (m *QueryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	l = len(m.Other)
	if l > 0 {
		n += 1 + l + sovConv(uint64(l))
	}
	return n
}

func (m *UpdateRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	return n
}

func (m *DeleteRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddMemberReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	l = len(m.Other)
	if l > 0 {
		n += 1 + l + sovConv(uint64(l))
	}
	return n
}

func (m *AddMemberRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteMemberReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	if len(m.ClientIds) > 0 {
		for _, s := range m.ClientIds {
			l = len(s)
			n += 1 + l + sovConv(uint64(l))
		}
	}
	return n
}

func (m *DeleteMemberRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMemberReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	return n
}

func (m *QueryMemberRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddMuteClientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	if len(m.ClientIds) > 0 {
		for _, s := range m.ClientIds {
			l = len(s)
			n += 1 + l + sovConv(uint64(l))
		}
	}
	return n
}

func (m *AddMuteClientRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteMuteClientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	if len(m.ClientIds) > 0 {
		for _, s := range m.ClientIds {
			l = len(s)
			n += 1 + l + sovConv(uint64(l))
		}
	}
	return n
}

func (m *DeleteMuteClientRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMuteClientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	return n
}

func (m *QueryMuteClientRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SendReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	l = len(m.Other)
	if l > 0 {
		n += 1 + l + sovConv(uint64(l))
	}
	return n
}

func (m *SendRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	return n
}

func (m *QueryMsgMsgRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	if m.MsgId != 0 {
		n += 1 + sovConv(uint64(m.MsgId))
	}
	l = len(m.Other)
	if l > 0 {
		n += 1 + l + sovConv(uint64(l))
	}
	return n
}

func (m *UpdateMsgRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RecallReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	if m.MsgId != 0 {
		n += 1 + sovConv(uint64(m.MsgId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovConv(uint64(l))
	}
	return n
}

func (m *RecallRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvId != 0 {
		n += 1 + sovConv(uint64(m.ConvId))
	}
	if m.MsgId != 0 {
		n += 1 + sovConv(uint64(m.MsgId))
	}
	return n
}

func (m *DeleteMsgRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovConv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConv(x uint64) (n int) {
	return sovConv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attrs == nil {
				m.Attrs = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConv
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConv
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthConv
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthConv
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConv
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthConv
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthConv
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConv(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthConv
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attrs[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unique", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unique = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMemberRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMemberRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMemberRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIds = append(m.ClientIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMemberRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMemberRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMemberRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMemberReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMemberReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMemberReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMemberRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMemberRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMemberRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMuteClientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMuteClientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMuteClientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIds = append(m.ClientIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMuteClientRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMuteClientRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMuteClientRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMuteClientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMuteClientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMuteClientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIds = append(m.ClientIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMuteClientRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMuteClientRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMuteClientRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMuteClientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMuteClientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMuteClientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMuteClientRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMuteClientRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMuteClientRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMsgMsgRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMsgMsgRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMsgMsgRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Other = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMsgRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMsgRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMsgRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			m.ConvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMsgRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMsgRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMsgRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConv = fmt.Errorf("proto: unexpected end of group")
)
