// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/rpc/chat/conv.proto

package chat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClearConversationUnreadCountReq struct {
	Uin                  string   `protobuf:"bytes,1,opt,name=uin,proto3" json:"uin,omitempty"`
	ConvId               string   `protobuf:"bytes,2,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearConversationUnreadCountReq) Reset()         { *m = ClearConversationUnreadCountReq{} }
func (m *ClearConversationUnreadCountReq) String() string { return proto.CompactTextString(m) }
func (*ClearConversationUnreadCountReq) ProtoMessage()    {}
func (*ClearConversationUnreadCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dfab6f649d6f3d3, []int{0}
}
func (m *ClearConversationUnreadCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearConversationUnreadCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearConversationUnreadCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearConversationUnreadCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearConversationUnreadCountReq.Merge(m, src)
}
func (m *ClearConversationUnreadCountReq) XXX_Size() int {
	return m.Size()
}
func (m *ClearConversationUnreadCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearConversationUnreadCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClearConversationUnreadCountReq proto.InternalMessageInfo

func (m *ClearConversationUnreadCountReq) GetUin() string {
	if m != nil {
		return m.Uin
	}
	return ""
}

func (m *ClearConversationUnreadCountReq) GetConvId() string {
	if m != nil {
		return m.ConvId
	}
	return ""
}

type ClearConversationUnreadCountRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearConversationUnreadCountRsp) Reset()         { *m = ClearConversationUnreadCountRsp{} }
func (m *ClearConversationUnreadCountRsp) String() string { return proto.CompactTextString(m) }
func (*ClearConversationUnreadCountRsp) ProtoMessage()    {}
func (*ClearConversationUnreadCountRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0dfab6f649d6f3d3, []int{1}
}
func (m *ClearConversationUnreadCountRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearConversationUnreadCountRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearConversationUnreadCountRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearConversationUnreadCountRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearConversationUnreadCountRsp.Merge(m, src)
}
func (m *ClearConversationUnreadCountRsp) XXX_Size() int {
	return m.Size()
}
func (m *ClearConversationUnreadCountRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearConversationUnreadCountRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClearConversationUnreadCountRsp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClearConversationUnreadCountReq)(nil), "github.com.zchat.team.zim.proto.rpc.chat.ClearConversationUnreadCountReq")
	proto.RegisterType((*ClearConversationUnreadCountRsp)(nil), "github.com.zchat.team.zim.proto.rpc.chat.ClearConversationUnreadCountRsp")
}

func init() { proto.RegisterFile("proto/rpc/chat/conv.proto", fileDescriptor_0dfab6f649d6f3d3) }

var fileDescriptor_0dfab6f649d6f3d3 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x2a, 0x48, 0xd6, 0x4f, 0xce, 0x48, 0x2c, 0xd1, 0x4f, 0xce, 0xcf, 0x2b, 0xd3,
	0x03, 0x8b, 0x09, 0x69, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x55,
	0x81, 0x24, 0xf5, 0x4a, 0x52, 0x13, 0x73, 0xf5, 0xaa, 0x32, 0x73, 0x21, 0x0a, 0xf4, 0x8a, 0x0a,
	0x92, 0xf5, 0x40, 0xe2, 0x4a, 0x3e, 0x5c, 0xf2, 0xce, 0x39, 0xa9, 0x89, 0x45, 0xce, 0xf9, 0x79,
	0x65, 0xa9, 0x45, 0xc5, 0x89, 0x25, 0x99, 0xf9, 0x79, 0xa1, 0x79, 0x45, 0xa9, 0x89, 0x29, 0xce,
	0xf9, 0xa5, 0x79, 0x25, 0x41, 0xa9, 0x85, 0x42, 0x02, 0x5c, 0xcc, 0xa5, 0x99, 0x79, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x20, 0xa6, 0x90, 0x38, 0x17, 0x3b, 0xc8, 0xb2, 0xf8, 0xcc, 0x14,
	0x09, 0x26, 0xb0, 0x28, 0x1b, 0x88, 0xeb, 0x99, 0xa2, 0xa4, 0x48, 0xc0, 0xb4, 0xe2, 0x02, 0xa3,
	0xfd, 0x8c, 0x5c, 0x2c, 0x20, 0x69, 0xa1, 0x6d, 0x8c, 0x5c, 0x32, 0xf8, 0x14, 0x0b, 0x79, 0xea,
	0x11, 0xeb, 0x0b, 0x3d, 0x02, 0x5e, 0x90, 0xa2, 0x96, 0x51, 0xc5, 0x05, 0x4a, 0x0c, 0x4e, 0x56,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72,
	0x0c, 0x51, 0x48, 0xc1, 0xad, 0x0f, 0x36, 0x5d, 0x17, 0x64, 0xba, 0x7e, 0x55, 0x66, 0xae, 0x3e,
	0x6a, 0x1c, 0x25, 0xb1, 0x81, 0xf9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0xaa, 0xaa,
	0x6b, 0xbc, 0x01, 0x00, 0x00,
}

func (m *ClearConversationUnreadCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearConversationUnreadCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearConversationUnreadCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ConvId) > 0 {
		i -= len(m.ConvId)
		copy(dAtA[i:], m.ConvId)
		i = encodeVarintConv(dAtA, i, uint64(len(m.ConvId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uin) > 0 {
		i -= len(m.Uin)
		copy(dAtA[i:], m.Uin)
		i = encodeVarintConv(dAtA, i, uint64(len(m.Uin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClearConversationUnreadCountRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearConversationUnreadCountRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearConversationUnreadCountRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintConv(dAtA []byte, offset int, v uint64) int {
	offset -= sovConv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClearConversationUnreadCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uin)
	if l > 0 {
		n += 1 + l + sovConv(uint64(l))
	}
	l = len(m.ConvId)
	if l > 0 {
		n += 1 + l + sovConv(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearConversationUnreadCountRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConv(x uint64) (n int) {
	return sovConv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClearConversationUnreadCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearConversationUnreadCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearConversationUnreadCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConvId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearConversationUnreadCountRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearConversationUnreadCountRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearConversationUnreadCountRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipConv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConv = fmt.Errorf("proto: unexpected end of group")
)
