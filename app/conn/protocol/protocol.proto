syntax = "proto3";

option go_package = "github.com/zchat-team/zim/conn/protocol";
option java_package = "com.iobrother.zimsdk.core.proto";

package github.com.zmicro.team.zim.conn.protocol;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "gogoproto/gogo.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_getters_all) = false;

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

enum CmdId {
  Cmd_Raw = 0;

  Cmd_Noop = 6;
  Cmd_Signalling = 243;

  Cmd_Error = 999;

  // conn
  Cmd_Login = 1001;
  Cmd_Logout = 1002;
  Cmd_Kick = 1003;

  // msg
  Cmd_Msg = 1101;               // S->C 服务器推送
  Cmd_Sync = 1102;              // 同步消息，从redis缓存中获取
  Cmd_Send = 1103;
  Cmd_MsgAck = 1104;
  Cmd_Recall = 1105;
  Cmd_Delete = 1106;

  // conv
  Cmd_ClearConversationUnreadCount = 1201;

  // group
  // 群组管理
  Cmd_SyncGroup = 1401; // 同步群
  Cmd_CreateGroup = 1402;
  Cmd_JoinGroup = 1403;
  Cmd_InviteUserToGroup = 1404;
  Cmd_QuitGroup = 1405;
  Cmd_KickGroupMember = 1406;
  Cmd_GetJoinedGroupList = 1407;
  Cmd_DismissGroup = 1408;
}

enum ErrorCode {
  Success = 0;
  InvalidToken = 1001; // 无效的令牌
  TokenExpired = 1002; // 令牌过期
  TokenRevoked = 1003; // 令牌已被吊销
  LoginConflict = 1004; // 登录冲突
}

message Error {
  int32 code = 1;
  string message = 2;
}

message LoginReq {
  string uin = 1 [
    (gogoproto.moretags) = 'binding:"required"',
    (google.api.field_behavior) = REQUIRED
  ];
  string tag = 2;
  string token = 3 [
    (gogoproto.moretags) = 'binding:"required"',
    (google.api.field_behavior) = REQUIRED
  ];
  string device_id = 4;
  string device_name = 5;
  string platform = 6;
  bool reconnect = 7;
}

message LoginRsp {

}

message LogoutReq {

}

message LogoutRsp {

}

message Noop {

}

message Kick {
  string reason = 1;
}

message Msg {
  int64 id = 1;
  int32 conv_type = 2;
  int32 type = 3;
  string content = 4;
  string sender = 5;
  string target = 6;
  int64 send_time = 7;
  string client_uuid = 8;
  repeated string at_user_list = 9;
  string owner = 10;
  bool is_transparent = 11;
}

// 同步消息，该接口从redis中同步消息
message SyncMsgReq {
  int64 offset = 1; // offset为本地最近一条消息的发送时间
  int64 limit = 2;
}

message SyncMsgRsp {
  repeated Msg list = 1;
}

message SendReq {
  int32 conv_type = 1 [
    (gogoproto.moretags) = 'binding:"required"',
    (google.api.field_behavior) = REQUIRED
  ];
  int32 msg_type = 2 [
    (gogoproto.moretags) = 'binding:"required"',
    (google.api.field_behavior) = REQUIRED
  ];
  string sender = 3 [
    (gogoproto.moretags) = 'binding:"required"',
    (google.api.field_behavior) = REQUIRED
  ];
  string target = 4 [
    (gogoproto.moretags) = 'binding:"required"',
    (google.api.field_behavior) = REQUIRED
  ];
  string content = 5 [
    (gogoproto.moretags) = 'binding:"required"',
    (google.api.field_behavior) = REQUIRED
  ];
  string client_uuid = 6;
  repeated string at_user_list = 7;
  bool is_transparent = 8;
}

message SendRsp {
  int64 id = 1;
  int64 send_time = 2;
  string client_uuid = 3;
}

message MsgAckReq {
  int64 id = 1;
}

message MsgAckRsp {
}

message RecallReq {
  int64 id = 1;
}

message RecallRsp {
}

message DeleteReq {
  string conv_id = 1;
  repeated int64 ids = 2;
}

message DeleteRsp {
}

message GetMergerMsgReq {
}

message MergerMsgItem {
  string nickname = 1;
  string avatar = 2;
  int32 type = 3;
  string content = 4;
  int64 send_time = 5;
}

message GetMergerMsgRsp {
  repeated MergerMsgItem list = 1;
}

message ClearConversationUnreadReq {
  string conv_id = 1;
}

message ClearConversationUnreadRsp {

}

// 以下为群接口

message GroupInfo {
  // 群主
  string owner = 1;
  // 群名称
  string name = 2;
  string group_id = 3;
  string notice = 4;
  string intro = 5;
  string avatar = 6;
  int64 created_at = 7;
  int64 updated_at = 8;
  int32 type = 9;
}

message SyncGroupReq {
  int64 offset = 1;
  int64 limit = 2;
}

message SyncGroupRsp {
  repeated GroupInfo list = 1;
}

message CreateGroupReq {
  // 成员
  repeated string members = 1;
  // 群名称
  string name = 2;
  // 群ID，如果不传，zim会生成一个群ID
  string group_id = 3;
  string notice = 4;
  string intro = 5;
  string avatar = 6;
}

message CreateGroupRsp {
  string group_id = 1;
}

message JoinGroupReq {
  string group_id = 1;
}

message JoinGroupRsp {
}

message InviteUserToGroupReq {
  repeated string user_list = 1;
  string group_id = 2;
}

message InviteUserToGroupRsp {

}

message QuitGroupReq {
  string group_id = 1;
}

message QuitGroupRsp {

}

message KickGroupMemberReq {
  repeated string user_list = 1;
  string group_id = 2;
}

message KickGroupMemberRsp {
  repeated string success_list = 1;
  repeated string fail_list = 2;
}

message GetJoinedGroupListReq {
}

message GetJoinedGroupListRsp {
  repeated GroupInfo list = 1;
}

message DismissGroupReq {
  string group_id = 1;
}

message DismissGroupRsp {

}