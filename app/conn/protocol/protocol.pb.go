// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/conn/protocol/protocol.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CmdId int32

const (
	CmdId_Cmd_Raw        CmdId = 0
	CmdId_Cmd_Noop       CmdId = 6
	CmdId_Cmd_Signalling CmdId = 243
	CmdId_Cmd_Error      CmdId = 999
	// conn
	CmdId_Cmd_Login  CmdId = 1001
	CmdId_Cmd_Logout CmdId = 1002
	CmdId_Cmd_Kick   CmdId = 1003
	// msg
	CmdId_Cmd_Msg    CmdId = 1101
	CmdId_Cmd_Sync   CmdId = 1102
	CmdId_Cmd_Send   CmdId = 1103
	CmdId_Cmd_MsgAck CmdId = 1104
	CmdId_Cmd_Recall CmdId = 1105
	CmdId_Cmd_Delete CmdId = 1106
	// conv
	CmdId_Cmd_ClearConversationUnreadCount CmdId = 1201
	// group
	// 群组管理
	CmdId_Cmd_SyncGroup          CmdId = 1401
	CmdId_Cmd_CreateGroup        CmdId = 1402
	CmdId_Cmd_JoinGroup          CmdId = 1403
	CmdId_Cmd_InviteUserToGroup  CmdId = 1404
	CmdId_Cmd_QuitGroup          CmdId = 1405
	CmdId_Cmd_KickGroupMember    CmdId = 1406
	CmdId_Cmd_GetJoinedGroupList CmdId = 1407
	CmdId_Cmd_DismissGroup       CmdId = 1408
)

var CmdId_name = map[int32]string{
	0:    "Cmd_Raw",
	6:    "Cmd_Noop",
	243:  "Cmd_Signalling",
	999:  "Cmd_Error",
	1001: "Cmd_Login",
	1002: "Cmd_Logout",
	1003: "Cmd_Kick",
	1101: "Cmd_Msg",
	1102: "Cmd_Sync",
	1103: "Cmd_Send",
	1104: "Cmd_MsgAck",
	1105: "Cmd_Recall",
	1106: "Cmd_Delete",
	1201: "Cmd_ClearConversationUnreadCount",
	1401: "Cmd_SyncGroup",
	1402: "Cmd_CreateGroup",
	1403: "Cmd_JoinGroup",
	1404: "Cmd_InviteUserToGroup",
	1405: "Cmd_QuitGroup",
	1406: "Cmd_KickGroupMember",
	1407: "Cmd_GetJoinedGroupList",
	1408: "Cmd_DismissGroup",
}

var CmdId_value = map[string]int32{
	"Cmd_Raw":                          0,
	"Cmd_Noop":                         6,
	"Cmd_Signalling":                   243,
	"Cmd_Error":                        999,
	"Cmd_Login":                        1001,
	"Cmd_Logout":                       1002,
	"Cmd_Kick":                         1003,
	"Cmd_Msg":                          1101,
	"Cmd_Sync":                         1102,
	"Cmd_Send":                         1103,
	"Cmd_MsgAck":                       1104,
	"Cmd_Recall":                       1105,
	"Cmd_Delete":                       1106,
	"Cmd_ClearConversationUnreadCount": 1201,
	"Cmd_SyncGroup":                    1401,
	"Cmd_CreateGroup":                  1402,
	"Cmd_JoinGroup":                    1403,
	"Cmd_InviteUserToGroup":            1404,
	"Cmd_QuitGroup":                    1405,
	"Cmd_KickGroupMember":              1406,
	"Cmd_GetJoinedGroupList":           1407,
	"Cmd_DismissGroup":                 1408,
}

func (x CmdId) String() string {
	return proto.EnumName(CmdId_name, int32(x))
}

func (CmdId) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{0}
}

type ErrorCode int32

const (
	ErrorCode_Success       ErrorCode = 0
	ErrorCode_InvalidToken  ErrorCode = 1001
	ErrorCode_TokenExpired  ErrorCode = 1002
	ErrorCode_TokenRevoked  ErrorCode = 1003
	ErrorCode_LoginConflict ErrorCode = 1004
)

var ErrorCode_name = map[int32]string{
	0:    "Success",
	1001: "InvalidToken",
	1002: "TokenExpired",
	1003: "TokenRevoked",
	1004: "LoginConflict",
}

var ErrorCode_value = map[string]int32{
	"Success":       0,
	"InvalidToken":  1001,
	"TokenExpired":  1002,
	"TokenRevoked":  1003,
	"LoginConflict": 1004,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{1}
}

type Error struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{0}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (*Error) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.Error"
}

type LoginReq struct {
	Uin        string `protobuf:"bytes,1,opt,name=uin,proto3" json:"uin,omitempty" binding:"required"`
	Tag        string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Token      string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty" binding:"required"`
	DeviceId   string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DeviceName string `protobuf:"bytes,5,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	Platform   string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Reconnect  bool   `protobuf:"varint,7,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
}

func (m *LoginReq) Reset()         { *m = LoginReq{} }
func (m *LoginReq) String() string { return proto.CompactTextString(m) }
func (*LoginReq) ProtoMessage()    {}
func (*LoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{1}
}
func (m *LoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReq.Merge(m, src)
}
func (m *LoginReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReq proto.InternalMessageInfo

func (*LoginReq) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.LoginReq"
}

type LoginRsp struct {
}

func (m *LoginRsp) Reset()         { *m = LoginRsp{} }
func (m *LoginRsp) String() string { return proto.CompactTextString(m) }
func (*LoginRsp) ProtoMessage()    {}
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{2}
}
func (m *LoginRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRsp.Merge(m, src)
}
func (m *LoginRsp) XXX_Size() int {
	return m.Size()
}
func (m *LoginRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRsp proto.InternalMessageInfo

func (*LoginRsp) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.LoginRsp"
}

type LogoutReq struct {
}

func (m *LogoutReq) Reset()         { *m = LogoutReq{} }
func (m *LogoutReq) String() string { return proto.CompactTextString(m) }
func (*LogoutReq) ProtoMessage()    {}
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{3}
}
func (m *LogoutReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutReq.Merge(m, src)
}
func (m *LogoutReq) XXX_Size() int {
	return m.Size()
}
func (m *LogoutReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutReq.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutReq proto.InternalMessageInfo

func (*LogoutReq) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.LogoutReq"
}

type LogoutRsp struct {
}

func (m *LogoutRsp) Reset()         { *m = LogoutRsp{} }
func (m *LogoutRsp) String() string { return proto.CompactTextString(m) }
func (*LogoutRsp) ProtoMessage()    {}
func (*LogoutRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{4}
}
func (m *LogoutRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogoutRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogoutRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogoutRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutRsp.Merge(m, src)
}
func (m *LogoutRsp) XXX_Size() int {
	return m.Size()
}
func (m *LogoutRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutRsp.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutRsp proto.InternalMessageInfo

func (*LogoutRsp) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.LogoutRsp"
}

type Noop struct {
}

func (m *Noop) Reset()         { *m = Noop{} }
func (m *Noop) String() string { return proto.CompactTextString(m) }
func (*Noop) ProtoMessage()    {}
func (*Noop) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{5}
}
func (m *Noop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Noop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Noop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Noop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Noop.Merge(m, src)
}
func (m *Noop) XXX_Size() int {
	return m.Size()
}
func (m *Noop) XXX_DiscardUnknown() {
	xxx_messageInfo_Noop.DiscardUnknown(m)
}

var xxx_messageInfo_Noop proto.InternalMessageInfo

func (*Noop) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.Noop"
}

type Kick struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *Kick) Reset()         { *m = Kick{} }
func (m *Kick) String() string { return proto.CompactTextString(m) }
func (*Kick) ProtoMessage()    {}
func (*Kick) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{6}
}
func (m *Kick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kick.Merge(m, src)
}
func (m *Kick) XXX_Size() int {
	return m.Size()
}
func (m *Kick) XXX_DiscardUnknown() {
	xxx_messageInfo_Kick.DiscardUnknown(m)
}

var xxx_messageInfo_Kick proto.InternalMessageInfo

func (*Kick) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.Kick"
}

type Msg struct {
	Id            int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ConvType      int      `protobuf:"varint,2,opt,name=conv_type,json=convType,proto3,casttype=int" json:"conv_type,omitempty"`
	Type          int      `protobuf:"varint,3,opt,name=type,proto3,casttype=int" json:"type,omitempty"`
	Content       string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Sender        string   `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
	Target        string   `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
	SendTime      int64    `protobuf:"varint,7,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	ClientUuid    string   `protobuf:"bytes,8,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	AtUserList    []string `protobuf:"bytes,9,rep,name=at_user_list,json=atUserList,proto3" json:"at_user_list,omitempty"`
	Owner         string   `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
	IsTransparent bool     `protobuf:"varint,11,opt,name=is_transparent,json=isTransparent,proto3" json:"is_transparent,omitempty"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{7}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (*Msg) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.Msg"
}

// 同步消息，该接口从redis中同步消息
type SyncMsgReq struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *SyncMsgReq) Reset()         { *m = SyncMsgReq{} }
func (m *SyncMsgReq) String() string { return proto.CompactTextString(m) }
func (*SyncMsgReq) ProtoMessage()    {}
func (*SyncMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{8}
}
func (m *SyncMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncMsgReq.Merge(m, src)
}
func (m *SyncMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *SyncMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncMsgReq proto.InternalMessageInfo

func (*SyncMsgReq) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.SyncMsgReq"
}

type SyncMsgRsp struct {
	List []*Msg `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *SyncMsgRsp) Reset()         { *m = SyncMsgRsp{} }
func (m *SyncMsgRsp) String() string { return proto.CompactTextString(m) }
func (*SyncMsgRsp) ProtoMessage()    {}
func (*SyncMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{9}
}
func (m *SyncMsgRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncMsgRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncMsgRsp.Merge(m, src)
}
func (m *SyncMsgRsp) XXX_Size() int {
	return m.Size()
}
func (m *SyncMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SyncMsgRsp proto.InternalMessageInfo

func (*SyncMsgRsp) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.SyncMsgRsp"
}

type SendReq struct {
	ConvType      int      `protobuf:"varint,1,opt,name=conv_type,json=convType,proto3,casttype=int" json:"conv_type,omitempty" binding:"required"`
	MsgType       int      `protobuf:"varint,2,opt,name=msg_type,json=msgType,proto3,casttype=int" json:"msg_type,omitempty" binding:"required"`
	Sender        string   `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty" binding:"required"`
	Target        string   `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty" binding:"required"`
	Content       string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty" binding:"required"`
	ClientUuid    string   `protobuf:"bytes,6,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	AtUserList    []string `protobuf:"bytes,7,rep,name=at_user_list,json=atUserList,proto3" json:"at_user_list,omitempty"`
	IsTransparent bool     `protobuf:"varint,8,opt,name=is_transparent,json=isTransparent,proto3" json:"is_transparent,omitempty"`
}

func (m *SendReq) Reset()         { *m = SendReq{} }
func (m *SendReq) String() string { return proto.CompactTextString(m) }
func (*SendReq) ProtoMessage()    {}
func (*SendReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{10}
}
func (m *SendReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendReq.Merge(m, src)
}
func (m *SendReq) XXX_Size() int {
	return m.Size()
}
func (m *SendReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendReq proto.InternalMessageInfo

func (*SendReq) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.SendReq"
}

type SendRsp struct {
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SendTime   int64  `protobuf:"varint,2,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	ClientUuid string `protobuf:"bytes,3,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
}

func (m *SendRsp) Reset()         { *m = SendRsp{} }
func (m *SendRsp) String() string { return proto.CompactTextString(m) }
func (*SendRsp) ProtoMessage()    {}
func (*SendRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{11}
}
func (m *SendRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRsp.Merge(m, src)
}
func (m *SendRsp) XXX_Size() int {
	return m.Size()
}
func (m *SendRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SendRsp proto.InternalMessageInfo

func (*SendRsp) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.SendRsp"
}

type MsgAckReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgAckReq) Reset()         { *m = MsgAckReq{} }
func (m *MsgAckReq) String() string { return proto.CompactTextString(m) }
func (*MsgAckReq) ProtoMessage()    {}
func (*MsgAckReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{12}
}
func (m *MsgAckReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAckReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAckReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAckReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAckReq.Merge(m, src)
}
func (m *MsgAckReq) XXX_Size() int {
	return m.Size()
}
func (m *MsgAckReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAckReq.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAckReq proto.InternalMessageInfo

func (*MsgAckReq) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.MsgAckReq"
}

type MsgAckRsp struct {
}

func (m *MsgAckRsp) Reset()         { *m = MsgAckRsp{} }
func (m *MsgAckRsp) String() string { return proto.CompactTextString(m) }
func (*MsgAckRsp) ProtoMessage()    {}
func (*MsgAckRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{13}
}
func (m *MsgAckRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAckRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAckRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAckRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAckRsp.Merge(m, src)
}
func (m *MsgAckRsp) XXX_Size() int {
	return m.Size()
}
func (m *MsgAckRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAckRsp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAckRsp proto.InternalMessageInfo

func (*MsgAckRsp) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.MsgAckRsp"
}

type RecallReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RecallReq) Reset()         { *m = RecallReq{} }
func (m *RecallReq) String() string { return proto.CompactTextString(m) }
func (*RecallReq) ProtoMessage()    {}
func (*RecallReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{14}
}
func (m *RecallReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecallReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallReq.Merge(m, src)
}
func (m *RecallReq) XXX_Size() int {
	return m.Size()
}
func (m *RecallReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecallReq proto.InternalMessageInfo

func (*RecallReq) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.RecallReq"
}

type RecallRsp struct {
}

func (m *RecallRsp) Reset()         { *m = RecallRsp{} }
func (m *RecallRsp) String() string { return proto.CompactTextString(m) }
func (*RecallRsp) ProtoMessage()    {}
func (*RecallRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{15}
}
func (m *RecallRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecallRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallRsp.Merge(m, src)
}
func (m *RecallRsp) XXX_Size() int {
	return m.Size()
}
func (m *RecallRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallRsp.DiscardUnknown(m)
}

var xxx_messageInfo_RecallRsp proto.InternalMessageInfo

func (*RecallRsp) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.RecallRsp"
}

type DeleteReq struct {
	ConvId string  `protobuf:"bytes,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
	Ids    []int64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *DeleteReq) Reset()         { *m = DeleteReq{} }
func (m *DeleteReq) String() string { return proto.CompactTextString(m) }
func (*DeleteReq) ProtoMessage()    {}
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{16}
}
func (m *DeleteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReq.Merge(m, src)
}
func (m *DeleteReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReq proto.InternalMessageInfo

func (*DeleteReq) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.DeleteReq"
}

type DeleteRsp struct {
}

func (m *DeleteRsp) Reset()         { *m = DeleteRsp{} }
func (m *DeleteRsp) String() string { return proto.CompactTextString(m) }
func (*DeleteRsp) ProtoMessage()    {}
func (*DeleteRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{17}
}
func (m *DeleteRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRsp.Merge(m, src)
}
func (m *DeleteRsp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRsp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRsp proto.InternalMessageInfo

func (*DeleteRsp) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.DeleteRsp"
}

type GetMergerMsgReq struct {
}

func (m *GetMergerMsgReq) Reset()         { *m = GetMergerMsgReq{} }
func (m *GetMergerMsgReq) String() string { return proto.CompactTextString(m) }
func (*GetMergerMsgReq) ProtoMessage()    {}
func (*GetMergerMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{18}
}
func (m *GetMergerMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMergerMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMergerMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMergerMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMergerMsgReq.Merge(m, src)
}
func (m *GetMergerMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMergerMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMergerMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMergerMsgReq proto.InternalMessageInfo

func (*GetMergerMsgReq) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.GetMergerMsgReq"
}

type MergerMsgItem struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Avatar   string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Type     int    `protobuf:"varint,3,opt,name=type,proto3,casttype=int" json:"type,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	SendTime int64  `protobuf:"varint,5,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
}

func (m *MergerMsgItem) Reset()         { *m = MergerMsgItem{} }
func (m *MergerMsgItem) String() string { return proto.CompactTextString(m) }
func (*MergerMsgItem) ProtoMessage()    {}
func (*MergerMsgItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{19}
}
func (m *MergerMsgItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MergerMsgItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MergerMsgItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MergerMsgItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergerMsgItem.Merge(m, src)
}
func (m *MergerMsgItem) XXX_Size() int {
	return m.Size()
}
func (m *MergerMsgItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MergerMsgItem.DiscardUnknown(m)
}

var xxx_messageInfo_MergerMsgItem proto.InternalMessageInfo

func (*MergerMsgItem) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.MergerMsgItem"
}

type GetMergerMsgRsp struct {
	List []*MergerMsgItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *GetMergerMsgRsp) Reset()         { *m = GetMergerMsgRsp{} }
func (m *GetMergerMsgRsp) String() string { return proto.CompactTextString(m) }
func (*GetMergerMsgRsp) ProtoMessage()    {}
func (*GetMergerMsgRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{20}
}
func (m *GetMergerMsgRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMergerMsgRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMergerMsgRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMergerMsgRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMergerMsgRsp.Merge(m, src)
}
func (m *GetMergerMsgRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetMergerMsgRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMergerMsgRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMergerMsgRsp proto.InternalMessageInfo

func (*GetMergerMsgRsp) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.GetMergerMsgRsp"
}

type ClearConversationUnreadReq struct {
	ConvId string `protobuf:"bytes,1,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
}

func (m *ClearConversationUnreadReq) Reset()         { *m = ClearConversationUnreadReq{} }
func (m *ClearConversationUnreadReq) String() string { return proto.CompactTextString(m) }
func (*ClearConversationUnreadReq) ProtoMessage()    {}
func (*ClearConversationUnreadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{21}
}
func (m *ClearConversationUnreadReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearConversationUnreadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearConversationUnreadReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearConversationUnreadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearConversationUnreadReq.Merge(m, src)
}
func (m *ClearConversationUnreadReq) XXX_Size() int {
	return m.Size()
}
func (m *ClearConversationUnreadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearConversationUnreadReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClearConversationUnreadReq proto.InternalMessageInfo

func (*ClearConversationUnreadReq) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.ClearConversationUnreadReq"
}

type ClearConversationUnreadRsp struct {
}

func (m *ClearConversationUnreadRsp) Reset()         { *m = ClearConversationUnreadRsp{} }
func (m *ClearConversationUnreadRsp) String() string { return proto.CompactTextString(m) }
func (*ClearConversationUnreadRsp) ProtoMessage()    {}
func (*ClearConversationUnreadRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2e099632e297, []int{22}
}
func (m *ClearConversationUnreadRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearConversationUnreadRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearConversationUnreadRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClearConversationUnreadRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearConversationUnreadRsp.Merge(m, src)
}
func (m *ClearConversationUnreadRsp) XXX_Size() int {
	return m.Size()
}
func (m *ClearConversationUnreadRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearConversationUnreadRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ClearConversationUnreadRsp proto.InternalMessageInfo

func (*ClearConversationUnreadRsp) XXX_MessageName() string {
	return "github.com.zmicro.team.zim.conn.protocol.ClearConversationUnreadRsp"
}
func init() {
	proto.RegisterEnum("github.com.zmicro.team.zim.conn.protocol.CmdId", CmdId_name, CmdId_value)
	proto.RegisterEnum("github.com.zmicro.team.zim.conn.protocol.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*Error)(nil), "github.com.zmicro.team.zim.conn.protocol.Error")
	proto.RegisterType((*LoginReq)(nil), "github.com.zmicro.team.zim.conn.protocol.LoginReq")
	proto.RegisterType((*LoginRsp)(nil), "github.com.zmicro.team.zim.conn.protocol.LoginRsp")
	proto.RegisterType((*LogoutReq)(nil), "github.com.zmicro.team.zim.conn.protocol.LogoutReq")
	proto.RegisterType((*LogoutRsp)(nil), "github.com.zmicro.team.zim.conn.protocol.LogoutRsp")
	proto.RegisterType((*Noop)(nil), "github.com.zmicro.team.zim.conn.protocol.Noop")
	proto.RegisterType((*Kick)(nil), "github.com.zmicro.team.zim.conn.protocol.Kick")
	proto.RegisterType((*Msg)(nil), "github.com.zmicro.team.zim.conn.protocol.Msg")
	proto.RegisterType((*SyncMsgReq)(nil), "github.com.zmicro.team.zim.conn.protocol.SyncMsgReq")
	proto.RegisterType((*SyncMsgRsp)(nil), "github.com.zmicro.team.zim.conn.protocol.SyncMsgRsp")
	proto.RegisterType((*SendReq)(nil), "github.com.zmicro.team.zim.conn.protocol.SendReq")
	proto.RegisterType((*SendRsp)(nil), "github.com.zmicro.team.zim.conn.protocol.SendRsp")
	proto.RegisterType((*MsgAckReq)(nil), "github.com.zmicro.team.zim.conn.protocol.MsgAckReq")
	proto.RegisterType((*MsgAckRsp)(nil), "github.com.zmicro.team.zim.conn.protocol.MsgAckRsp")
	proto.RegisterType((*RecallReq)(nil), "github.com.zmicro.team.zim.conn.protocol.RecallReq")
	proto.RegisterType((*RecallRsp)(nil), "github.com.zmicro.team.zim.conn.protocol.RecallRsp")
	proto.RegisterType((*DeleteReq)(nil), "github.com.zmicro.team.zim.conn.protocol.DeleteReq")
	proto.RegisterType((*DeleteRsp)(nil), "github.com.zmicro.team.zim.conn.protocol.DeleteRsp")
	proto.RegisterType((*GetMergerMsgReq)(nil), "github.com.zmicro.team.zim.conn.protocol.GetMergerMsgReq")
	proto.RegisterType((*MergerMsgItem)(nil), "github.com.zmicro.team.zim.conn.protocol.MergerMsgItem")
	proto.RegisterType((*GetMergerMsgRsp)(nil), "github.com.zmicro.team.zim.conn.protocol.GetMergerMsgRsp")
	proto.RegisterType((*ClearConversationUnreadReq)(nil), "github.com.zmicro.team.zim.conn.protocol.ClearConversationUnreadReq")
	proto.RegisterType((*ClearConversationUnreadRsp)(nil), "github.com.zmicro.team.zim.conn.protocol.ClearConversationUnreadRsp")
}

func init() { proto.RegisterFile("app/conn/protocol/protocol.proto", fileDescriptor_608f2e099632e297) }

var fileDescriptor_608f2e099632e297 = []byte{
	// 1230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6f, 0xdc, 0x44,
	0x1b, 0xde, 0x5d, 0xef, 0xcf, 0x77, 0x93, 0xd4, 0x9d, 0xb6, 0xf9, 0xac, 0xa4, 0xdf, 0x66, 0x65,
	0x7d, 0xd5, 0xb7, 0xaa, 0xe8, 0x06, 0x81, 0x0a, 0xa8, 0xb7, 0x66, 0xa9, 0xaa, 0xd0, 0xa6, 0x08,
	0x27, 0x15, 0x12, 0x07, 0x56, 0x8e, 0xfd, 0xc6, 0x1d, 0xc5, 0x9e, 0x71, 0x67, 0xc6, 0x5b, 0x9a,
	0x13, 0x7f, 0x02, 0x37, 0xf8, 0x37, 0x38, 0x72, 0x82, 0x63, 0x2f, 0x40, 0xe1, 0xc4, 0xa9, 0x82,
	0xe6, 0x80, 0x80, 0x9e, 0xe0, 0x44, 0xcb, 0x2f, 0xcd, 0xd8, 0xde, 0xfc, 0x6a, 0x53, 0xe0, 0x36,
	0xcf, 0xf3, 0xbe, 0xef, 0xd8, 0xf3, 0xbc, 0xcf, 0x3b, 0x36, 0xf4, 0xfd, 0x34, 0x5d, 0x0e, 0x38,
	0x63, 0xcb, 0xa9, 0xe0, 0x8a, 0x07, 0x3c, 0x9e, 0x2e, 0x86, 0x66, 0x41, 0x06, 0x11, 0x55, 0xb7,
	0xb2, 0xcd, 0x61, 0xc0, 0x93, 0xe1, 0x4e, 0x42, 0x03, 0xc1, 0x87, 0x0a, 0xfd, 0x64, 0xb8, 0x43,
	0x93, 0xa1, 0x2e, 0x1c, 0x96, 0xf9, 0x0b, 0xa7, 0x23, 0x1e, 0x71, 0x83, 0x96, 0xf5, 0x2a, 0x0f,
	0xb8, 0x17, 0xa1, 0x71, 0x45, 0x08, 0x2e, 0x08, 0x81, 0x7a, 0xc0, 0x43, 0x74, 0xaa, 0xfd, 0xea,
	0xa0, 0xe1, 0x99, 0x35, 0x71, 0xa0, 0x95, 0xa0, 0x94, 0x7e, 0x84, 0x4e, 0xad, 0x5f, 0x1d, 0x74,
	0xbc, 0x12, 0xba, 0x8f, 0xaa, 0xd0, 0xbe, 0xce, 0x23, 0xca, 0x3c, 0xbc, 0x4d, 0x06, 0x60, 0x65,
	0x94, 0x99, 0xca, 0xce, 0xca, 0xfc, 0xcf, 0x0f, 0x96, 0xc8, 0x26, 0x65, 0x21, 0x65, 0xd1, 0x25,
	0x57, 0xe0, 0xed, 0x8c, 0x0a, 0x0c, 0x5d, 0x4f, 0xa7, 0x10, 0x1b, 0x2c, 0xe5, 0x47, 0xc5, 0x66,
	0x7a, 0x49, 0x5e, 0x80, 0x86, 0xe2, 0xdb, 0xc8, 0x1c, 0xeb, 0xd8, 0xea, 0x3c, 0x89, 0x2c, 0x42,
	0x27, 0xc4, 0x09, 0x0d, 0x70, 0x4c, 0x43, 0xa7, 0x6e, 0x76, 0x69, 0xe7, 0xc4, 0x6a, 0x48, 0x96,
	0xa0, 0x5b, 0x04, 0x99, 0x9f, 0xa0, 0xd3, 0x30, 0x61, 0xc8, 0xa9, 0x1b, 0x7e, 0x82, 0x64, 0x01,
	0xda, 0x69, 0xec, 0xab, 0x2d, 0x2e, 0x12, 0xa7, 0x99, 0x17, 0x97, 0x98, 0x9c, 0x85, 0x8e, 0x40,
	0x2d, 0x18, 0x06, 0xca, 0x69, 0xf5, 0xab, 0x83, 0xb6, 0xb7, 0x47, 0xb8, 0x50, 0x9e, 0x56, 0xa6,
	0x6e, 0x17, 0x3a, 0xd7, 0x79, 0xc4, 0x33, 0xe5, 0xe1, 0xed, 0x7d, 0x40, 0xa6, 0x6e, 0x13, 0xea,
	0x37, 0x38, 0x4f, 0xdd, 0x1e, 0xd4, 0xaf, 0xd1, 0x60, 0x9b, 0xcc, 0x43, 0x53, 0xa0, 0x2f, 0x79,
	0x21, 0x8d, 0x57, 0x20, 0xf7, 0xd3, 0x1a, 0x58, 0x6b, 0x32, 0x22, 0x73, 0x50, 0xa3, 0xa1, 0x89,
	0x59, 0x5e, 0x8d, 0x86, 0xe4, 0x7f, 0xd0, 0x09, 0x38, 0x9b, 0x8c, 0xd5, 0xdd, 0x34, 0x17, 0xbc,
	0xb1, 0xd2, 0x7a, 0xfc, 0x60, 0xc9, 0xa2, 0x4c, 0x79, 0x6d, 0x1d, 0xd9, 0xb8, 0x9b, 0x22, 0x59,
	0x84, 0xba, 0x49, 0xb0, 0x0e, 0x26, 0x18, 0x52, 0x77, 0x2c, 0xe0, 0x4c, 0x21, 0x53, 0x85, 0x3c,
	0x25, 0xd4, 0x2f, 0x23, 0x91, 0x85, 0x28, 0x0a, 0x61, 0x0a, 0xa4, 0x79, 0xe5, 0x8b, 0x08, 0x55,
	0x21, 0x49, 0x81, 0xb4, 0xd4, 0x3a, 0x63, 0xac, 0x68, 0x82, 0x46, 0x10, 0xcb, 0x6b, 0x6b, 0x62,
	0x83, 0x26, 0xa8, 0xa5, 0x0e, 0x62, 0x8a, 0x4c, 0x8d, 0xb3, 0x8c, 0x86, 0x4e, 0x3b, 0x97, 0x3a,
	0xa7, 0x6e, 0x66, 0x34, 0x24, 0x7d, 0x98, 0xf1, 0xd5, 0x38, 0x93, 0x28, 0xc6, 0x31, 0x95, 0xca,
	0xe9, 0xf4, 0x2d, 0x9d, 0xe1, 0xab, 0x9b, 0x12, 0xc5, 0x75, 0x2a, 0x15, 0x39, 0x0d, 0x0d, 0x7e,
	0x87, 0xa1, 0x70, 0xc0, 0x14, 0xe7, 0x80, 0x9c, 0x83, 0x39, 0x2a, 0xc7, 0x4a, 0xf8, 0x4c, 0xa6,
	0xbe, 0xd0, 0xc7, 0xe8, 0x9a, 0x5e, 0xcc, 0x52, 0xb9, 0xb1, 0x47, 0xba, 0x97, 0x00, 0xd6, 0xef,
	0xb2, 0x60, 0x4d, 0x46, 0xda, 0x7f, 0xf3, 0xd0, 0xe4, 0x5b, 0x5b, 0x12, 0x55, 0xa1, 0x65, 0x81,
	0xf4, 0x23, 0x62, 0x9a, 0x50, 0x65, 0xb4, 0xb4, 0xbc, 0x1c, 0xb8, 0x6f, 0xee, 0xd5, 0xca, 0x94,
	0x5c, 0x86, 0xba, 0x79, 0xc1, 0x6a, 0xdf, 0x1a, 0x74, 0x5f, 0xba, 0x30, 0xfc, 0xbb, 0xe3, 0x34,
	0xd4, 0xf5, 0xa6, 0xd4, 0x7d, 0x52, 0x83, 0xd6, 0x3a, 0xb2, 0x50, 0xbf, 0xca, 0xa5, 0xfd, 0x2d,
	0x34, 0xa3, 0xb4, 0xf2, 0xdf, 0xa7, 0x5b, 0xfa, 0x68, 0x63, 0x5f, 0x83, 0x76, 0x22, 0xa3, 0xfd,
	0xdd, 0x7f, 0x4e, 0x69, 0x2b, 0x91, 0x91, 0xa9, 0x1c, 0x4e, 0x7b, 0x7b, 0xfc, 0x14, 0x95, 0x3d,
	0x1f, 0x4e, 0x7b, 0x5e, 0x3f, 0x3e, 0xbf, 0xf0, 0xc2, 0x8b, 0x7b, 0xae, 0x6a, 0x1c, 0x5b, 0x30,
	0x75, 0xdb, 0x21, 0x83, 0x34, 0x9f, 0x6b, 0x90, 0xd6, 0x11, 0x83, 0x1c, 0xb5, 0x42, 0xfb, 0x69,
	0x56, 0x78, 0xbb, 0x10, 0x5f, 0xa6, 0x47, 0xe6, 0xe9, 0x80, 0x85, 0x6b, 0xc7, 0x5b, 0xd8, 0x3a,
	0xfc, 0x86, 0xee, 0x22, 0x74, 0xd6, 0x64, 0x74, 0x39, 0xd8, 0xd6, 0x7d, 0x3d, 0xb4, 0xb5, 0x9e,
	0xfb, 0x22, 0x28, 0x53, 0x9d, 0xe9, 0x61, 0xe0, 0xc7, 0xf1, 0x33, 0x32, 0x8b, 0xa0, 0x4c, 0xdd,
	0x57, 0xa0, 0xf3, 0x3a, 0xc6, 0xa8, 0x50, 0x67, 0xfe, 0xc7, 0xa8, 0x3a, 0x19, 0x17, 0xe9, 0x1d,
	0xaf, 0xa9, 0xe1, 0x6a, 0xa8, 0x6f, 0x49, 0x1a, 0x4a, 0xa7, 0xd6, 0xb7, 0x06, 0x96, 0xa7, 0x97,
	0x7a, 0x93, 0xa2, 0x4e, 0xa6, 0xee, 0x49, 0x38, 0x71, 0x15, 0xd5, 0x1a, 0x8a, 0x08, 0x45, 0x3e,
	0x01, 0xee, 0x87, 0x55, 0x98, 0x9d, 0x12, 0xab, 0x0a, 0x13, 0x7d, 0xd7, 0x31, 0x1a, 0x6c, 0x9b,
	0x9b, 0x30, 0xdf, 0x7d, 0x8a, 0xf5, 0xbc, 0xf8, 0x13, 0x5f, 0xf9, 0xa2, 0xb8, 0x88, 0x0b, 0xf4,
	0x6f, 0x6f, 0x96, 0x03, 0x32, 0x37, 0x0e, 0xca, 0xec, 0xbe, 0x7b, 0xe8, 0x65, 0x65, 0x4a, 0xae,
	0x1d, 0x18, 0xb9, 0x57, 0xff, 0xc1, 0xc8, 0xed, 0x3f, 0x61, 0x31, 0x7c, 0x17, 0x61, 0x61, 0x14,
	0xa3, 0x2f, 0x46, 0x9c, 0x4d, 0x50, 0x48, 0x5f, 0x51, 0xce, 0x6e, 0x32, 0x81, 0x7e, 0x78, 0x9c,
	0xc4, 0xee, 0xd9, 0x67, 0x97, 0xc9, 0xf4, 0xfc, 0x27, 0x16, 0x34, 0x46, 0x49, 0xb8, 0x1a, 0x92,
	0x2e, 0xb4, 0x46, 0x49, 0x38, 0xf6, 0xfc, 0x3b, 0x76, 0x85, 0xcc, 0x40, 0x5b, 0x03, 0x7d, 0xc7,
	0xdb, 0x4d, 0x72, 0x0a, 0xe6, 0x34, 0x5a, 0xa7, 0x11, 0xf3, 0xe3, 0x98, 0xb2, 0xc8, 0xfe, 0xa5,
	0x4a, 0xe6, 0xa0, 0xa3, 0x49, 0xf3, 0x49, 0xb5, 0xbf, 0x6f, 0x95, 0xd8, 0x7c, 0x3c, 0xec, 0x1f,
	0x5a, 0xe4, 0x04, 0x40, 0x81, 0x79, 0xa6, 0xec, 0x1f, 0x5b, 0x64, 0x36, 0xdf, 0x53, 0x7f, 0x2f,
	0xec, 0x9f, 0x5a, 0x64, 0x26, 0x7f, 0xde, 0x9a, 0x8c, 0xec, 0xcf, 0xdb, 0x65, 0x50, 0x5f, 0x57,
	0xf6, 0x17, 0x7b, 0x10, 0x59, 0x68, 0x7f, 0xd9, 0x2e, 0xf7, 0xca, 0x7d, 0x68, 0xdf, 0x9f, 0x12,
	0xb9, 0xdd, 0xec, 0xaf, 0xa6, 0x44, 0x6e, 0x1d, 0xfb, 0xeb, 0x36, 0x39, 0x07, 0x7d, 0x4d, 0x3c,
	0xe3, 0xe8, 0x23, 0x9e, 0x31, 0x65, 0x7f, 0xdc, 0x21, 0x04, 0x66, 0xcb, 0xe7, 0x5e, 0x15, 0x3c,
	0x4b, 0xed, 0x5f, 0x81, 0x9c, 0x86, 0x13, 0xa6, 0x54, 0xa0, 0xaf, 0x30, 0x67, 0x1f, 0x43, 0x99,
	0xf9, 0x06, 0xa7, 0x2c, 0xe7, 0x9e, 0x00, 0x59, 0x80, 0x33, 0x9a, 0x5b, 0x65, 0x13, 0xaa, 0x50,
	0x8f, 0xf3, 0x06, 0xcf, 0x63, 0xbf, 0x4d, 0xf3, 0xdf, 0xca, 0xa8, 0xca, 0xb9, 0xdf, 0x81, 0x38,
	0x70, 0xaa, 0x94, 0xc0, 0x70, 0x6b, 0x98, 0x6c, 0xa2, 0xb0, 0xff, 0x00, 0xb2, 0x08, 0xf3, 0x3a,
	0x72, 0x15, 0x95, 0x7e, 0x00, 0x86, 0x26, 0xac, 0x2f, 0x07, 0xfb, 0x4f, 0x20, 0x67, 0xc0, 0x36,
	0x87, 0xa3, 0x32, 0xa1, 0x52, 0xe6, 0xbb, 0xbd, 0xdf, 0x3d, 0x8f, 0xd0, 0x31, 0xea, 0x8f, 0xf4,
	0x0f, 0x4c, 0x17, 0x5a, 0xeb, 0x59, 0x10, 0xa0, 0x94, 0x76, 0x85, 0x9c, 0x84, 0x99, 0x55, 0x36,
	0xf1, 0x63, 0x1a, 0x6e, 0xe8, 0x9f, 0x09, 0xdd, 0x8e, 0x93, 0x30, 0x63, 0xd6, 0x57, 0xde, 0x4b,
	0xf5, 0x05, 0xa6, 0x1b, 0x52, 0x52, 0x1e, 0x4e, 0xf8, 0x36, 0x86, 0xba, 0x29, 0x04, 0x66, 0x4d,
	0x03, 0x47, 0x9c, 0x6d, 0xc5, 0x34, 0x50, 0xf6, 0xa3, 0xd6, 0x8a, 0xb8, 0xf7, 0x5d, 0xaf, 0x72,
	0xef, 0x61, 0xaf, 0x7a, 0xff, 0x61, 0xaf, 0xfa, 0xed, 0xc3, 0x5e, 0xf5, 0x83, 0xdd, 0x5e, 0xe5,
	0xa3, 0xdd, 0x5e, 0xe5, 0xb3, 0xdd, 0x5e, 0xf5, 0xde, 0x6e, 0xaf, 0x7a, 0x7f, 0xb7, 0x57, 0xf9,
	0x66, 0xb7, 0x57, 0x81, 0x25, 0x6d, 0x6c, 0xca, 0x37, 0x05, 0x57, 0xb7, 0x50, 0x68, 0x5b, 0xcb,
	0x70, 0x7b, 0x18, 0x70, 0x81, 0xb9, 0xb3, 0xdf, 0xf9, 0xff, 0xde, 0x00, 0x2c, 0xef, 0x04, 0xb7,
	0x7c, 0x75, 0x41, 0xfb, 0x7f, 0x79, 0x87, 0x26, 0x07, 0x7f, 0xfd, 0x36, 0x9b, 0x66, 0xf5, 0xf2,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xd1, 0xad, 0x24, 0x16, 0x0a, 0x00, 0x00,
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reconnect {
		i--
		if m.Reconnect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uin) > 0 {
		i -= len(m.Uin)
		copy(dAtA[i:], m.Uin)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Uin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LogoutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LogoutRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogoutRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogoutRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Noop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Noop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Noop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Kick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsTransparent {
		i--
		if m.IsTransparent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.AtUserList) > 0 {
		for iNdEx := len(m.AtUserList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AtUserList[iNdEx])
			copy(dAtA[i:], m.AtUserList[iNdEx])
			i = encodeVarintProtocol(dAtA, i, uint64(len(m.AtUserList[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ClientUuid) > 0 {
		i -= len(m.ClientUuid)
		copy(dAtA[i:], m.ClientUuid)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ClientUuid)))
		i--
		dAtA[i] = 0x42
	}
	if m.SendTime != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.ConvType != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.ConvType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncMsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncMsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncMsgRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncMsgRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncMsgRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsTransparent {
		i--
		if m.IsTransparent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.AtUserList) > 0 {
		for iNdEx := len(m.AtUserList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AtUserList[iNdEx])
			copy(dAtA[i:], m.AtUserList[iNdEx])
			i = encodeVarintProtocol(dAtA, i, uint64(len(m.AtUserList[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ClientUuid) > 0 {
		i -= len(m.ClientUuid)
		copy(dAtA[i:], m.ClientUuid)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ClientUuid)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgType != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x10
	}
	if m.ConvType != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.ConvType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SendRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientUuid) > 0 {
		i -= len(m.ClientUuid)
		copy(dAtA[i:], m.ClientUuid)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ClientUuid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SendTime != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAckReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAckReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAckRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAckRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAckRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RecallReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecallReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecallRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecallRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintProtocol(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConvId) > 0 {
		i -= len(m.ConvId)
		copy(dAtA[i:], m.ConvId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ConvId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMergerMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMergerMsgReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMergerMsgReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MergerMsgItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergerMsgItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MergerMsgItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SendTime != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMergerMsgRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMergerMsgRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMergerMsgRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClearConversationUnreadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearConversationUnreadReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearConversationUnreadReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConvId) > 0 {
		i -= len(m.ConvId)
		copy(dAtA[i:], m.ConvId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.ConvId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClearConversationUnreadRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearConversationUnreadRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClearConversationUnreadRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovProtocol(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *LoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uin)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Reconnect {
		n += 2
	}
	return n
}

func (m *LoginRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LogoutReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LogoutRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Noop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Kick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProtocol(uint64(m.Id))
	}
	if m.ConvType != 0 {
		n += 1 + sovProtocol(uint64(m.ConvType))
	}
	if m.Type != 0 {
		n += 1 + sovProtocol(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovProtocol(uint64(m.SendTime))
	}
	l = len(m.ClientUuid)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if len(m.AtUserList) > 0 {
		for _, s := range m.AtUserList {
			l = len(s)
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.IsTransparent {
		n += 2
	}
	return n
}

func (m *SyncMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovProtocol(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovProtocol(uint64(m.Limit))
	}
	return n
}

func (m *SyncMsgRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *SendReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConvType != 0 {
		n += 1 + sovProtocol(uint64(m.ConvType))
	}
	if m.MsgType != 0 {
		n += 1 + sovProtocol(uint64(m.MsgType))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.ClientUuid)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if len(m.AtUserList) > 0 {
		for _, s := range m.AtUserList {
			l = len(s)
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	if m.IsTransparent {
		n += 2
	}
	return n
}

func (m *SendRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProtocol(uint64(m.Id))
	}
	if m.SendTime != 0 {
		n += 1 + sovProtocol(uint64(m.SendTime))
	}
	l = len(m.ClientUuid)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *MsgAckReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProtocol(uint64(m.Id))
	}
	return n
}

func (m *MsgAckRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RecallReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProtocol(uint64(m.Id))
	}
	return n
}

func (m *RecallRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConvId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovProtocol(uint64(e))
		}
		n += 1 + sovProtocol(uint64(l)) + l
	}
	return n
}

func (m *DeleteRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMergerMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MergerMsgItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovProtocol(uint64(m.Type))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovProtocol(uint64(m.SendTime))
	}
	return n
}

func (m *GetMergerMsgRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *ClearConversationUnreadReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConvId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *ClearConversationUnreadRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reconnect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reconnect = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogoutRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogoutRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogoutRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Noop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Noop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Noop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvType", wireType)
			}
			m.ConvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvType |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtUserList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AtUserList = append(m.AtUserList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTransparent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTransparent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncMsgRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncMsgRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncMsgRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Msg{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvType", wireType)
			}
			m.ConvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConvType |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtUserList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AtUserList = append(m.AtUserList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTransparent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTransparent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAckRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAckRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAckRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConvId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocol
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtocol
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMergerMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMergerMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMergerMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergerMsgItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergerMsgItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergerMsgItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMergerMsgRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMergerMsgRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMergerMsgRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MergerMsgItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearConversationUnreadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearConversationUnreadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearConversationUnreadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConvId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearConversationUnreadRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearConversationUnreadRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearConversationUnreadRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocol = fmt.Errorf("proto: unexpected end of group")
)
