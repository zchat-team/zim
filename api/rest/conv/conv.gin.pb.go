// Code generated by protoc-gen-zmicro-gin. DO NOT EDIT.
// versions:
// - protoc-gen-zmicro-gin v0.1.0
// - protoc                v3.19.0
// source: api/rest/conv/conv.proto

package conv

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = errors.New
var _ = context.TODO
var _ = gin.New

type ConvHTTPServer interface {
	AddMember(context.Context, *AddMemberReq, *AddMemberRsp) error
	AddMuteClient(context.Context, *AddMuteClientReq, *AddMuteClientRsp) error
	Create(context.Context, *CreateReq, *CreateRsp) error
	Delete(context.Context, *DeleteReq, *DeleteRsp) error
	DeleteMember(context.Context, *DeleteMemberReq, *DeleteMemberRsp) error
	DeleteMsg(context.Context, *DeleteMsgReq, *DeleteMsgRsp) error
	DeleteMuteClient(context.Context, *DeleteMuteClientReq, *DeleteMuteClientRsp) error
	Query(context.Context, *QueryReq, *QueryRsp) error
	QueryMember(context.Context, *QueryMemberReq, *QueryMemberRsp) error
	QueryMsg(context.Context, *QueryMsgReq, *QueryMsgMsgRsp) error
	QueryMuteClient(context.Context, *QueryMuteClientReq, *QueryMuteClientRsp) error
	Recall(context.Context, *RecallReq, *RecallRsp) error
	Send(context.Context, *SendReq, *SendRsp) error
	Update(context.Context, *UpdateReq, *UpdateRsp) error
	UpdateMsg(context.Context, *UpdateMsgReq, *UpdateMsgRsp) error
	Validate(context.Context, any) error
	ErrorEncoder(c *gin.Context, err error, isBadRequest bool)
}

type UnimplementedConvHTTPServer struct{}

func (*UnimplementedConvHTTPServer) AddMember(context.Context, *AddMemberReq, *AddMemberRsp) error {
	return errors.New("method AddMember not implemented")
}
func (*UnimplementedConvHTTPServer) AddMuteClient(context.Context, *AddMuteClientReq, *AddMuteClientRsp) error {
	return errors.New("method AddMuteClient not implemented")
}
func (*UnimplementedConvHTTPServer) Create(context.Context, *CreateReq, *CreateRsp) error {
	return errors.New("method Create not implemented")
}
func (*UnimplementedConvHTTPServer) Delete(context.Context, *DeleteReq, *DeleteRsp) error {
	return errors.New("method Delete not implemented")
}
func (*UnimplementedConvHTTPServer) DeleteMember(context.Context, *DeleteMemberReq, *DeleteMemberRsp) error {
	return errors.New("method DeleteMember not implemented")
}
func (*UnimplementedConvHTTPServer) DeleteMsg(context.Context, *DeleteMsgReq, *DeleteMsgRsp) error {
	return errors.New("method DeleteMsg not implemented")
}
func (*UnimplementedConvHTTPServer) DeleteMuteClient(context.Context, *DeleteMuteClientReq, *DeleteMuteClientRsp) error {
	return errors.New("method DeleteMuteClient not implemented")
}
func (*UnimplementedConvHTTPServer) Query(context.Context, *QueryReq, *QueryRsp) error {
	return errors.New("method Query not implemented")
}
func (*UnimplementedConvHTTPServer) QueryMember(context.Context, *QueryMemberReq, *QueryMemberRsp) error {
	return errors.New("method QueryMember not implemented")
}
func (*UnimplementedConvHTTPServer) QueryMsg(context.Context, *QueryMsgReq, *QueryMsgMsgRsp) error {
	return errors.New("method QueryMsg not implemented")
}
func (*UnimplementedConvHTTPServer) QueryMuteClient(context.Context, *QueryMuteClientReq, *QueryMuteClientRsp) error {
	return errors.New("method QueryMuteClient not implemented")
}
func (*UnimplementedConvHTTPServer) Recall(context.Context, *RecallReq, *RecallRsp) error {
	return errors.New("method Recall not implemented")
}
func (*UnimplementedConvHTTPServer) Send(context.Context, *SendReq, *SendRsp) error {
	return errors.New("method Send not implemented")
}
func (*UnimplementedConvHTTPServer) Update(context.Context, *UpdateReq, *UpdateRsp) error {
	return errors.New("method Update not implemented")
}
func (*UnimplementedConvHTTPServer) UpdateMsg(context.Context, *UpdateMsgReq, *UpdateMsgRsp) error {
	return errors.New("method UpdateMsg not implemented")
}
func (*UnimplementedConvHTTPServer) Validate(context.Context, any) error { return nil }
func (*UnimplementedConvHTTPServer) ErrorEncoder(c *gin.Context, err error, isBadRequest bool) {
	var code = 500
	if isBadRequest {
		code = 400
	}
	c.String(code, err.Error())
}

func RegisterConvHTTPServer(g *gin.RouterGroup, srv ConvHTTPServer) {
	r := g.Group("")
	r.POST("/zim/conversations", _Conv_Create0_HTTP_Handler(srv))
	r.GET("/zim/conversations", _Conv_Query0_HTTP_Handler(srv))
	r.PUT("/zim/conversations/:conv_id", _Conv_Update0_HTTP_Handler(srv))
	r.DELETE("/zim/conversations/:conv_id", _Conv_Delete0_HTTP_Handler(srv))
	r.POST("/zim/conversations/:conv_id/members", _Conv_AddMember0_HTTP_Handler(srv))
	r.DELETE("/zim/conversations/:conv_id/members", _Conv_DeleteMember0_HTTP_Handler(srv))
	r.GET("/zim/conversations/:conv_id/members", _Conv_QueryMember0_HTTP_Handler(srv))
	r.POST("/zim/conversations/:conv_id/mutes", _Conv_AddMuteClient0_HTTP_Handler(srv))
	r.DELETE("/zim/conversations/:conv_id/mutes", _Conv_DeleteMuteClient0_HTTP_Handler(srv))
	r.GET("/zim/conversations/:conv_id/mutes", _Conv_QueryMuteClient0_HTTP_Handler(srv))
	r.POST("/zim/conversations/:conv_id/messages", _Conv_Send0_HTTP_Handler(srv))
	r.GET("/zim/conversations/:conv_id/messages", _Conv_QueryMsg0_HTTP_Handler(srv))
	r.PUT("/zim/conversations/:conv_id/messages/:msg_id", _Conv_UpdateMsg0_HTTP_Handler(srv))
	r.PUT("/zim/conversations/:conv_id/messages/:msg_id/recall", _Conv_Recall0_HTTP_Handler(srv))
	r.DELETE("/zim/conversations/:conv_id/messages/:msg_id", _Conv_DeleteMsg0_HTTP_Handler(srv))
}

func _Conv_Create0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req CreateReq
		var rsp CreateRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Create(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_Query0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req QueryReq
		var rsp QueryRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Query(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_Update0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req UpdateReq
		var rsp UpdateRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Update(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_Delete0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req DeleteReq
		var rsp DeleteRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Delete(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_AddMember0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req AddMemberReq
		var rsp AddMemberRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.AddMember(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_DeleteMember0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req DeleteMemberReq
		var rsp DeleteMemberRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.DeleteMember(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_QueryMember0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req QueryMemberReq
		var rsp QueryMemberRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.QueryMember(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_AddMuteClient0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req AddMuteClientReq
		var rsp AddMuteClientRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.AddMuteClient(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_DeleteMuteClient0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req DeleteMuteClientReq
		var rsp DeleteMuteClientRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.DeleteMuteClient(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_QueryMuteClient0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req QueryMuteClientReq
		var rsp QueryMuteClientRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.QueryMuteClient(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_Send0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req SendReq
		var rsp SendRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Send(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_QueryMsg0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req QueryMsgReq
		var rsp QueryMsgMsgRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.QueryMsg(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_UpdateMsg0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req UpdateMsgReq
		var rsp UpdateMsgRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.UpdateMsg(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_Recall0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req RecallReq
		var rsp RecallRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Recall(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Conv_DeleteMsg0_HTTP_Handler(srv ConvHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req DeleteMsgReq
		var rsp DeleteMsgRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.DeleteMsg(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}
