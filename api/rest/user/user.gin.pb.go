// Code generated by protoc-gen-zmicro-gin. DO NOT EDIT.
// versions:
// - protoc-gen-zmicro-gin v0.1.0
// - protoc                v3.19.0
// source: api/rest/user/user.proto

package user

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = errors.New
var _ = context.TODO
var _ = gin.New

type ClientHTTPServer interface {
	CheckOnline(context.Context, *CheckOnlineReq, *CheckOnlineRsp) error
	GetMessage(context.Context, *GetMessageReq, *GetMessageRsp) error
	Kick(context.Context, *KickReq, *KickRsp) error
	UnreadCount(context.Context, *UnreadCountReq, *UnreadCountRsp) error
	Validate(context.Context, any) error
	ErrorEncoder(c *gin.Context, err error, isBadRequest bool)
}

type UnimplementedClientHTTPServer struct{}

func (*UnimplementedClientHTTPServer) CheckOnline(context.Context, *CheckOnlineReq, *CheckOnlineRsp) error {
	return errors.New("method CheckOnline not implemented")
}
func (*UnimplementedClientHTTPServer) GetMessage(context.Context, *GetMessageReq, *GetMessageRsp) error {
	return errors.New("method GetMessage not implemented")
}
func (*UnimplementedClientHTTPServer) Kick(context.Context, *KickReq, *KickRsp) error {
	return errors.New("method Kick not implemented")
}
func (*UnimplementedClientHTTPServer) UnreadCount(context.Context, *UnreadCountReq, *UnreadCountRsp) error {
	return errors.New("method UnreadCount not implemented")
}
func (*UnimplementedClientHTTPServer) Validate(context.Context, any) error { return nil }
func (*UnimplementedClientHTTPServer) ErrorEncoder(c *gin.Context, err error, isBadRequest bool) {
	var code = 500
	if isBadRequest {
		code = 400
	}
	c.String(code, err.Error())
}

func RegisterClientHTTPServer(g *gin.RouterGroup, srv ClientHTTPServer) {
	r := g.Group("")
	r.POST("/zim/users/checkOnline", _Client_CheckOnline0_HTTP_Handler(srv))
	r.GET("/zim/users/:uin/unreadCount", _Client_UnreadCount0_HTTP_Handler(srv))
	r.PATCH("/zim/clients/:uin/kick", _Client_Kick0_HTTP_Handler(srv))
	r.GET("/zim/clients/:uin/messages", _Client_GetMessage0_HTTP_Handler(srv))
}

func _Client_CheckOnline0_HTTP_Handler(srv ClientHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req CheckOnlineReq
		var rsp CheckOnlineRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.CheckOnline(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Client_UnreadCount0_HTTP_Handler(srv ClientHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req UnreadCountReq
		var rsp UnreadCountRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.UnreadCount(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Client_Kick0_HTTP_Handler(srv ClientHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req KickReq
		var rsp KickRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.Kick(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}

func _Client_GetMessage0_HTTP_Handler(srv ClientHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		shouldBind := func(req any) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return srv.Validate(c.Request.Context(), req)
		}

		var req GetMessageReq
		var rsp GetMessageRsp
		if err := shouldBind(&req); err != nil {
			srv.ErrorEncoder(c, err, true)
			return
		}
		err := srv.GetMessage(c.Request.Context(), &req, &rsp)
		if err != nil {
			srv.ErrorEncoder(c, err, false)
			return
		}
		c.JSON(200, rsp)
	}
}
