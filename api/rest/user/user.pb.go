// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/rest/user/user.proto

package user

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CheckOnlineReq struct {
	// 要查询的用户列表
	Uins []string `protobuf:"bytes,1,rep,name=uins,proto3" json:"uins,omitempty"`
}

func (m *CheckOnlineReq) Reset()         { *m = CheckOnlineReq{} }
func (m *CheckOnlineReq) String() string { return proto.CompactTextString(m) }
func (*CheckOnlineReq) ProtoMessage()    {}
func (*CheckOnlineReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2883aca4fefb121, []int{0}
}
func (m *CheckOnlineReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckOnlineReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckOnlineReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckOnlineReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckOnlineReq.Merge(m, src)
}
func (m *CheckOnlineReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckOnlineReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckOnlineReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckOnlineReq proto.InternalMessageInfo

func (*CheckOnlineReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.api.rest.user.CheckOnlineReq"
}

type CheckOnlineRsp struct {
	Uins []string `protobuf:"bytes,1,rep,name=uins,proto3" json:"uins,omitempty"`
}

func (m *CheckOnlineRsp) Reset()         { *m = CheckOnlineRsp{} }
func (m *CheckOnlineRsp) String() string { return proto.CompactTextString(m) }
func (*CheckOnlineRsp) ProtoMessage()    {}
func (*CheckOnlineRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2883aca4fefb121, []int{1}
}
func (m *CheckOnlineRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckOnlineRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckOnlineRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckOnlineRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckOnlineRsp.Merge(m, src)
}
func (m *CheckOnlineRsp) XXX_Size() int {
	return m.Size()
}
func (m *CheckOnlineRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckOnlineRsp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckOnlineRsp proto.InternalMessageInfo

func (*CheckOnlineRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.api.rest.user.CheckOnlineRsp"
}

type UnreadCountReq struct {
	Uin string `protobuf:"bytes,1,opt,name=uin,proto3" json:"uin,omitempty"`
	// 会话ID，如果为空，则查询所有会话的未读计数
	ConvId string `protobuf:"bytes,2,opt,name=conv_id,json=convId,proto3" json:"conv_id,omitempty"`
}

func (m *UnreadCountReq) Reset()         { *m = UnreadCountReq{} }
func (m *UnreadCountReq) String() string { return proto.CompactTextString(m) }
func (*UnreadCountReq) ProtoMessage()    {}
func (*UnreadCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2883aca4fefb121, []int{2}
}
func (m *UnreadCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnreadCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnreadCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnreadCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnreadCountReq.Merge(m, src)
}
func (m *UnreadCountReq) XXX_Size() int {
	return m.Size()
}
func (m *UnreadCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UnreadCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_UnreadCountReq proto.InternalMessageInfo

func (*UnreadCountReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.api.rest.user.UnreadCountReq"
}

type UnreadCountRsp struct {
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *UnreadCountRsp) Reset()         { *m = UnreadCountRsp{} }
func (m *UnreadCountRsp) String() string { return proto.CompactTextString(m) }
func (*UnreadCountRsp) ProtoMessage()    {}
func (*UnreadCountRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2883aca4fefb121, []int{3}
}
func (m *UnreadCountRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnreadCountRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnreadCountRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnreadCountRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnreadCountRsp.Merge(m, src)
}
func (m *UnreadCountRsp) XXX_Size() int {
	return m.Size()
}
func (m *UnreadCountRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_UnreadCountRsp.DiscardUnknown(m)
}

var xxx_messageInfo_UnreadCountRsp proto.InternalMessageInfo

func (*UnreadCountRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.api.rest.user.UnreadCountRsp"
}

type KickReq struct {
	Uin string `protobuf:"bytes,1,opt,name=uin,proto3" json:"uin,omitempty"`
}

func (m *KickReq) Reset()         { *m = KickReq{} }
func (m *KickReq) String() string { return proto.CompactTextString(m) }
func (*KickReq) ProtoMessage()    {}
func (*KickReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2883aca4fefb121, []int{4}
}
func (m *KickReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickReq.Merge(m, src)
}
func (m *KickReq) XXX_Size() int {
	return m.Size()
}
func (m *KickReq) XXX_DiscardUnknown() {
	xxx_messageInfo_KickReq.DiscardUnknown(m)
}

var xxx_messageInfo_KickReq proto.InternalMessageInfo

func (*KickReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.api.rest.user.KickReq"
}

type KickRsp struct {
}

func (m *KickRsp) Reset()         { *m = KickRsp{} }
func (m *KickRsp) String() string { return proto.CompactTextString(m) }
func (*KickRsp) ProtoMessage()    {}
func (*KickRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2883aca4fefb121, []int{5}
}
func (m *KickRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KickRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KickRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KickRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickRsp.Merge(m, src)
}
func (m *KickRsp) XXX_Size() int {
	return m.Size()
}
func (m *KickRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_KickRsp.DiscardUnknown(m)
}

var xxx_messageInfo_KickRsp proto.InternalMessageInfo

func (*KickRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.api.rest.user.KickRsp"
}

type GetMessageReq struct {
	Uin string `protobuf:"bytes,1,opt,name=uin,proto3" json:"uin,omitempty"`
}

func (m *GetMessageReq) Reset()         { *m = GetMessageReq{} }
func (m *GetMessageReq) String() string { return proto.CompactTextString(m) }
func (*GetMessageReq) ProtoMessage()    {}
func (*GetMessageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2883aca4fefb121, []int{6}
}
func (m *GetMessageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMessageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMessageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMessageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMessageReq.Merge(m, src)
}
func (m *GetMessageReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMessageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMessageReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMessageReq proto.InternalMessageInfo

func (*GetMessageReq) XXX_MessageName() string {
	return "github.com.zchat.team.zim.api.rest.user.GetMessageReq"
}

type GetMessageRsp struct {
}

func (m *GetMessageRsp) Reset()         { *m = GetMessageRsp{} }
func (m *GetMessageRsp) String() string { return proto.CompactTextString(m) }
func (*GetMessageRsp) ProtoMessage()    {}
func (*GetMessageRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2883aca4fefb121, []int{7}
}
func (m *GetMessageRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMessageRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMessageRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMessageRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMessageRsp.Merge(m, src)
}
func (m *GetMessageRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetMessageRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMessageRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetMessageRsp proto.InternalMessageInfo

func (*GetMessageRsp) XXX_MessageName() string {
	return "github.com.zchat.team.zim.api.rest.user.GetMessageRsp"
}
func init() {
	proto.RegisterType((*CheckOnlineReq)(nil), "github.com.zchat.team.zim.api.rest.user.CheckOnlineReq")
	proto.RegisterType((*CheckOnlineRsp)(nil), "github.com.zchat.team.zim.api.rest.user.CheckOnlineRsp")
	proto.RegisterType((*UnreadCountReq)(nil), "github.com.zchat.team.zim.api.rest.user.UnreadCountReq")
	proto.RegisterType((*UnreadCountRsp)(nil), "github.com.zchat.team.zim.api.rest.user.UnreadCountRsp")
	proto.RegisterType((*KickReq)(nil), "github.com.zchat.team.zim.api.rest.user.KickReq")
	proto.RegisterType((*KickRsp)(nil), "github.com.zchat.team.zim.api.rest.user.KickRsp")
	proto.RegisterType((*GetMessageReq)(nil), "github.com.zchat.team.zim.api.rest.user.GetMessageReq")
	proto.RegisterType((*GetMessageRsp)(nil), "github.com.zchat.team.zim.api.rest.user.GetMessageRsp")
}

func init() { proto.RegisterFile("api/rest/user/user.proto", fileDescriptor_f2883aca4fefb121) }

var fileDescriptor_f2883aca4fefb121 = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xce, 0xf4, 0x47, 0x4a, 0xa7, 0x5a, 0x65, 0xa8, 0x6d, 0x4c, 0xea, 0x5a, 0x17, 0x7f, 0x43,
	0x77, 0xa5, 0x82, 0x8a, 0xa7, 0xa6, 0x39, 0x88, 0x14, 0x11, 0x03, 0x5e, 0xbc, 0x94, 0xed, 0x66,
	0xdc, 0x0c, 0x4d, 0x66, 0xc6, 0xcc, 0x6e, 0x0f, 0x15, 0xc1, 0x8a, 0x48, 0xc0, 0x83, 0x6d, 0x55,
	0x28, 0x52, 0x10, 0x45, 0xa1, 0x78, 0xb0, 0x9e, 0xaa, 0x54, 0xa1, 0x0a, 0x1e, 0xea, 0xad, 0xe0,
	0xc5, 0x63, 0x6d, 0x9a, 0x4d, 0xfd, 0x2f, 0x64, 0x66, 0xd3, 0x76, 0x17, 0x72, 0x68, 0x7b, 0xd9,
	0x9d, 0x37, 0xf3, 0xbe, 0xef, 0x7d, 0xdf, 0xcc, 0xe3, 0xc1, 0x84, 0xc5, 0x89, 0x59, 0xc2, 0xc2,
	0x35, 0x3d, 0x81, 0x4b, 0xea, 0x63, 0xf0, 0x12, 0x73, 0x19, 0x3a, 0xe3, 0x10, 0x37, 0xef, 0x8d,
	0x1a, 0x36, 0x2b, 0x1a, 0x13, 0x76, 0xde, 0x72, 0x0d, 0x17, 0x5b, 0x45, 0x63, 0x82, 0x14, 0x0d,
	0x8b, 0x13, 0x43, 0x62, 0x0c, 0x99, 0x9e, 0xec, 0x75, 0x18, 0x73, 0x0a, 0xd8, 0x94, 0x4c, 0x16,
	0xa5, 0xcc, 0xb5, 0x5c, 0xc2, 0xa8, 0x08, 0x68, 0x92, 0x5d, 0x0e, 0x73, 0x98, 0x5a, 0x9a, 0x72,
	0x55, 0xdf, 0x0d, 0x7e, 0x76, 0xbf, 0x83, 0x69, 0x3f, 0xe3, 0x98, 0x5a, 0x9c, 0x8c, 0x0f, 0x98,
	0x8c, 0x2b, 0x64, 0x03, 0x96, 0xe3, 0xa1, 0x1a, 0x77, 0x09, 0x2e, 0xe4, 0x46, 0x46, 0x71, 0xde,
	0x1a, 0x27, 0xac, 0xae, 0x56, 0x3f, 0x07, 0x3b, 0x33, 0x79, 0x6c, 0x8f, 0xdd, 0xa4, 0x05, 0x42,
	0x71, 0x16, 0xdf, 0x43, 0x3d, 0xb0, 0xc5, 0x23, 0x54, 0x24, 0x40, 0x5f, 0xf3, 0xd9, 0xf6, 0xa1,
	0xe6, 0xb5, 0x74, 0x53, 0x56, 0x6d, 0xe8, 0x27, 0xa3, 0xa9, 0x82, 0x23, 0x14, 0x4e, 0xad, 0x67,
	0x0d, 0xc2, 0xce, 0xdb, 0xb4, 0x84, 0xad, 0x5c, 0x86, 0x79, 0xd4, 0x95, 0x84, 0x47, 0x60, 0xb3,
	0x47, 0x68, 0x02, 0xf4, 0x81, 0x2d, 0x3e, 0x19, 0xa3, 0x1e, 0xd8, 0x66, 0x33, 0x3a, 0x3e, 0x42,
	0x72, 0x89, 0x26, 0x79, 0x94, 0x8d, 0xcb, 0xf0, 0x7a, 0x4e, 0x3f, 0x1d, 0x65, 0x10, 0x1c, 0x75,
	0xc1, 0x56, 0x5b, 0xae, 0x15, 0x47, 0x6b, 0x36, 0x08, 0xf4, 0x14, 0x6c, 0x1b, 0x26, 0xf6, 0x98,
	0x2c, 0x71, 0x38, 0x54, 0x42, 0xb1, 0xeb, 0xed, 0xf5, 0x43, 0xc1, 0xf5, 0x13, 0xf0, 0xe0, 0x35,
	0xec, 0xde, 0xc0, 0x42, 0x58, 0x0e, 0x6e, 0x9c, 0x7d, 0x28, 0x92, 0x22, 0xf8, 0xc0, 0x93, 0x38,
	0x8c, 0x67, 0x0a, 0x04, 0x53, 0x17, 0xfd, 0x00, 0xb0, 0x23, 0xe4, 0x1b, 0x5d, 0x36, 0x76, 0xf9,
	0xc0, 0x46, 0xf4, 0x62, 0x93, 0xfb, 0x03, 0x0a, 0xae, 0x0f, 0xce, 0xa4, 0x7b, 0x61, 0xbc, 0xf6,
	0x62, 0xde, 0x2f, 0x7f, 0x46, 0xc8, 0x7f, 0xfd, 0x7e, 0x73, 0xe1, 0x6d, 0x75, 0x6e, 0xbe, 0xb6,
	0xb4, 0xec, 0x97, 0xa7, 0xaa, 0xd3, 0xb3, 0x8f, 0x7e, 0x6f, 0x3c, 0x6f, 0x4a, 0xe9, 0xdd, 0xe6,
	0x04, 0x29, 0xaa, 0x4e, 0x14, 0xa6, 0xbd, 0xc3, 0x70, 0x15, 0x9c, 0x47, 0x3f, 0x01, 0xec, 0x08,
	0xdd, 0xe9, 0x1e, 0x3c, 0x44, 0xdf, 0x32, 0xb9, 0x3f, 0xa0, 0xe0, 0x7a, 0xa6, 0x81, 0x07, 0x7f,
	0xee, 0xc3, 0xe6, 0xc2, 0xd7, 0xcd, 0x8f, 0x6f, 0xfc, 0x97, 0x9f, 0x94, 0x07, 0x0d, 0xf5, 0x86,
	0x3c, 0xdc, 0xf7, 0x08, 0x7d, 0x60, 0x7a, 0x21, 0xd9, 0xef, 0x00, 0x6c, 0x91, 0xaf, 0x8a, 0x2e,
	0xec, 0x5a, 0x46, 0xbd, 0x43, 0x92, 0x7b, 0x44, 0x08, 0xae, 0x5f, 0x99, 0x49, 0x77, 0x6f, 0x2b,
	0x3e, 0x50, 0xfd, 0xb6, 0x54, 0x2d, 0x2f, 0x6e, 0x7c, 0x79, 0x5a, 0x5b, 0x5a, 0x56, 0x5a, 0x8f,
	0x0e, 0xf4, 0x28, 0xad, 0xb6, 0xea, 0x92, 0x2d, 0xb5, 0x63, 0x52, 0xdd, 0x2f, 0x00, 0xe1, 0x4e,
	0x3b, 0xa1, 0x4b, 0xbb, 0x2e, 0x1d, 0x69, 0xd3, 0xe4, 0xbe, 0x70, 0x82, 0xeb, 0xc3, 0x33, 0xe9,
	0x53, 0xdb, 0xc2, 0x53, 0xc1, 0x55, 0x07, 0x51, 0xf5, 0xd9, 0xf4, 0xbf, 0x87, 0x93, 0xb5, 0x57,
	0x8f, 0xfd, 0xc5, 0xb2, 0x3f, 0xb9, 0xa0, 0x7c, 0x1c, 0x43, 0xa9, 0x06, 0x3e, 0x8a, 0x01, 0x9d,
	0x18, 0xba, 0xb5, 0xf2, 0x57, 0x8b, 0xad, 0xac, 0x6b, 0x60, 0x75, 0x5d, 0x03, 0x6b, 0xeb, 0x1a,
	0x98, 0xaa, 0x68, 0xb1, 0xd9, 0x8a, 0x16, 0xfb, 0x5e, 0xd1, 0xc0, 0x4a, 0x45, 0x03, 0xab, 0x15,
	0x2d, 0xf6, 0xa7, 0xa2, 0xc5, 0xee, 0x84, 0xe6, 0x9e, 0xa9, 0xd4, 0xf6, 0x4b, 0xb5, 0x8a, 0x3b,
	0x32, 0x2b, 0x47, 0xe3, 0x6a, 0xf2, 0x5c, 0xfc, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x60, 0x4f, 0x4d,
	0xc2, 0x43, 0x05, 0x00, 0x00,
}

func (m *CheckOnlineReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckOnlineReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckOnlineReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uins) > 0 {
		for iNdEx := len(m.Uins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Uins[iNdEx])
			copy(dAtA[i:], m.Uins[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.Uins[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheckOnlineRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckOnlineRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckOnlineRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uins) > 0 {
		for iNdEx := len(m.Uins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Uins[iNdEx])
			copy(dAtA[i:], m.Uins[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.Uins[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UnreadCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnreadCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnreadCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConvId) > 0 {
		i -= len(m.ConvId)
		copy(dAtA[i:], m.ConvId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.ConvId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uin) > 0 {
		i -= len(m.Uin)
		copy(dAtA[i:], m.Uin)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Uin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnreadCountRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnreadCountRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnreadCountRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KickReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uin) > 0 {
		i -= len(m.Uin)
		copy(dAtA[i:], m.Uin)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Uin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KickRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KickRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetMessageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMessageReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMessageReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uin) > 0 {
		i -= len(m.Uin)
		copy(dAtA[i:], m.Uin)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Uin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetMessageRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMessageRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMessageRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CheckOnlineReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uins) > 0 {
		for _, s := range m.Uins {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *CheckOnlineRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uins) > 0 {
		for _, s := range m.Uins {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *UnreadCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uin)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.ConvId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UnreadCountRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovUser(uint64(m.Count))
	}
	return n
}

func (m *KickReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uin)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *KickRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetMessageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uin)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GetMessageRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckOnlineReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckOnlineReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckOnlineReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uins = append(m.Uins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckOnlineRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckOnlineRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckOnlineRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uins = append(m.Uins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnreadCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnreadCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnreadCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConvId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnreadCountRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnreadCountRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnreadCountRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMessageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMessageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMessageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMessageRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMessageRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMessageRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
